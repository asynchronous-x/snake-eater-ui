{"version":3,"file":"index.esm.js","sources":["../stories/Accordion/Accordion.tsx","../stories/Alert/Alert.tsx","../stories/Badge/Badge.tsx","../stories/BarGraph/BarGraph.tsx","../stories/Breadcrumb/Breadcrumb.tsx","../stories/Button/Button.tsx","../stories/Card/Card.tsx","../stories/Checkbox/Checkbox.tsx","../stories/ColorPicker/ColorPicker.tsx","../stories/Divider/Divider.tsx","../stories/DonutGraph/DonutGraph.tsx","../stories/Drawer/Drawer.tsx","../stories/Filter/Filter.tsx","../stories/Grid/Grid.tsx","../stories/Heading/Heading.tsx","../stories/HexagonalBinningGraph/HexagonalBinningGraph.tsx","../stories/IconButton/IconButton.tsx","../stories/Input/Input.tsx","../stories/KeyboardKey/KeyboardKey.tsx","../stories/LineGraph/LineGraph.tsx","../stories/Link/Link.tsx","../stories/List/List.tsx","../stories/Loading/Loading.tsx","../stories/Menu/Menu.tsx","../stories/Modal/Modal.tsx","../stories/PinInput/PinInput.tsx","../stories/Progress/Progress.tsx","../stories/RadioButton/RadioButton.tsx","../stories/RidgelineGraph/RidgelineGraph.tsx","../stories/Select/Select.tsx","../stories/Skeleton/Skeleton.tsx","../stories/Slider/Slider.tsx","../stories/SpiderGraph/SpiderGraph.tsx","../stories/Stat/Stat.tsx","../stories/Stepper/Stepper.tsx","../stories/StreamGraph/StreamGraph.tsx","../stories/SubCard/SubCard.tsx","../stories/Table/Table.tsx","../stories/Tabs/Tabs.tsx","../stories/Text/Text.tsx","../stories/Textarea/Textarea.tsx","../stories/Toast/Toast.tsx","../stories/Toggle/Toggle.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './accordion.css';\r\n\r\n// Icon component for ChevronDown from pixel-icon-library\r\nconst ChevronDownIcon = ({ className = '' }: { className?: string }) => (\r\n  <svg className={className} viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\">\r\n    <polygon points=\"23 8 23 9 22 9 22 10 21 10 21 11 20 11 20 12 19 12 19 13 18 13 18 14 17 14 17 15 16 15 16 16 15 16 15 17 14 17 14 18 13 18 13 19 11 19 11 18 10 18 10 17 9 17 9 16 8 16 8 15 7 15 7 14 6 14 6 13 5 13 5 12 4 12 4 11 3 11 3 10 2 10 2 9 1 9 1 8 2 8 2 7 3 7 3 6 4 6 4 7 5 7 5 8 6 8 6 9 7 9 7 10 8 10 8 11 9 11 9 12 10 12 10 13 11 13 11 14 13 14 13 13 14 13 14 12 15 12 15 11 16 11 16 10 17 10 17 9 18 9 18 8 19 8 19 7 20 7 20 6 21 6 21 7 22 7 22 8 23 8\"/>\r\n  </svg>\r\n);\r\n\r\ninterface AccordionItem {\r\n  id: string;\r\n  title: React.ReactNode;\r\n  content: React.ReactNode;\r\n  disabled?: boolean;\r\n  icon?: React.ReactNode;\r\n}\r\n\r\nexport interface AccordionProps {\r\n  /** Accordion items */\r\n  items: AccordionItem[];\r\n  /** Allow multiple items open */\r\n  multiple?: boolean;\r\n  /** Initially open items */\r\n  defaultOpen?: string[];\r\n  /** Controlled open items */\r\n  openItems?: string[];\r\n  /** Change handler */\r\n  onChange?: (openItems: string[]) => void;\r\n  /** Visual variant */\r\n  variant?: 'default' | 'boxed' | 'minimal';\r\n  /** Size variant */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** Use header style with lighter background */\r\n  header?: boolean;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n}\r\n\r\n/** Accordion component for collapsible content */\r\nexport const Accordion: React.FC<AccordionProps> = ({\r\n  items,\r\n  multiple = false,\r\n  defaultOpen = [],\r\n  openItems: controlledOpenItems,\r\n  onChange,\r\n  variant = 'default',\r\n  size = 'medium',\r\n  header = false,\r\n  className = '',\r\n}) => {\r\n  const [internalOpenItems, setInternalOpenItems] = useState<string[]>(defaultOpen);\r\n  const openItems = controlledOpenItems !== undefined ? controlledOpenItems : internalOpenItems;\r\n\r\n  const handleToggle = (itemId: string) => {\r\n    let newOpenItems: string[];\r\n\r\n    if (multiple) {\r\n      newOpenItems = openItems.includes(itemId)\r\n        ? openItems.filter((id) => id !== itemId)\r\n        : [...openItems, itemId];\r\n    } else {\r\n      newOpenItems = openItems.includes(itemId) ? [] : [itemId];\r\n    }\r\n\r\n    if (onChange) {\r\n      onChange(newOpenItems);\r\n    } else {\r\n      setInternalOpenItems(newOpenItems);\r\n    }\r\n  };\r\n\r\n  const accordionClasses = [\r\n    'snake-accordion',\r\n    `snake-accordion--${variant}`,\r\n    `snake-accordion--${size}`,\r\n    header && 'snake-accordion--header',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  return (\r\n    <div className={accordionClasses}>\r\n      {items.map((item, index) => {\r\n        const isOpen = openItems.includes(item.id);\r\n        const itemClasses = [\r\n          'snake-accordion__item',\r\n          isOpen && 'snake-accordion__item--open',\r\n          item.disabled && 'snake-accordion__item--disabled',\r\n        ]\r\n          .filter(Boolean)\r\n          .join(' ');\r\n\r\n        return (\r\n          <div key={item.id} className={itemClasses}>\r\n            <button\r\n              type=\"button\"\r\n              className=\"snake-accordion__header\"\r\n              onClick={() => !item.disabled && handleToggle(item.id)}\r\n              disabled={item.disabled}\r\n              aria-expanded={isOpen}\r\n              aria-controls={`accordion-panel-${item.id}`}\r\n            >\r\n              <div className=\"snake-accordion__header-content\">\r\n                {item.icon && <span className=\"snake-accordion__icon\">{item.icon}</span>}\r\n                <span className=\"snake-accordion__title\">{item.title}</span>\r\n              </div>\r\n              <ChevronDownIcon className=\"snake-accordion__chevron\" />\r\n            </button>\r\n\r\n            <div\r\n              id={`accordion-panel-${item.id}`}\r\n              className=\"snake-accordion__panel\"\r\n              aria-hidden={!isOpen}\r\n            >\r\n              <div className=\"snake-accordion__content\">{item.content}</div>\r\n            </div>\r\n\r\n            {variant === 'default' && index < items.length - 1 && (\r\n              <div className=\"snake-accordion__divider\" />\r\n            )}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport './alert.css';\r\n\r\n// Icon components from pixel-icon-library\r\nconst AngleRightIcon = ({ className = '' }: { className?: string }) => (\r\n  <svg className={className} viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\">\r\n    <polygon points=\"7 19 7 17 8 17 8 16 9 16 9 15 10 15 10 14 11 14 11 13 12 13 12 11 11 11 11 10 10 10 10 9 9 9 9 8 8 8 8 7 7 7 7 5 8 5 8 4 10 4 10 5 11 5 11 6 12 6 12 7 13 7 13 8 14 8 14 9 15 9 15 10 16 10 16 11 17 11 17 13 16 13 16 14 15 14 15 15 14 15 14 16 13 16 13 17 12 17 12 18 11 18 11 19 10 19 10 20 8 20 8 19 7 19\"/>\r\n  </svg>\r\n);\r\n\r\nconst CheckIcon = ({ className = '' }: { className?: string }) => (\r\n  <svg className={className} viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\">\r\n    <polygon points=\"23 5 23 6 22 6 22 7 21 7 21 8 20 8 20 9 19 9 19 10 18 10 18 11 17 11 17 12 16 12 16 13 15 13 15 14 14 14 14 15 13 15 13 16 12 16 12 17 11 17 11 18 10 18 10 19 8 19 8 18 7 18 7 17 6 17 6 16 5 16 5 15 4 15 4 14 3 14 3 13 2 13 2 12 1 12 1 11 2 11 2 10 3 10 3 9 4 9 4 10 5 10 5 11 6 11 6 12 7 12 7 13 8 13 8 14 10 14 10 13 11 13 11 12 12 12 12 11 13 11 13 10 14 10 14 9 15 9 15 8 16 8 16 7 17 7 17 6 18 6 18 5 19 5 19 4 20 4 20 3 21 3 21 4 22 4 22 5 23 5\"/>\r\n  </svg>\r\n);\r\n\r\nconst ExclamationTriangleIcon = ({ className = '' }: { className?: string }) => (\r\n  <svg className={className} viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\">\r\n    <path d=\"m22,20v-2h-1v-2h-1v-2h-1v-2h-1v-2h-1v-2h-1v-2h-1v-2h-1v-2h-1v-1h-2v1h-1v2h-1v2h-1v2h-1v2h-1v2h-1v2h-1v2h-1v2h-1v2h-1v2h1v1h20v-1h1v-2h-1Zm-12-9h4v3h-1v3h-2v-3h-1v-3Zm1,7h2v2h-2v-2Z\"/>\r\n  </svg>\r\n);\r\n\r\nconst TimesIcon = ({ className = '' }: { className?: string }) => (\r\n  <svg className={className} viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\">\r\n    <polygon points=\"15 13 16 13 16 14 17 14 17 15 18 15 18 16 19 16 19 17 20 17 20 18 21 18 21 19 22 19 22 20 21 20 21 21 20 21 20 22 19 22 19 21 18 21 18 20 17 20 17 19 16 19 16 18 15 18 15 17 14 17 14 16 13 16 13 15 11 15 11 16 10 16 10 17 9 17 9 18 8 18 8 19 7 19 7 20 6 20 6 21 5 21 5 22 4 22 4 21 3 21 3 20 2 20 2 19 3 19 3 18 4 18 4 17 5 17 5 16 6 16 6 15 7 15 7 14 8 14 8 13 9 13 9 11 8 11 8 10 7 10 7 9 6 9 6 8 5 8 5 7 4 7 4 6 3 6 3 5 2 5 2 4 3 4 3 3 4 3 4 2 5 2 5 3 6 3 6 4 7 4 7 5 8 5 8 6 9 6 9 7 10 7 10 8 11 8 11 9 13 9 13 8 14 8 14 7 15 7 15 6 16 6 16 5 17 5 17 4 18 4 18 3 19 3 19 2 20 2 20 3 21 3 21 4 22 4 22 5 21 5 21 6 20 6 20 7 19 7 19 8 18 8 18 9 17 9 17 10 16 10 16 11 15 11 15 13\"/>\r\n  </svg>\r\n);\r\n\r\nconst InfoCircleIcon = ({ className = '' }: { className?: string }) => (\r\n  <svg className={className} viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\">\r\n    <path d=\"m22,9v-2h-1v-2h-1v-1h-1v-1h-2v-1h-2v-1h-6v1h-2v1h-2v1h-1v1h-1v2h-1v2h-1v6h1v2h1v2h1v1h1v1h2v1h2v1h6v-1h2v-1h2v-1h1v-1h1v-2h1v-2h1v-6h-1Zm-11-3h2v2h-2v-2Zm-1,9h1v-5h-1v-1h3v6h1v2h-4v-2Z\"/>\r\n  </svg>\r\n);\r\n\r\nexport interface AlertProps {\r\n  /** Alert title */\r\n  title?: string;\r\n  /** Alert description */\r\n  description?: React.ReactNode;\r\n  /** Alert variant */\r\n  variant?: 'default' | 'success' | 'warning' | 'danger' | 'info';\r\n  /** Size variant */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** Show icon */\r\n  showIcon?: boolean;\r\n  /** Custom icon */\r\n  icon?: React.ReactNode;\r\n  /** Closable alert */\r\n  closable?: boolean;\r\n  /** Close handler */\r\n  onClose?: () => void;\r\n  /** Action buttons */\r\n  actions?: React.ReactNode;\r\n  /** Border position */\r\n  borderPosition?: 'left' | 'top' | 'all';\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n  /** Children content (alternative to description) */\r\n  children?: React.ReactNode;\r\n}\r\n\r\n/** Alert component for displaying important messages */\r\nexport const Alert: React.FC<AlertProps> = ({\r\n  title,\r\n  description,\r\n  variant = 'default',\r\n  size = 'medium',\r\n  showIcon = true,\r\n  icon,\r\n  closable = false,\r\n  onClose,\r\n  actions,\r\n  borderPosition = 'left',\r\n  className = '',\r\n  children,\r\n}) => {\r\n  const alertClasses = [\r\n    'snake-alert',\r\n    `snake-alert--${variant}`,\r\n    `snake-alert--${size}`,\r\n    `snake-alert--border-${borderPosition}`,\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const getDefaultIcon = () => {\r\n    if (icon) return icon;\r\n\r\n    switch (variant) {\r\n      case 'success':\r\n        return <CheckIcon />;\r\n      case 'warning':\r\n        return <ExclamationTriangleIcon />;\r\n      case 'danger':\r\n        return <TimesIcon />;\r\n      case 'info':\r\n        return <InfoCircleIcon />;\r\n      default:\r\n        return <AngleRightIcon />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={alertClasses} role=\"alert\">\r\n      {showIcon && <div className=\"snake-alert__icon\">{getDefaultIcon()}</div>}\r\n\r\n      <div className=\"snake-alert__content\">\r\n        {title && <div className=\"snake-alert__title\">{title}</div>}\r\n        {(description || children) && (\r\n          <div className=\"snake-alert__description\">{description || children}</div>\r\n        )}\r\n        {actions && <div className=\"snake-alert__actions\">{actions}</div>}\r\n      </div>\r\n\r\n      {closable && (\r\n        <button className=\"snake-alert__close\" onClick={onClose} aria-label=\"Close alert\">\r\n          <TimesIcon />\r\n        </button>\r\n      )}\r\n\r\n      <div className=\"snake-alert__corner snake-alert__corner--top-left\" />\r\n      <div className=\"snake-alert__corner snake-alert__corner--top-right\" />\r\n      <div className=\"snake-alert__corner snake-alert__corner--bottom-left\" />\r\n      <div className=\"snake-alert__corner snake-alert__corner--bottom-right\" />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport './badge.css';\r\n\r\nexport interface BadgeProps {\r\n  /** Badge content */\r\n  children: React.ReactNode;\r\n  /** Visual variant */\r\n  variant?: 'default' | 'success' | 'warning' | 'danger' | 'info' | 'ghost';\r\n  /** Size variant */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** Style variant */\r\n  style?: 'solid' | 'outline' | 'dot';\r\n  /** Icon to display */\r\n  icon?: React.ReactNode;\r\n  /** Clickable badge */\r\n  onClick?: () => void;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n}\r\n\r\n/** Badge component for status indicators and labels */\r\nexport const Badge: React.FC<BadgeProps> = ({\r\n  children,\r\n  variant = 'default',\r\n  size = 'medium',\r\n  style = 'solid',\r\n  icon,\r\n  onClick,\r\n  className = '',\r\n}) => {\r\n  const Component = onClick ? 'button' : 'span';\r\n\r\n  const badgeClasses = [\r\n    'snake-badge',\r\n    `snake-badge--${variant}`,\r\n    `snake-badge--${size}`,\r\n    `snake-badge--${style}`,\r\n    onClick && 'snake-badge--clickable',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  return (\r\n    <Component className={badgeClasses} onClick={onClick} type={onClick ? 'button' : undefined}>\r\n      {style === 'dot' && <span className=\"snake-badge__dot\" />}\r\n      {icon && <span className=\"snake-badge__icon\">{icon}</span>}\r\n      <span className=\"snake-badge__text\">{children}</span>\r\n    </Component>\r\n  );\r\n};\r\n","import React, { useMemo, useState } from 'react';\r\nimport './bargraph.css';\r\n\r\ninterface DataPoint {\r\n  label: string;\r\n  value: number;\r\n  color?: string;\r\n  subLabel?: string;\r\n}\r\n\r\nexport interface BarGraphProps {\r\n  /** Array of data points */\r\n  data: DataPoint[];\r\n  /** Maximum value for the scale (auto-calculated if not provided) */\r\n  maxValue?: number;\r\n  /** Height of the graph (defaults to 100% to fill parent) */\r\n  height?: number | string;\r\n  /** Width of the graph (defaults to 100% to fill parent) */\r\n  width?: number | string;\r\n  /** Width of each bar */\r\n  barWidth?: number;\r\n  /** Gap between bars */\r\n  gap?: number;\r\n  /** Show values on top of bars */\r\n  showValues?: boolean;\r\n  /** Show grid lines */\r\n  showGrid?: boolean;\r\n  /** Number of grid lines */\r\n  gridLines?: number;\r\n  /** Show x-axis labels */\r\n  showLabels?: boolean;\r\n  /** Show y-axis scale */\r\n  showScale?: boolean;\r\n  /** Orientation of the graph */\r\n  orientation?: 'vertical' | 'horizontal';\r\n  /** Animation on mount */\r\n  animate?: boolean;\r\n  /** Bar color (can be overridden per data point) */\r\n  barColor?: string;\r\n  /** Grid color */\r\n  gridColor?: string;\r\n  /** Size variant */\r\n  variant?: 'default' | 'minimal' | 'detailed' | 'interactive';\r\n  /** Value formatter function */\r\n  formatValue?: (value: number) => string;\r\n  /** Bar click handler for interactive variant */\r\n  onBarClick?: (dataPoint: DataPoint | null, index: number | null) => void;\r\n  /** Bar hover handler for interactive variant */\r\n  onBarHover?: (dataPoint: DataPoint | null, index: number | null) => void;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n}\r\n\r\n/** BarGraph component for data visualization */\r\nexport const BarGraph: React.FC<BarGraphProps> = ({\r\n  data,\r\n  maxValue,\r\n  height = '100%',\r\n  width = '100%',\r\n  barWidth = 40,\r\n  gap = 8,\r\n  showValues = true,\r\n  showGrid = true,\r\n  gridLines = 5,\r\n  showLabels = true,\r\n  showScale = true,\r\n  orientation = 'vertical',\r\n  animate = true,\r\n  barColor = '#3a3a3a',\r\n  gridColor = '#3a3a3a',\r\n  variant = 'default',\r\n  formatValue = (value) => value?.toString() || '0',\r\n  onBarClick,\r\n  onBarHover,\r\n  className = '',\r\n}) => {\r\n  // State for interactive variant\r\n  const [hoveredBar, setHoveredBar] = useState<number | null>(null);\r\n  const [selectedBar, setSelectedBar] = useState<number | null>(null);\r\n  const [tooltipPosition, setTooltipPosition] = useState<{ x: number; y: number } | null>(null);\r\n\r\n  const calculatedMaxValue = useMemo(() => {\r\n    if (maxValue) return maxValue;\r\n    const values = data.map((d) => d.value || 0);\r\n    return Math.max(...values, 0) * 1.1; // Add 10% padding\r\n  }, [data, maxValue]);\r\n\r\n  const scaleValues = useMemo(() => {\r\n    return Array.from({ length: gridLines + 1 }, (_, i) => {\r\n      return Math.round((calculatedMaxValue / gridLines) * i);\r\n    });\r\n  }, [calculatedMaxValue, gridLines]);\r\n\r\n  const graphWidth = useMemo(() => {\r\n    if (orientation === 'vertical') {\r\n      // Use 100% width to fill parent for vertical orientation\r\n      return '100%';\r\n    }\r\n    // For horizontal, use provided width\r\n    return width;\r\n  }, [orientation, width]);\r\n\r\n  const graphHeight = useMemo(() => {\r\n    if (orientation === 'vertical') {\r\n      return height;\r\n    }\r\n    // For horizontal orientation, calculate based on data\r\n    if (typeof height === 'number') {\r\n      return height;\r\n    }\r\n    return data.length * (barWidth + gap) + gap;\r\n  }, [orientation, height, data.length, barWidth, gap]);\r\n\r\n  const classes = [\r\n    'snake-bar-graph',\r\n    `snake-bar-graph--${orientation}`,\r\n    `snake-bar-graph--${variant}`,\r\n    animate && 'snake-bar-graph--animated',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const variantStyles = {\r\n    minimal: {\r\n      showGrid: false,\r\n      showScale: false,\r\n      showValues: false,\r\n    },\r\n    detailed: {\r\n      showGrid: true,\r\n      showScale: true,\r\n      showValues: true,\r\n      gridLines: 10,\r\n    },\r\n    interactive: {\r\n      showGrid: true,\r\n      showScale: true,\r\n      showValues: false,\r\n      animate: true,\r\n    },\r\n  };\r\n\r\n  const variantProps = variant !== 'default' ? variantStyles[variant] || {} : {};\r\n  const finalShowGrid = variantProps.showGrid ?? showGrid;\r\n  const finalShowScale = variantProps.showScale ?? showScale;\r\n  const finalShowValues = variantProps.showValues ?? showValues;\r\n  const finalGridLines = variantProps.gridLines ?? gridLines;\r\n  const finalBarColor = variantProps.barColor ?? barColor;\r\n  const finalGridColor = variantProps.gridColor ?? gridColor;\r\n\r\n  const renderVerticalBars = () => (\r\n    <>\r\n      {/* Grid lines */}\r\n      {finalShowGrid && (\r\n        <div className=\"snake-bar-graph__grid\">\r\n          {Array.from({ length: finalGridLines + 1 }, (_, i) => {\r\n            const position = (i / finalGridLines) * 100;\r\n            return (\r\n              <div\r\n                key={`grid-${i}`}\r\n                className=\"snake-bar-graph__grid-line\"\r\n                style={{\r\n                  bottom: `${position}%`,\r\n                  borderColor: finalGridColor,\r\n                }}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n\r\n      {/* Y-axis scale */}\r\n      {finalShowScale && (\r\n        <div className=\"snake-bar-graph__scale\">\r\n          {scaleValues.reverse().map((value, i) => (\r\n            <div\r\n              key={`scale-${i}`}\r\n              className=\"snake-bar-graph__scale-value\"\r\n              style={{\r\n                top: `${(i / finalGridLines) * 100}%`,\r\n              }}\r\n            >\r\n              {formatValue(value)}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n\r\n      {/* Bars */}\r\n      <div className=\"snake-bar-graph__bars\">\r\n        {data.map((point, index) => {\r\n          const barHeight = ((point.value || 0) / calculatedMaxValue) * 100;\r\n          return (\r\n            <div\r\n              key={`bar-${index}`}\r\n              className={`snake-bar-graph__bar-container ${\r\n                variant === 'interactive' && hoveredBar === index ? 'snake-bar-graph__bar-container--hovered' : ''\r\n              } ${\r\n                variant === 'interactive' && selectedBar === index ? 'snake-bar-graph__bar-container--selected' : ''\r\n              }`}\r\n              onMouseEnter={(e) => {\r\n                if (variant === 'interactive') {\r\n                  setHoveredBar(index);\r\n                  const rect = e.currentTarget.getBoundingClientRect();\r\n                  setTooltipPosition({\r\n                    x: rect.left + rect.width / 2,\r\n                    y: rect.top - 10\r\n                  });\r\n                  onBarHover?.(point, index);\r\n                }\r\n              }}\r\n              onMouseLeave={() => {\r\n                if (variant === 'interactive') {\r\n                  setHoveredBar(null);\r\n                  setTooltipPosition(null);\r\n                  onBarHover?.(null, null);\r\n                }\r\n              }}\r\n              onClick={() => {\r\n                if (variant === 'interactive') {\r\n                  setSelectedBar(selectedBar === index ? null : index);\r\n                  onBarClick?.(point, index);\r\n                }\r\n              }}\r\n              style={{\r\n                width: `${barWidth}px`,\r\n                marginLeft: index === 0 ? `${gap}px` : 0,\r\n                marginRight: `${gap}px`,\r\n              }}\r\n            >\r\n              <div\r\n                className={`snake-bar-graph__bar ${\r\n                  variant === 'interactive' && hoveredBar === index ? 'snake-bar-graph__bar--hovered' : ''\r\n                } ${\r\n                  variant === 'interactive' && selectedBar === index ? 'snake-bar-graph__bar--selected' : ''\r\n                }`}\r\n                style={{\r\n                  height: `${barHeight}%`,\r\n                  backgroundColor: point.color || finalBarColor,\r\n                  borderColor: point.color || finalBarColor,\r\n                  animationDelay: animate ? `${index * 50}ms` : '0',\r\n                }}\r\n              >\r\n                {finalShowValues && (\r\n                  <div className=\"snake-bar-graph__value\">{formatValue(point.value)}</div>\r\n                )}\r\n              </div>\r\n              {showLabels && (\r\n                <div className=\"snake-bar-graph__label\">\r\n                  <span className=\"snake-bar-graph__label-text\">{point.label}</span>\r\n                  {point.subLabel && (\r\n                    <span className=\"snake-bar-graph__sublabel\">{point.subLabel}</span>\r\n                  )}\r\n                </div>\r\n              )}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n\r\n  const renderHorizontalBars = () => (\r\n    <>\r\n      {/* Grid lines */}\r\n      {finalShowGrid && (\r\n        <div className=\"snake-bar-graph__grid\">\r\n          {Array.from({ length: finalGridLines + 1 }, (_, i) => {\r\n            const position = (i / finalGridLines) * 100;\r\n            return (\r\n              <div\r\n                key={`grid-${i}`}\r\n                className=\"snake-bar-graph__grid-line\"\r\n                style={{\r\n                  left: `${position}%`,\r\n                  borderColor: finalGridColor,\r\n                }}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n\r\n      {/* X-axis scale */}\r\n      {finalShowScale && (\r\n        <div className=\"snake-bar-graph__scale\">\r\n          {scaleValues.map((value, i) => (\r\n            <div\r\n              key={`scale-${i}`}\r\n              className=\"snake-bar-graph__scale-value\"\r\n              style={{\r\n                left: `${(i / finalGridLines) * 100}%`,\r\n              }}\r\n            >\r\n              {formatValue(value)}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n\r\n      {/* Bars */}\r\n      <div className=\"snake-bar-graph__bars\">\r\n        {data.map((point, index) => {\r\n          const barWidthPercent = ((point.value || 0) / calculatedMaxValue) * 100;\r\n          return (\r\n            <div\r\n              key={`bar-${index}`}\r\n              className={`snake-bar-graph__bar-container ${\r\n                variant === 'interactive' && hoveredBar === index ? 'snake-bar-graph__bar-container--hovered' : ''\r\n              } ${\r\n                variant === 'interactive' && selectedBar === index ? 'snake-bar-graph__bar-container--selected' : ''\r\n              }`}\r\n              onMouseEnter={(e) => {\r\n                if (variant === 'interactive') {\r\n                  setHoveredBar(index);\r\n                  const rect = e.currentTarget.getBoundingClientRect();\r\n                  setTooltipPosition({\r\n                    x: rect.left + rect.width / 2,\r\n                    y: rect.top - 10\r\n                  });\r\n                  onBarHover?.(point, index);\r\n                }\r\n              }}\r\n              onMouseLeave={() => {\r\n                if (variant === 'interactive') {\r\n                  setHoveredBar(null);\r\n                  setTooltipPosition(null);\r\n                  onBarHover?.(null, null);\r\n                }\r\n              }}\r\n              onClick={() => {\r\n                if (variant === 'interactive') {\r\n                  setSelectedBar(selectedBar === index ? null : index);\r\n                  onBarClick?.(point, index);\r\n                }\r\n              }}\r\n              style={{\r\n                height: `${barWidth}px`,\r\n                marginTop: index === 0 ? `${gap}px` : 0,\r\n                marginBottom: `${gap}px`,\r\n              }}\r\n            >\r\n              {showLabels && (\r\n                <div className=\"snake-bar-graph__label\">\r\n                  <span className=\"snake-bar-graph__label-text\">{point.label}</span>\r\n                  {point.subLabel && (\r\n                    <span className=\"snake-bar-graph__sublabel\">{point.subLabel}</span>\r\n                  )}\r\n                </div>\r\n              )}\r\n              <div\r\n                className={`snake-bar-graph__bar ${\r\n                  variant === 'interactive' && hoveredBar === index ? 'snake-bar-graph__bar--hovered' : ''\r\n                } ${\r\n                  variant === 'interactive' && selectedBar === index ? 'snake-bar-graph__bar--selected' : ''\r\n                }`}\r\n                style={{\r\n                  width: `${barWidthPercent}%`,\r\n                  backgroundColor: point.color || finalBarColor,\r\n                  borderColor: point.color || finalBarColor,\r\n                  animationDelay: animate ? `${index * 50}ms` : '0',\r\n                }}\r\n              >\r\n                {finalShowValues && (\r\n                  <div className=\"snake-bar-graph__value\">{formatValue(point.value)}</div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <div className={classes}>\r\n      <div className=\"snake-bar-graph__corner snake-bar-graph__corner--top-left\" />\r\n      <div className=\"snake-bar-graph__corner snake-bar-graph__corner--top-right\" />\r\n      \r\n      <div\r\n        className=\"snake-bar-graph__content\"\r\n        style={{\r\n          width: graphWidth,\r\n          height: typeof graphHeight === 'number' ? `${graphHeight}px` : graphHeight,\r\n          maxWidth: '100%',\r\n        }}\r\n      >\r\n        {orientation === 'vertical' ? renderVerticalBars() : renderHorizontalBars()}\r\n      </div>\r\n\r\n      <div className=\"snake-bar-graph__corner snake-bar-graph__corner--bottom-left\" />\r\n      <div className=\"snake-bar-graph__corner snake-bar-graph__corner--bottom-right\" />\r\n      \r\n      {/* Tooltip for interactive variant */}\r\n      {variant === 'interactive' && hoveredBar !== null && tooltipPosition && (\r\n        <div \r\n          className=\"snake-bar-graph__tooltip\"\r\n          style={{\r\n            position: 'fixed',\r\n            left: `${tooltipPosition.x}px`,\r\n            top: `${tooltipPosition.y}px`,\r\n            transform: 'translate(-50%, -100%)',\r\n          }}\r\n        >\r\n          <div className=\"snake-bar-graph__tooltip-content\">\r\n            <div className=\"snake-bar-graph__tooltip-label\">{data[hoveredBar].label}</div>\r\n            <div className=\"snake-bar-graph__tooltip-value\">{formatValue(data[hoveredBar].value)}</div>\r\n            {data[hoveredBar].subLabel && (\r\n              <div className=\"snake-bar-graph__tooltip-sublabel\">{data[hoveredBar].subLabel}</div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};","import React from 'react';\r\nimport './breadcrumb.css';\r\n\r\ninterface BreadcrumbItem {\r\n  label: string;\r\n  href?: string;\r\n  icon?: React.ReactNode;\r\n}\r\n\r\nexport interface BreadcrumbProps {\r\n  /** Breadcrumb items */\r\n  items: BreadcrumbItem[];\r\n  /** Separator character */\r\n  separator?: React.ReactNode;\r\n  /** Size variant */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** Maximum items to display (0 = no limit) */\r\n  maxItems?: number;\r\n  /** Custom item renderer */\r\n  renderItem?: (item: BreadcrumbItem, index: number, isLast: boolean) => React.ReactNode;\r\n  /** Click handler for items */\r\n  onItemClick?: (item: BreadcrumbItem, index: number) => void;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n}\r\n\r\n/** Breadcrumb component for navigation hierarchy */\r\nexport const Breadcrumb: React.FC<BreadcrumbProps> = ({\r\n  items,\r\n  separator = '/',\r\n  size = 'medium',\r\n  maxItems = 0,\r\n  renderItem,\r\n  onItemClick,\r\n  className = '',\r\n}) => {\r\n  const breadcrumbClasses = ['snake-breadcrumb', `snake-breadcrumb--${size}`, className]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const displayItems = React.useMemo(() => {\r\n    if (maxItems === 0 || items.length <= maxItems) {\r\n      return items;\r\n    }\r\n\r\n    const firstItem = items[0];\r\n    const lastItems = items.slice(-(maxItems - 2));\r\n\r\n    return [firstItem, { label: '...', href: undefined }, ...lastItems];\r\n  }, [items, maxItems]);\r\n\r\n  const handleClick = (item: BreadcrumbItem, index: number, e: React.MouseEvent) => {\r\n    if (!item.href) {\r\n      e.preventDefault();\r\n    }\r\n    onItemClick?.(item, index);\r\n  };\r\n\r\n  const defaultRenderItem = (item: BreadcrumbItem, index: number, isLast: boolean) => {\r\n    const itemClasses = [\r\n      'snake-breadcrumb__item',\r\n      isLast && 'snake-breadcrumb__item--current',\r\n      !item.href && 'snake-breadcrumb__item--disabled',\r\n    ]\r\n      .filter(Boolean)\r\n      .join(' ');\r\n\r\n    const content = (\r\n      <>\r\n        {item.icon && <span className=\"snake-breadcrumb__icon\">{item.icon}</span>}\r\n        <span className=\"snake-breadcrumb__text\">{item.label}</span>\r\n      </>\r\n    );\r\n\r\n    if (!isLast && item.href) {\r\n      return (\r\n        <a href={item.href} className={itemClasses} onClick={(e) => handleClick(item, index, e)}>\r\n          {content}\r\n        </a>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <span className={itemClasses} aria-current={isLast ? 'page' : undefined}>\r\n        {content}\r\n      </span>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <nav className={breadcrumbClasses} aria-label=\"Breadcrumb\">\r\n      <ol className=\"snake-breadcrumb__list\">\r\n        {displayItems.map((item, index) => {\r\n          const isLast = index === displayItems.length - 1;\r\n\r\n          return (\r\n            <li key={index} className=\"snake-breadcrumb__list-item\">\r\n              {renderItem\r\n                ? renderItem(item, index, isLast)\r\n                : defaultRenderItem(item, index, isLast)}\r\n              {!isLast && (\r\n                <span className=\"snake-breadcrumb__separator\" aria-hidden=\"true\">\r\n                  {separator}\r\n                </span>\r\n              )}\r\n            </li>\r\n          );\r\n        })}\r\n      </ol>\r\n    </nav>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport './button.css';\r\n\r\nexport interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\r\n  /** Visual style variant */\r\n  variant?: 'primary' | 'secondary' | 'ghost' | 'danger' | 'cyber' | 'clipped';\r\n  /** How large should the button be? */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** Is the button in a loading state? */\r\n  loading?: boolean;\r\n  /** Should the button fill its container? */\r\n  fullWidth?: boolean;\r\n  /** Button contents */\r\n  children: React.ReactNode;\r\n}\r\n\r\n/** Primary UI component for user interaction */\r\nexport const Button: React.FC<ButtonProps> = ({\r\n  variant = 'primary',\r\n  size = 'medium',\r\n  loading = false,\r\n  fullWidth = false,\r\n  disabled = false,\r\n  children,\r\n  className = '',\r\n  ...props\r\n}) => {\r\n  const classes = [\r\n    'snake-button',\r\n    `snake-button--${variant}`,\r\n    `snake-button--${size}`,\r\n    fullWidth && 'snake-button--full-width',\r\n    loading && 'snake-button--loading',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  return (\r\n    <button type=\"button\" className={classes} disabled={disabled || loading} {...props}>\r\n      {loading ? <span className=\"snake-button__loader\">Loading...</span> : children}\r\n    </button>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport './card.css';\r\n\r\nexport interface CardProps {\r\n  /** Card content */\r\n  children: React.ReactNode;\r\n  /** Optional header content */\r\n  header?: React.ReactNode;\r\n  /** Optional footer content */\r\n  footer?: React.ReactNode;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n  /** Size variant */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** Whether the card is interactive (hoverable) */\r\n  interactive?: boolean;\r\n  /** Click handler for interactive cards */\r\n  onClick?: () => void;\r\n  /** Card variant */\r\n  variant?: 'default' | 'grid' | 'transparent';\r\n  /** Enable transition animation */\r\n  transitionIn?: boolean;\r\n  /** Type of transition animation */\r\n  transitionType?: 'expand' | 'fade' | 'slide-up' | 'slide-down' | 'slide-left' | 'slide-right';\r\n  /** Transition speed in milliseconds */\r\n  transitionSpeed?: number;\r\n  /** Delay before transition starts in milliseconds */\r\n  transitionDelay?: number;\r\n  /** Callback when transition completes */\r\n  onTransitionComplete?: () => void;\r\n}\r\n\r\n/** Card component with decorative corner elbows */\r\nexport const Card: React.FC<CardProps> = ({\r\n  children,\r\n  header,\r\n  footer,\r\n  className = '',\r\n  size = 'medium',\r\n  interactive = false,\r\n  onClick,\r\n  variant = 'default',\r\n  transitionIn = false,\r\n  transitionType = 'expand',\r\n  transitionSpeed = 300,\r\n  transitionDelay = 0,\r\n  onTransitionComplete,\r\n}) => {\r\n  const [isVisible, setIsVisible] = useState(!transitionIn);\r\n  const [isAnimating, setIsAnimating] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (transitionIn) {\r\n      const delayTimer = setTimeout(() => {\r\n        setIsVisible(true);\r\n        setIsAnimating(true);\r\n        \r\n        const completeTimer = setTimeout(() => {\r\n          setIsAnimating(false);\r\n          onTransitionComplete?.();\r\n        }, transitionSpeed);\r\n\r\n        return () => clearTimeout(completeTimer);\r\n      }, transitionDelay);\r\n\r\n      return () => clearTimeout(delayTimer);\r\n    }\r\n  }, [transitionIn, transitionDelay, transitionSpeed, onTransitionComplete]);\r\n\r\n  const classes = [\r\n    'snake-card-component',\r\n    `snake-card-component--${size}`,\r\n    `snake-card-component--${variant}`,\r\n    interactive && 'snake-card-component--interactive',\r\n    transitionIn && 'snake-card-component--transition',\r\n    transitionIn && `snake-card-component--transition-${transitionType}`,\r\n    isVisible && 'snake-card-component--visible',\r\n    isAnimating && 'snake-card-component--animating',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const Component = interactive ? 'button' : 'div';\r\n\r\n  const transitionStyle = transitionIn ? {\r\n    '--transition-speed': `${transitionSpeed}ms`,\r\n  } as React.CSSProperties : undefined;\r\n\r\n  return (\r\n    <Component\r\n      className={classes}\r\n      onClick={interactive ? onClick : undefined}\r\n      type={interactive ? 'button' : undefined}\r\n      style={transitionStyle}\r\n    >\r\n      {variant === 'grid' && <div className=\"snake-card-component__grid\" />}\r\n\r\n      <div className=\"snake-card-component__elbow snake-card-component__elbow--top-left\" />\r\n      <div className=\"snake-card-component__elbow snake-card-component__elbow--top-right\" />\r\n      <div className=\"snake-card-component__elbow snake-card-component__elbow--bottom-left\" />\r\n      <div className=\"snake-card-component__elbow snake-card-component__elbow--bottom-right\" />\r\n\r\n      {header && <div className=\"snake-card-component__header\">{header}</div>}\r\n\r\n      <div className=\"snake-card-component__content\">{children}</div>\r\n\r\n      {footer && <div className=\"snake-card-component__footer\">{footer}</div>}\r\n    </Component>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport './checkbox.css';\r\n\r\nexport interface CheckboxProps extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'type' | 'size'> {\r\n  /** Checkbox label */\r\n  label?: string;\r\n  /** Size variant */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** Color variant */\r\n  variant?: 'default' | 'success' | 'warning' | 'danger' | 'info';\r\n  /** Indeterminate state */\r\n  indeterminate?: boolean;\r\n  /** Helper text */\r\n  helperText?: string;\r\n  /** Error state */\r\n  error?: boolean;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n}\r\n\r\n/** Checkbox component for boolean selections */\r\nexport const Checkbox: React.FC<CheckboxProps> = ({\r\n  label,\r\n  size = 'medium',\r\n  variant = 'default',\r\n  indeterminate = false,\r\n  helperText,\r\n  error = false,\r\n  disabled = false,\r\n  className = '',\r\n  onChange,\r\n  ...props\r\n}) => {\r\n  const checkboxRef = React.useRef<HTMLInputElement>(null);\r\n\r\n  React.useEffect(() => {\r\n    if (checkboxRef.current) {\r\n      checkboxRef.current.indeterminate = indeterminate;\r\n    }\r\n  }, [indeterminate]);\r\n\r\n  const wrapperClasses = [\r\n    'snake-checkbox-wrapper',\r\n    `snake-checkbox-wrapper--${size}`,\r\n    disabled && 'snake-checkbox-wrapper--disabled',\r\n    error && 'snake-checkbox-wrapper--error',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const checkboxClasses = ['snake-checkbox', `snake-checkbox--${variant}`]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  return (\r\n    <div className={wrapperClasses}>\r\n      <label className=\"snake-checkbox__label\">\r\n        <input\r\n          ref={checkboxRef}\r\n          type=\"checkbox\"\r\n          className={checkboxClasses}\r\n          disabled={disabled}\r\n          onChange={onChange}\r\n          {...props}\r\n        />\r\n        <span className=\"snake-checkbox__box\">\r\n          <span className=\"snake-checkbox__check\" />\r\n          <span className=\"snake-checkbox__indeterminate\" />\r\n        </span>\r\n        {label && <span className=\"snake-checkbox__text\">{label}</span>}\r\n      </label>\r\n      {helperText && <div className=\"snake-checkbox__helper\">{helperText}</div>}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport './colorpicker.css';\r\n\r\n// Icon component for ChevronDown from pixel-icon-library\r\nconst ChevronDownIcon = ({ className = '' }: { className?: string }) => (\r\n  <svg className={className} viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\">\r\n    <polygon points=\"23 8 23 9 22 9 22 10 21 10 21 11 20 11 20 12 19 12 19 13 18 13 18 14 17 14 17 15 16 15 16 16 15 16 15 17 14 17 14 18 13 18 13 19 11 19 11 18 10 18 10 17 9 17 9 16 8 16 8 15 7 15 7 14 6 14 6 13 5 13 5 12 4 12 4 11 3 11 3 10 2 10 2 9 1 9 1 8 2 8 2 7 3 7 3 6 4 6 4 7 5 7 5 8 6 8 6 9 7 9 7 10 8 10 8 11 9 11 9 12 10 12 10 13 11 13 11 14 13 14 13 13 14 13 14 12 15 12 15 11 16 11 16 10 17 10 17 9 18 9 18 8 19 8 19 7 20 7 20 6 21 6 21 7 22 7 22 8 23 8\"/>\r\n  </svg>\r\n);\r\n\r\nexport interface ColorPickerProps {\r\n  /** Current color value */\r\n  value?: string;\r\n  /** Change handler */\r\n  onChange?: (color: string) => void;\r\n  /** Show alpha channel */\r\n  showAlpha?: boolean;\r\n  /** Preset colors */\r\n  presets?: string[];\r\n  /** Size variant */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** Show hex input */\r\n  showInput?: boolean;\r\n  /** Disabled state */\r\n  disabled?: boolean;\r\n  /** Inline mode (always open) */\r\n  inline?: boolean;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n}\r\n\r\n/** ColorPicker component for color selection */\r\nexport const ColorPicker: React.FC<ColorPickerProps> = ({\r\n  value = '#50fa7b',\r\n  onChange,\r\n  showAlpha = false,\r\n  presets = [\r\n    '#50fa7b',\r\n    '#ffb86c',\r\n    '#ff5555',\r\n    '#61dafb',\r\n    '#bd93f9',\r\n    '#ff79c6',\r\n    '#f1fa8c',\r\n    '#8be9fd',\r\n    '#bdbdbd',\r\n    '#8e8e90',\r\n    '#3a3a3a',\r\n    '#1f1d20',\r\n  ],\r\n  size = 'medium',\r\n  showInput = true,\r\n  disabled = false,\r\n  inline = false,\r\n  className = '',\r\n}) => {\r\n  const [isOpen, setIsOpen] = useState(inline);\r\n  const [currentColor, setCurrentColor] = useState(value);\r\n  const [hue, setHue] = useState(0);\r\n  const [saturation, setSaturation] = useState(100);\r\n  const [brightness, setBrightness] = useState(50);\r\n  const [alpha, setAlpha] = useState(100);\r\n  const pickerRef = useRef<HTMLDivElement>(null);\r\n  const saturationRef = useRef<HTMLDivElement>(null);\r\n\r\n  // Convert hex to HSB\r\n  useEffect(() => {\r\n    const hexToHsb = (hex: string) => {\r\n      const rgb = hexToRgb(hex);\r\n      if (!rgb) return;\r\n\r\n      const r = rgb.r / 255;\r\n      const g = rgb.g / 255;\r\n      const b = rgb.b / 255;\r\n\r\n      const max = Math.max(r, g, b);\r\n      const min = Math.min(r, g, b);\r\n      const delta = max - min;\r\n\r\n      let h = 0;\r\n      const s = max === 0 ? 0 : delta / max;\r\n      const v = max;\r\n\r\n      if (delta !== 0) {\r\n        if (max === r) {\r\n          h = ((g - b) / delta + (g < b ? 6 : 0)) / 6;\r\n        } else if (max === g) {\r\n          h = ((b - r) / delta + 2) / 6;\r\n        } else {\r\n          h = ((r - g) / delta + 4) / 6;\r\n        }\r\n      }\r\n\r\n      setHue(Math.round(h * 360));\r\n      setSaturation(Math.round(s * 100));\r\n      setBrightness(Math.round(v * 100));\r\n    };\r\n\r\n    hexToHsb(value);\r\n  }, [value]);\r\n\r\n  const hexToRgb = (hex: string) => {\r\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    return result\r\n      ? {\r\n        r: parseInt(result[1], 16),\r\n        g: parseInt(result[2], 16),\r\n        b: parseInt(result[3], 16),\r\n      }\r\n      : null;\r\n  };\r\n\r\n  const hsbToHex = (h: number, s: number, b: number) => {\r\n    const hNorm = h / 360;\r\n    const sNorm = s / 100;\r\n    const bNorm = b / 100;\r\n\r\n    const i = Math.floor(hNorm * 6);\r\n    const f = hNorm * 6 - i;\r\n    const p = bNorm * (1 - sNorm);\r\n    const q = bNorm * (1 - f * sNorm);\r\n    const t = bNorm * (1 - (1 - f) * sNorm);\r\n\r\n    let r = 0,\r\n      g = 0,\r\n      b_out = 0;\r\n\r\n    switch (i % 6) {\r\n      case 0:\r\n        r = bNorm;\r\n        g = t;\r\n        b_out = p;\r\n        break;\r\n      case 1:\r\n        r = q;\r\n        g = bNorm;\r\n        b_out = p;\r\n        break;\r\n      case 2:\r\n        r = p;\r\n        g = bNorm;\r\n        b_out = t;\r\n        break;\r\n      case 3:\r\n        r = p;\r\n        g = q;\r\n        b_out = bNorm;\r\n        break;\r\n      case 4:\r\n        r = t;\r\n        g = p;\r\n        b_out = bNorm;\r\n        break;\r\n      case 5:\r\n        r = bNorm;\r\n        g = p;\r\n        b_out = q;\r\n        break;\r\n    }\r\n\r\n    const toHex = (n: number) => {\r\n      const hex = Math.round(n * 255).toString(16);\r\n      return hex.length === 1 ? '0' + hex : hex;\r\n    };\r\n\r\n    return `#${toHex(r)}${toHex(g)}${toHex(b_out)}`;\r\n  };\r\n\r\n  const updateColor = (h: number, s: number, b: number, a: number) => {\r\n    const hex = hsbToHex(h, s, b);\r\n    setCurrentColor(hex);\r\n    onChange?.(hex);\r\n  };\r\n\r\n  const handleSaturationClick = (e: React.MouseEvent<HTMLDivElement>) => {\r\n    if (disabled || !saturationRef.current) return;\r\n\r\n    const rect = saturationRef.current.getBoundingClientRect();\r\n    const x = Math.max(0, Math.min(e.clientX - rect.left, rect.width));\r\n    const y = Math.max(0, Math.min(e.clientY - rect.top, rect.height));\r\n\r\n    const newSaturation = Math.round((x / rect.width) * 100);\r\n    const newBrightness = Math.round((1 - y / rect.height) * 100);\r\n\r\n    setSaturation(newSaturation);\r\n    setBrightness(newBrightness);\r\n    updateColor(hue, newSaturation, newBrightness, alpha);\r\n  };\r\n\r\n  const handleHueChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const newHue = parseInt(e.target.value);\r\n    setHue(newHue);\r\n    updateColor(newHue, saturation, brightness, alpha);\r\n  };\r\n\r\n  const handleAlphaChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const newAlpha = parseInt(e.target.value);\r\n    setAlpha(newAlpha);\r\n    updateColor(hue, saturation, brightness, newAlpha);\r\n  };\r\n\r\n  const handleHexInput = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const hex = e.target.value;\r\n    if (/^#[0-9A-F]{6}$/i.test(hex)) {\r\n      setCurrentColor(hex);\r\n      onChange?.(hex);\r\n    }\r\n  };\r\n\r\n  const handlePresetClick = (color: string) => {\r\n    if (disabled) return;\r\n    setCurrentColor(color);\r\n    onChange?.(color);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!inline) {\r\n      const handleClickOutside = (event: MouseEvent) => {\r\n        if (pickerRef.current && !pickerRef.current.contains(event.target as Node)) {\r\n          setIsOpen(false);\r\n        }\r\n      };\r\n\r\n      if (isOpen) {\r\n        document.addEventListener('mousedown', handleClickOutside);\r\n        return () => document.removeEventListener('mousedown', handleClickOutside);\r\n      }\r\n    }\r\n  }, [isOpen, inline]);\r\n\r\n  const pickerClasses = [\r\n    'snake-colorpicker',\r\n    `snake-colorpicker--${size}`,\r\n    disabled && 'snake-colorpicker--disabled',\r\n    inline && 'snake-colorpicker--inline',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const panelClasses = ['snake-colorpicker__panel', isOpen && 'snake-colorpicker__panel--open']\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  return (\r\n    <div ref={pickerRef} className={pickerClasses}>\r\n      {!inline && (\r\n        <button\r\n          className=\"snake-colorpicker__trigger\"\r\n          onClick={() => !disabled && setIsOpen(!isOpen)}\r\n          disabled={disabled}\r\n        >\r\n          <div\r\n            className=\"snake-colorpicker__trigger-color\"\r\n            style={{ backgroundColor: currentColor }}\r\n          />\r\n          <span className=\"snake-colorpicker__trigger-value\">{currentColor}</span>\r\n          <ChevronDownIcon className=\"snake-colorpicker__trigger-arrow\" />\r\n        </button>\r\n      )}\r\n\r\n      {(isOpen || inline) && (\r\n        <div className={panelClasses}>\r\n          <div\r\n            ref={saturationRef}\r\n            className=\"snake-colorpicker__saturation\"\r\n            style={{ backgroundColor: hsbToHex(hue, 100, 100) }}\r\n            onClick={handleSaturationClick}\r\n          >\r\n            <div className=\"snake-colorpicker__saturation-white\" />\r\n            <div className=\"snake-colorpicker__saturation-black\" />\r\n            <div\r\n              className=\"snake-colorpicker__saturation-pointer\"\r\n              style={{\r\n                left: `${saturation}%`,\r\n                top: `${100 - brightness}%`,\r\n              }}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"snake-colorpicker__controls\">\r\n            <div className=\"snake-colorpicker__slider\">\r\n              <label>Hue</label>\r\n              <input\r\n                type=\"range\"\r\n                min=\"0\"\r\n                max=\"360\"\r\n                value={hue}\r\n                onChange={handleHueChange}\r\n                className=\"snake-colorpicker__hue-slider\"\r\n                disabled={disabled}\r\n              />\r\n            </div>\r\n\r\n            {showAlpha && (\r\n              <div className=\"snake-colorpicker__slider\">\r\n                <label>Alpha</label>\r\n                <input\r\n                  type=\"range\"\r\n                  min=\"0\"\r\n                  max=\"100\"\r\n                  value={alpha}\r\n                  onChange={handleAlphaChange}\r\n                  className=\"snake-colorpicker__alpha-slider\"\r\n                  disabled={disabled}\r\n                />\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {showInput && (\r\n            <div className=\"snake-colorpicker__input-wrapper\">\r\n              <input\r\n                type=\"text\"\r\n                value={currentColor}\r\n                onChange={handleHexInput}\r\n                className=\"snake-colorpicker__hex-input\"\r\n                placeholder=\"#000000\"\r\n                disabled={disabled}\r\n              />\r\n            </div>\r\n          )}\r\n\r\n          {presets.length > 0 && (\r\n            <div className=\"snake-colorpicker__presets\">\r\n              {presets.map((color, index) => (\r\n                <button\r\n                  key={index}\r\n                  className=\"snake-colorpicker__preset\"\r\n                  style={{ backgroundColor: color }}\r\n                  onClick={() => handlePresetClick(color)}\r\n                  disabled={disabled}\r\n                  title={color}\r\n                />\r\n              ))}\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"snake-colorpicker__corner snake-colorpicker__corner--top-left\" />\r\n          <div className=\"snake-colorpicker__corner snake-colorpicker__corner--top-right\" />\r\n          <div className=\"snake-colorpicker__corner snake-colorpicker__corner--bottom-left\" />\r\n          <div className=\"snake-colorpicker__corner snake-colorpicker__corner--bottom-right\" />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport './divider.css';\r\n\r\nexport interface DividerProps {\r\n  /** Orientation of the divider */\r\n  orientation?: 'horizontal' | 'vertical';\r\n  /** Style variant */\r\n  variant?: 'solid' | 'dashed' | 'dotted' | 'double' | 'accent';\r\n  /** Thickness of the divider */\r\n  thickness?: 'thin' | 'medium' | 'thick';\r\n  /** Color variant */\r\n  color?: 'default' | 'muted' | 'primary' | 'secondary';\r\n  /** Text or element to display in the center */\r\n  children?: React.ReactNode;\r\n  /** Spacing around the divider */\r\n  spacing?: 'small' | 'medium' | 'large';\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n  /** Additional styles */\r\n  style?: React.CSSProperties;\r\n}\r\n\r\n/** Divider component for visual separation */\r\nexport const Divider: React.FC<DividerProps> = ({\r\n  orientation = 'horizontal',\r\n  variant = 'solid',\r\n  thickness = 'thin',\r\n  color = 'default',\r\n  children,\r\n  spacing = 'medium',\r\n  className = '',\r\n  style,\r\n}) => {\r\n  const dividerClasses = [\r\n    'snake-divider',\r\n    `snake-divider--${orientation}`,\r\n    `snake-divider--${variant}`,\r\n    `snake-divider--${thickness}`,\r\n    `snake-divider--${color}`,\r\n    `snake-divider--spacing-${spacing}`,\r\n    children && 'snake-divider--with-content',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  return (\r\n    <div className={dividerClasses} style={style} role=\"separator\" aria-orientation={orientation}>\r\n      {children && (\r\n        <>\r\n          <div className=\"snake-divider__line snake-divider__line--start\" />\r\n          <div className=\"snake-divider__content\">{children}</div>\r\n          <div className=\"snake-divider__line snake-divider__line--end\" />\r\n        </>\r\n      )}\r\n      {!children && <div className=\"snake-divider__line\" />}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useMemo, useState } from 'react';\r\nimport './donutgraph.css';\r\n\r\ninterface DataSegment {\r\n  label: string;\r\n  value: number;\r\n  color?: string;\r\n}\r\n\r\nexport interface DonutGraphProps {\r\n  /** Array of data segments */\r\n  data: DataSegment[];\r\n  /** Size of the graph (defaults to 100% to fill parent, maintains aspect ratio) */\r\n  size?: number | string;\r\n  /** Thickness of the donut ring */\r\n  thickness?: number;\r\n  /** Inner radius percentage (0-80) */\r\n  innerRadius?: number;\r\n  /** Colors for segments */\r\n  colors?: string[];\r\n  /** Show center value */\r\n  showCenterValue?: boolean;\r\n  /** Center value text */\r\n  centerValue?: string;\r\n  /** Center label text */\r\n  centerLabel?: string;\r\n  /** Show legend */\r\n  showLegend?: boolean;\r\n  /** Show values on segments */\r\n  showValues?: boolean;\r\n  /** Show labels on segments */\r\n  showLabels?: boolean;\r\n  /** Animation on mount */\r\n  animate?: boolean;\r\n  /** Animate legend */\r\n  animateLegend?: boolean;\r\n  /** Gap between segments in pixels (at middle radius) */\r\n  segmentGap?: number;\r\n  /** Size variant */\r\n  variant?: 'default' | 'minimal' | 'detailed' | 'interactive';\r\n  /** Format value function */\r\n  formatValue?: (value: number, total: number) => string;\r\n  /** Callback when a segment is clicked (for interactive variant) */\r\n  onSegmentClick?: (segment: DataSegment, index: number) => void;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n}\r\n\r\n/** DonutGraph component for circular data visualization */\r\nexport const DonutGraph: React.FC<DonutGraphProps> = ({\r\n  data,\r\n  size = '100%',\r\n  thickness = 60,\r\n  innerRadius = 40,\r\n  colors = ['#8b2c2c', '#4a4a4a', '#d4d4d4', '#6b3030', '#7a7a7a'],\r\n  showCenterValue = true,\r\n  centerValue,\r\n  centerLabel,\r\n  showLegend = true,\r\n  showValues = false,\r\n  showLabels = false,\r\n  animate = true,\r\n  animateLegend = true,\r\n  segmentGap = 6,\r\n  variant = 'default',\r\n  formatValue = (value, total) => `${Math.round((value / total) * 100)}%`,\r\n  onSegmentClick,\r\n  className = '',\r\n}) => {\r\n  // State for interactive variant\r\n  const [activeSegment, setActiveSegment] = useState<string | null>(null);\r\n  const [hoveredSegment, setHoveredSegment] = useState<string | null>(null);\r\n\r\n  // Calculate total and angles\r\n  const { segments, total } = useMemo(() => {\r\n    const sum = data.reduce((acc, d) => acc + d.value, 0);\r\n    const angleMultiplier = 360;\r\n    \r\n    let currentAngle = 0;\r\n    \r\n    const segs = data.map((segment, i) => {\r\n      const percentage = segment.value / sum;\r\n      const angle = percentage * angleMultiplier;\r\n      const startAngle = currentAngle;\r\n      const endAngle = currentAngle + angle;\r\n      currentAngle = endAngle;\r\n      \r\n      return {\r\n        ...segment,\r\n        percentage,\r\n        startAngle,\r\n        endAngle,\r\n        angle,\r\n        color: segment.color || colors[i % colors.length],\r\n      };\r\n    });\r\n    \r\n    return { segments: segs, total: sum };\r\n  }, [data, colors]);\r\n\r\n  // SVG dimensions - use a default viewBox size\r\n  const svgSize = 300; // Base size for calculations\r\n  const viewBox = `0 0 ${svgSize} ${svgSize}`;\r\n  \r\n  const center = { x: svgSize / 2, y: svgSize / 2 };\r\n  const outerR = svgSize / 2 - 10;\r\n  const innerR = (outerR * innerRadius) / 100;\r\n\r\n  // Generate path for each segment with uniform gaps\r\n  const generateSegmentPath = (segment: any) => {\r\n    if (segmentGap === 0 || finalSegmentGap === 0) {\r\n      // No gaps - use simple arc paths\r\n      const startAngleRad = (segment.startAngle * Math.PI) / 180;\r\n      const endAngleRad = (segment.endAngle * Math.PI) / 180;\r\n      \r\n      const x1 = center.x + outerR * Math.cos(startAngleRad);\r\n      const y1 = center.y + outerR * Math.sin(startAngleRad);\r\n      const x2 = center.x + outerR * Math.cos(endAngleRad);\r\n      const y2 = center.y + outerR * Math.sin(endAngleRad);\r\n      \r\n      const x3 = center.x + innerR * Math.cos(endAngleRad);\r\n      const y3 = center.y + innerR * Math.sin(endAngleRad);\r\n      const x4 = center.x + innerR * Math.cos(startAngleRad);\r\n      const y4 = center.y + innerR * Math.sin(startAngleRad);\r\n      \r\n      const largeArc = segment.angle > 180 ? 1 : 0;\r\n      \r\n      return `\r\n        M ${x1} ${y1}\r\n        A ${outerR} ${outerR} 0 ${largeArc} 1 ${x2} ${y2}\r\n        L ${x3} ${y3}\r\n        A ${innerR} ${innerR} 0 ${largeArc} 0 ${x4} ${y4}\r\n        Z\r\n      `;\r\n    }\r\n    \r\n    // With gaps - offset the endpoints perpendicular to create uniform gaps\r\n    const halfGap = (finalSegmentGap || segmentGap) / 2;\r\n    \r\n    // Calculate the angle offset needed for uniform gap at both radii\r\n    const outerGapAngle = (halfGap / outerR) * (180 / Math.PI);\r\n    const innerGapAngle = (halfGap / innerR) * (180 / Math.PI);\r\n    \r\n    // Adjust angles for uniform gaps\r\n    const startAngleOuterRad = ((segment.startAngle + outerGapAngle) * Math.PI) / 180;\r\n    const endAngleOuterRad = ((segment.endAngle - outerGapAngle) * Math.PI) / 180;\r\n    const startAngleInnerRad = ((segment.startAngle + innerGapAngle) * Math.PI) / 180;\r\n    const endAngleInnerRad = ((segment.endAngle - innerGapAngle) * Math.PI) / 180;\r\n    \r\n    // Outer arc points\r\n    const x1 = center.x + outerR * Math.cos(startAngleOuterRad);\r\n    const y1 = center.y + outerR * Math.sin(startAngleOuterRad);\r\n    const x2 = center.x + outerR * Math.cos(endAngleOuterRad);\r\n    const y2 = center.y + outerR * Math.sin(endAngleOuterRad);\r\n    \r\n    // Inner arc points\r\n    const x3 = center.x + innerR * Math.cos(endAngleInnerRad);\r\n    const y3 = center.y + innerR * Math.sin(endAngleInnerRad);\r\n    const x4 = center.x + innerR * Math.cos(startAngleInnerRad);\r\n    const y4 = center.y + innerR * Math.sin(startAngleInnerRad);\r\n    \r\n    const largeArc = (segment.angle - outerGapAngle * 2) > 180 ? 1 : 0;\r\n    \r\n    return `\r\n      M ${x1} ${y1}\r\n      A ${outerR} ${outerR} 0 ${largeArc} 1 ${x2} ${y2}\r\n      L ${x3} ${y3}\r\n      A ${innerR} ${innerR} 0 ${largeArc} 0 ${x4} ${y4}\r\n      Z\r\n    `;\r\n  };\r\n\r\n  // Calculate label position\r\n  const getLabelPosition = (segment: any) => {\r\n    const midAngle = (segment.startAngle + segment.endAngle) / 2;\r\n    const midAngleRad = (midAngle * Math.PI) / 180;\r\n    const labelR = (outerR + innerR) / 2;\r\n    \r\n    return {\r\n      x: center.x + labelR * Math.cos(midAngleRad),\r\n      y: center.y + labelR * Math.sin(midAngleRad),\r\n    };\r\n  };\r\n\r\n  const classes = [\r\n    'snake-donut-graph',\r\n    `snake-donut-graph--${variant}`,\r\n    animate && 'snake-donut-graph--animated',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const variantStyles = {\r\n    minimal: {\r\n      showLegend: false,\r\n      showCenterValue: false,\r\n      segmentGap: 0,\r\n    },\r\n    detailed: {\r\n      showLegend: true,\r\n      showCenterValue: true,\r\n      showValues: true,\r\n      segmentGap: 8,\r\n    },\r\n    interactive: {\r\n      showLegend: true,\r\n      showCenterValue: true,\r\n    },\r\n  };\r\n\r\n  const variantProps = variant !== 'default' ? variantStyles[variant] || {} : {};\r\n  const finalShowLegend = variantProps.showLegend ?? showLegend;\r\n  const finalShowCenterValue = variantProps.showCenterValue ?? showCenterValue;\r\n  const finalShowValues = variantProps.showValues ?? showValues;\r\n  const finalSegmentGap = variantProps.segmentGap ?? segmentGap;\r\n\r\n  const isInteractive = variant === 'interactive';\r\n\r\n  // Calculate center value\r\n  const centerText = centerValue || `${Math.round(total)}`;\r\n\r\n  return (\r\n    <div className={classes}>\r\n      <div className=\"snake-donut-graph__corner snake-donut-graph__corner--top-left\" />\r\n      <div className=\"snake-donut-graph__corner snake-donut-graph__corner--top-right\" />\r\n      \r\n      <div className=\"snake-donut-graph__container\">\r\n        <svg\r\n          width={typeof size === 'number' ? size : '100%'}\r\n          height={typeof size === 'number' ? size : '100%'}\r\n          viewBox={viewBox}\r\n          className=\"snake-donut-graph__svg\"\r\n          preserveAspectRatio=\"xMidYMid meet\"\r\n        >\r\n          {/* Segments */}\r\n          <g className=\"snake-donut-graph__segments\">\r\n            {segments.map((segment, i) => {\r\n              const isActive = activeSegment === segment.label;\r\n              const isHovered = hoveredSegment === segment.label;\r\n              const isDimmed = isInteractive && activeSegment && !isActive;\r\n              \r\n              return (\r\n                <path\r\n                  key={`segment-${i}`}\r\n                  d={generateSegmentPath(segment)}\r\n                  fill={segment.color}\r\n                  fillOpacity={\r\n                    isDimmed ? 0.2 : \r\n                    isActive ? 1 : \r\n                    isHovered ? 0.9 : \r\n                    0.8\r\n                  }\r\n                  stroke={segment.color}\r\n                  strokeWidth={isActive || isHovered ? 2 : 1}\r\n                  strokeOpacity={\r\n                    isDimmed ? 0.3 : \r\n                    isActive ? 1 : \r\n                    isHovered ? 1 : \r\n                    0.9\r\n                  }\r\n                  className={`snake-donut-graph__segment ${isActive ? 'snake-donut-graph__segment--active' : ''}`}\r\n                  style={{\r\n                    cursor: isInteractive ? 'pointer' : 'default',\r\n                    transition: 'all 0.3s ease',\r\n                    transformOrigin: `${center.x}px ${center.y}px`,\r\n                    transform: isActive ? 'scale(1.05)' : 'scale(1)',\r\n                  }}\r\n                  onClick={() => {\r\n                    if (isInteractive) {\r\n                      const newActive = isActive ? null : segment.label;\r\n                      setActiveSegment(newActive);\r\n                      onSegmentClick?.(segment, i);\r\n                    }\r\n                  }}\r\n                  onMouseEnter={() => isInteractive && setHoveredSegment(segment.label)}\r\n                  onMouseLeave={() => isInteractive && setHoveredSegment(null)}\r\n                >\r\n                  {animate && (\r\n                    <animateTransform\r\n                      attributeName=\"transform\"\r\n                      type=\"rotate\"\r\n                      from={`0 ${center.x} ${center.y}`}\r\n                      to={`360 ${center.x} ${center.y}`}\r\n                      dur=\"1s\"\r\n                      repeatCount=\"1\"\r\n                    />\r\n                  )}\r\n                </path>\r\n              );\r\n            })}\r\n          </g>\r\n\r\n          {/* Labels on segments */}\r\n          {(showLabels || finalShowValues) && (\r\n            <g className=\"snake-donut-graph__labels\">\r\n              {segments.map((segment, i) => {\r\n                const pos = getLabelPosition(segment);\r\n                return (\r\n                  <text\r\n                    key={`label-${i}`}\r\n                    x={pos.x}\r\n                    y={pos.y}\r\n                    textAnchor=\"middle\"\r\n                    dominantBaseline=\"middle\"\r\n                    fill=\"#bdbdbd\"\r\n                    fontSize=\"11\"\r\n                    fontFamily=\"var(--font-family-mono)\"\r\n                    className=\"snake-donut-graph__label\"\r\n                    style={{\r\n                      pointerEvents: 'none',\r\n                    }}\r\n                  >\r\n                    {showLabels && !finalShowValues && segment.label}\r\n                    {finalShowValues && !showLabels && formatValue(segment.value, total)}\r\n                    {showLabels && finalShowValues && (\r\n                      <>\r\n                        <tspan x={pos.x} dy=\"-0.3em\">{segment.label}</tspan>\r\n                        <tspan x={pos.x} dy=\"1em\">{formatValue(segment.value, total)}</tspan>\r\n                      </>\r\n                    )}\r\n                  </text>\r\n                );\r\n              })}\r\n            </g>\r\n          )}\r\n\r\n          {/* Center value */}\r\n          {finalShowCenterValue && (\r\n            <g className=\"snake-donut-graph__center\">\r\n              <text\r\n                x={center.x}\r\n                y={center.y - (centerLabel ? 8 : 0)}\r\n                textAnchor=\"middle\"\r\n                dominantBaseline=\"middle\"\r\n                fill=\"#bdbdbd\"\r\n                fontSize=\"24\"\r\n                fontWeight=\"bold\"\r\n                fontFamily=\"var(--font-family-mono)\"\r\n                className=\"snake-donut-graph__center-value\"\r\n              >\r\n                {centerText}\r\n              </text>\r\n              {centerLabel && (\r\n                <text\r\n                  x={center.x}\r\n                  y={center.y + 12}\r\n                  textAnchor=\"middle\"\r\n                  dominantBaseline=\"middle\"\r\n                  fill=\"#8a8a8a\"\r\n                  fontSize=\"12\"\r\n                  fontFamily=\"var(--font-family)\"\r\n                  className=\"snake-donut-graph__center-label\"\r\n                >\r\n                  {centerLabel}\r\n                </text>\r\n              )}\r\n            </g>\r\n          )}\r\n\r\n          {/* Border rings */}\r\n          <g className=\"snake-donut-graph__borders\">\r\n            <circle\r\n              cx={center.x}\r\n              cy={center.y}\r\n              r={outerR}\r\n              fill=\"none\"\r\n              stroke=\"#3a3a3a\"\r\n              strokeWidth=\"1\"\r\n              opacity=\"0.5\"\r\n            />\r\n            <circle\r\n              cx={center.x}\r\n              cy={center.y}\r\n              r={innerR}\r\n              fill=\"none\"\r\n              stroke=\"#3a3a3a\"\r\n              strokeWidth=\"1\"\r\n              opacity=\"0.5\"\r\n            />\r\n          </g>\r\n        </svg>\r\n\r\n        {/* Legend */}\r\n        {finalShowLegend && (\r\n          <div className={`snake-donut-graph__legend ${animateLegend ? 'snake-donut-graph__legend--animated' : ''}`}>\r\n            {segments.map((segment, i) => {\r\n              const isActive = activeSegment === segment.label;\r\n              const isDimmed = isInteractive && activeSegment && !isActive;\r\n              \r\n              return (\r\n                <div\r\n                  key={`legend-${i}`}\r\n                  className={`snake-donut-graph__legend-item ${isActive ? 'snake-donut-graph__legend-item--active' : ''}`}\r\n                  style={{\r\n                    opacity: isDimmed ? 0.3 : 1,\r\n                    cursor: isInteractive ? 'pointer' : 'default',\r\n                  }}\r\n                  onClick={() => {\r\n                    if (isInteractive) {\r\n                      const newActive = isActive ? null : segment.label;\r\n                      setActiveSegment(newActive);\r\n                      onSegmentClick?.(segment, i);\r\n                    }\r\n                  }}\r\n                  onMouseEnter={() => isInteractive && setHoveredSegment(segment.label)}\r\n                  onMouseLeave={() => isInteractive && setHoveredSegment(null)}\r\n                >\r\n                  <span\r\n                    className=\"snake-donut-graph__legend-color\"\r\n                    style={{\r\n                      backgroundColor: segment.color,\r\n                      borderWidth: isActive ? '2px' : '1px',\r\n                      borderColor: isActive ? '#bdbdbd' : '#3a3a3a',\r\n                    }}\r\n                  />\r\n                  <span className=\"snake-donut-graph__legend-label\">\r\n                    {segment.label}\r\n                  </span>\r\n                  <span className=\"snake-donut-graph__legend-value\">\r\n                    {formatValue(segment.value, total)}\r\n                  </span>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"snake-donut-graph__corner snake-donut-graph__corner--bottom-left\" />\r\n      <div className=\"snake-donut-graph__corner snake-donut-graph__corner--bottom-right\" />\r\n    </div>\r\n  );\r\n};","import React, { useEffect, useRef } from 'react';\r\nimport './drawer.css';\r\n\r\nexport interface DrawerProps {\r\n  /** Whether the drawer is open */\r\n  open: boolean;\r\n  /** Callback when the drawer should close */\r\n  onClose: () => void;\r\n  /** Position of the drawer */\r\n  position?: 'left' | 'right' | 'top' | 'bottom';\r\n  /** Size of the drawer */\r\n  size?: 'small' | 'medium' | 'large' | 'full';\r\n  /** Content of the drawer */\r\n  children: React.ReactNode;\r\n  /** Whether to show overlay */\r\n  overlay?: boolean;\r\n  /** Whether clicking overlay closes drawer */\r\n  closeOnOverlayClick?: boolean;\r\n  /** Header content */\r\n  header?: React.ReactNode;\r\n  /** Footer content */\r\n  footer?: React.ReactNode;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n  /** Whether to lock body scroll when open */\r\n  lockScroll?: boolean;\r\n}\r\n\r\n/** Drawer component for slide-in panels */\r\nexport const Drawer: React.FC<DrawerProps> = ({\r\n  open,\r\n  onClose,\r\n  position = 'right',\r\n  size = 'medium',\r\n  children,\r\n  overlay = true,\r\n  closeOnOverlayClick = true,\r\n  header,\r\n  footer,\r\n  className = '',\r\n  lockScroll = true,\r\n}) => {\r\n  const drawerRef = useRef<HTMLDivElement>(null);\r\n\r\n  // Handle escape key\r\n  useEffect(() => {\r\n    const handleEscape = (e: KeyboardEvent) => {\r\n      if (e.key === 'Escape' && open) {\r\n        onClose();\r\n      }\r\n    };\r\n\r\n    if (open) {\r\n      document.addEventListener('keydown', handleEscape);\r\n    }\r\n\r\n    return () => {\r\n      document.removeEventListener('keydown', handleEscape);\r\n    };\r\n  }, [open, onClose]);\r\n\r\n  // Lock body scroll\r\n  useEffect(() => {\r\n    if (lockScroll && open) {\r\n      document.body.style.overflow = 'hidden';\r\n      return () => {\r\n        document.body.style.overflow = '';\r\n      };\r\n    }\r\n  }, [lockScroll, open]);\r\n\r\n  // Focus trap\r\n  useEffect(() => {\r\n    if (open && drawerRef.current) {\r\n      const focusableElements = drawerRef.current.querySelectorAll(\r\n        'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\r\n      );\r\n      const firstElement = focusableElements[0] as HTMLElement;\r\n      const lastElement = focusableElements[focusableElements.length - 1] as HTMLElement;\r\n\r\n      const handleTab = (e: KeyboardEvent) => {\r\n        if (e.key === 'Tab') {\r\n          if (e.shiftKey) {\r\n            if (document.activeElement === firstElement) {\r\n              e.preventDefault();\r\n              lastElement?.focus();\r\n            }\r\n          } else {\r\n            if (document.activeElement === lastElement) {\r\n              e.preventDefault();\r\n              firstElement?.focus();\r\n            }\r\n          }\r\n        }\r\n      };\r\n\r\n      document.addEventListener('keydown', handleTab);\r\n      firstElement?.focus();\r\n\r\n      return () => {\r\n        document.removeEventListener('keydown', handleTab);\r\n      };\r\n    }\r\n  }, [open]);\r\n\r\n  const drawerClasses = [\r\n    'snake-drawer',\r\n    `snake-drawer--${position}`,\r\n    `snake-drawer--${size}`,\r\n    open && 'snake-drawer--open',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  return (\r\n    <>\r\n      {overlay && (\r\n        <div\r\n          className={`snake-drawer__overlay ${open ? 'snake-drawer__overlay--visible' : ''}`}\r\n          onClick={closeOnOverlayClick ? onClose : undefined}\r\n          aria-hidden=\"true\"\r\n        />\r\n      )}\r\n      <div\r\n        ref={drawerRef}\r\n        className={drawerClasses}\r\n        role=\"dialog\"\r\n        aria-modal=\"true\"\r\n        aria-hidden={!open}\r\n      >\r\n        <button\r\n          className=\"snake-drawer__close\"\r\n          onClick={onClose}\r\n          aria-label=\"Close drawer\"\r\n        >\r\n          ×\r\n        </button>\r\n\r\n        {header && <div className=\"snake-drawer__header\">{header}</div>}\r\n\r\n        <div className=\"snake-drawer__content\">{children}</div>\r\n\r\n        {footer && <div className=\"snake-drawer__footer\">{footer}</div>}\r\n      </div>\r\n    </>\r\n  );\r\n};","import React from 'react';\r\nimport './filter.css';\r\n\r\nexport interface FilterProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\r\n  /** Filter label */\r\n  children: React.ReactNode;\r\n  /** Visual state variant */\r\n  variant?: 'default' | 'success' | 'warning' | 'danger' | 'info';\r\n  /** Whether the filter is currently active */\r\n  active?: boolean;\r\n  /** Size of the filter */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** Optional icon to display before the label */\r\n  icon?: React.ReactNode;\r\n  /** Optional count/badge to display */\r\n  count?: number | string;\r\n}\r\n\r\n/** Filter component with bracket styling */\r\nexport const Filter: React.FC<FilterProps> = ({\r\n  children,\r\n  variant = 'default',\r\n  active = false,\r\n  size = 'medium',\r\n  disabled = false,\r\n  icon,\r\n  count,\r\n  className = '',\r\n  ...props\r\n}) => {\r\n  const classes = [\r\n    'snake-filter',\r\n    `snake-filter--${variant}`,\r\n    `snake-filter--${size}`,\r\n    active && 'snake-filter--active',\r\n    disabled && 'snake-filter--disabled',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  return (\r\n    <button type=\"button\" className={classes} disabled={disabled} aria-pressed={active} {...props}>\r\n      <span className=\"snake-filter__bracket snake-filter__bracket--left\" />\r\n\r\n      <span className=\"snake-filter__content\">\r\n        {icon && <span className=\"snake-filter__icon\">{icon}</span>}\r\n        <span className=\"snake-filter__label\">{children}</span>\r\n        {count !== undefined && <span className=\"snake-filter__count\">{count}</span>}\r\n      </span>\r\n\r\n      <span className=\"snake-filter__bracket snake-filter__bracket--right\" />\r\n    </button>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport './grid.css';\r\n\r\nexport interface GridProps extends React.HTMLAttributes<HTMLDivElement> {\r\n  /** Number of columns in the grid */\r\n  columns?: number | string;\r\n  /** Number of rows in the grid */\r\n  rows?: number | string;\r\n  /** Gap between grid items */\r\n  gap?: 'none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl';\r\n  /** Column gap (overrides gap for columns) */\r\n  columnGap?: 'none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl';\r\n  /** Row gap (overrides gap for rows) */\r\n  rowGap?: 'none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl';\r\n  /** Align items within grid cells */\r\n  alignItems?: 'start' | 'center' | 'end' | 'stretch';\r\n  /** Justify items within grid cells */\r\n  justifyItems?: 'start' | 'center' | 'end' | 'stretch';\r\n  /** Align content within the grid container */\r\n  alignContent?:\r\n    | 'start'\r\n    | 'center'\r\n    | 'end'\r\n    | 'stretch'\r\n    | 'space-between'\r\n    | 'space-around'\r\n    | 'space-evenly';\r\n  /** Justify content within the grid container */\r\n  justifyContent?:\r\n    | 'start'\r\n    | 'center'\r\n    | 'end'\r\n    | 'stretch'\r\n    | 'space-between'\r\n    | 'space-around'\r\n    | 'space-evenly';\r\n  /** Auto flow direction */\r\n  autoFlow?: 'row' | 'column' | 'row dense' | 'column dense';\r\n  /** Template areas for named grid areas */\r\n  areas?: string[];\r\n  /** Minimum column width for auto-fit/auto-fill */\r\n  minColumnWidth?: string;\r\n  /** Make grid full width */\r\n  fullWidth?: boolean;\r\n  /** Make grid full height */\r\n  fullHeight?: boolean;\r\n  children: React.ReactNode;\r\n}\r\n\r\ninterface GridItemProps extends React.HTMLAttributes<HTMLDivElement> {\r\n  /** Column span */\r\n  colSpan?: number | 'full';\r\n  /** Row span */\r\n  rowSpan?: number;\r\n  /** Column start position */\r\n  colStart?: number | 'auto';\r\n  /** Column end position */\r\n  colEnd?: number | 'auto';\r\n  /** Row start position */\r\n  rowStart?: number | 'auto';\r\n  /** Row end position */\r\n  rowEnd?: number | 'auto';\r\n  /** Grid area name */\r\n  area?: string;\r\n  /** Align self within grid cell */\r\n  alignSelf?: 'start' | 'center' | 'end' | 'stretch';\r\n  /** Justify self within grid cell */\r\n  justifySelf?: 'start' | 'center' | 'end' | 'stretch';\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport const Grid: React.FC<GridProps> = ({\r\n  columns = 12,\r\n  rows,\r\n  gap = 'md',\r\n  columnGap,\r\n  rowGap,\r\n  alignItems = 'stretch',\r\n  justifyItems = 'stretch',\r\n  alignContent = 'start',\r\n  justifyContent = 'start',\r\n  autoFlow = 'row',\r\n  areas,\r\n  minColumnWidth,\r\n  fullWidth = false,\r\n  fullHeight = false,\r\n  className = '',\r\n  style,\r\n  children,\r\n  ...props\r\n}) => {\r\n  const classes = [\r\n    'snake-grid',\r\n    gap !== 'none' && !columnGap && !rowGap && `snake-grid--gap-${gap}`,\r\n    columnGap && `snake-grid--column-gap-${columnGap}`,\r\n    rowGap && `snake-grid--row-gap-${rowGap}`,\r\n    `snake-grid--align-items-${alignItems}`,\r\n    `snake-grid--justify-items-${justifyItems}`,\r\n    `snake-grid--align-content-${alignContent}`,\r\n    `snake-grid--justify-content-${justifyContent}`,\r\n    autoFlow !== 'row' && `snake-grid--auto-flow-${autoFlow.replace(' ', '-')}`,\r\n    fullWidth && 'snake-grid--full-width',\r\n    fullHeight && 'snake-grid--full-height',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const gridStyle: React.CSSProperties = {\r\n    ...style,\r\n    '--grid-columns': minColumnWidth\r\n      ? `repeat(auto-fit, minmax(${minColumnWidth}, 1fr))`\r\n      : typeof columns === 'string'\r\n        ? columns\r\n        : `repeat(${columns}, 1fr)`,\r\n    '--grid-rows': typeof rows === 'string' ? rows : rows ? `repeat(${rows}, 1fr)` : undefined,\r\n    '--grid-areas': areas ? `\"${areas.join('\" \"')}\"` : undefined,\r\n  } as React.CSSProperties;\r\n\r\n  return (\r\n    <div className={classes} style={gridStyle} {...props}>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const GridItem: React.FC<GridItemProps> = ({\r\n  colSpan,\r\n  rowSpan,\r\n  colStart,\r\n  colEnd,\r\n  rowStart,\r\n  rowEnd,\r\n  area,\r\n  alignSelf,\r\n  justifySelf,\r\n  className = '',\r\n  style,\r\n  children,\r\n  ...props\r\n}) => {\r\n  const classes = [\r\n    'snake-grid-item',\r\n    alignSelf && `snake-grid-item--align-self-${alignSelf}`,\r\n    justifySelf && `snake-grid-item--justify-self-${justifySelf}`,\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const itemStyle: React.CSSProperties = {\r\n    ...style,\r\n    '--grid-column-span': colSpan === 'full' ? '-1' : colSpan,\r\n    '--grid-row-span': rowSpan,\r\n    '--grid-column-start': colStart,\r\n    '--grid-column-end': colEnd === 'auto' ? 'auto' : colEnd,\r\n    '--grid-row-start': rowStart,\r\n    '--grid-row-end': rowEnd === 'auto' ? 'auto' : rowEnd,\r\n    '--grid-area': area,\r\n  } as React.CSSProperties;\r\n\r\n  return (\r\n    <div className={classes} style={itemStyle} {...props}>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport './heading.css';\r\n\r\nexport interface HeadingProps {\r\n  /** Heading level */\r\n  as?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';\r\n  /** Visual size (overrides semantic level) */\r\n  size?: '2xl' | 'xl' | 'lg' | 'md' | 'sm' | 'xs';\r\n  /** Text alignment */\r\n  align?: 'left' | 'center' | 'right';\r\n  /** Color variant */\r\n  variant?: 'default' | 'primary' | 'secondary' | 'muted';\r\n  /** Font weight */\r\n  weight?: 'normal' | 'medium' | 'bold';\r\n  /** Add decorative line */\r\n  decorated?: boolean;\r\n  /** Decoration position */\r\n  decorationPosition?: 'left' | 'bottom' | 'both';\r\n  /** Text transform */\r\n  transform?: 'none' | 'uppercase' | 'lowercase' | 'capitalize';\r\n  /** Truncate with ellipsis */\r\n  truncate?: boolean;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n  /** Children content */\r\n  children: React.ReactNode;\r\n}\r\n\r\n/** Heading component for titles and headers */\r\nexport const Heading: React.FC<HeadingProps> = ({\r\n  as = 'h2',\r\n  size,\r\n  align = 'left',\r\n  variant = 'default',\r\n  weight = 'bold',\r\n  decorated = false,\r\n  decorationPosition = 'left',\r\n  transform = 'none',\r\n  truncate = false,\r\n  className = '',\r\n  children,\r\n}) => {\r\n  const Component = as;\r\n\r\n  const headingClasses = [\r\n    'snake-heading',\r\n    size ? `snake-heading--${size}` : `snake-heading--${as}`,\r\n    `snake-heading--${variant}`,\r\n    `snake-heading--${align}`,\r\n    `snake-heading--weight-${weight}`,\r\n    transform !== 'none' && `snake-heading--${transform}`,\r\n    truncate && 'snake-heading--truncate',\r\n    decorated && 'snake-heading--decorated',\r\n    decorated && `snake-heading--decorated-${decorationPosition}`,\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  return (\r\n    <Component className={headingClasses}>\r\n      {decorated && decorationPosition === 'left' && (\r\n        <span className=\"snake-heading__decoration snake-heading__decoration--left\" />\r\n      )}\r\n      <span className=\"snake-heading__text\">{children}</span>\r\n      {decorated && decorationPosition === 'bottom' && (\r\n        <span className=\"snake-heading__decoration snake-heading__decoration--bottom\" />\r\n      )}\r\n      {decorated && decorationPosition === 'both' && (\r\n        <>\r\n          <span className=\"snake-heading__decoration snake-heading__decoration--left\" />\r\n          <span className=\"snake-heading__decoration snake-heading__decoration--bottom\" />\r\n        </>\r\n      )}\r\n    </Component>\r\n  );\r\n};\r\n","import React, { useMemo, useState } from 'react';\r\nimport './hexagonalbinninggraph.css';\r\n\r\ninterface DataPoint {\r\n  x: number;\r\n  y: number;\r\n  value?: number;\r\n}\r\n\r\ninterface HexBin {\r\n  x: number;\r\n  y: number;\r\n  count: number;\r\n  points: DataPoint[];\r\n}\r\n\r\nexport interface HexagonalBinningGraphProps {\r\n  /** Array of data points */\r\n  data: DataPoint[];\r\n  /** Width of the graph (defaults to 100% to fill parent) */\r\n  width?: number | string;\r\n  /** Height of the graph (defaults to 100% to fill parent) */\r\n  height?: number | string;\r\n  /** Hexagon radius in pixels */\r\n  hexRadius?: number;\r\n  /** X-axis range [min, max] */\r\n  xDomain?: [number, number];\r\n  /** Y-axis range [min, max] */\r\n  yDomain?: [number, number];\r\n  /** Color scale function or array of colors */\r\n  colors?: string[];\r\n  /** Show axes */\r\n  showAxes?: boolean;\r\n  /** Show grid */\r\n  showGrid?: boolean;\r\n  /** Show values in hexagons */\r\n  showValues?: boolean;\r\n  /** Show legend */\r\n  showLegend?: boolean;\r\n  /** Animation on mount */\r\n  animate?: boolean;\r\n  /** Animate legend */\r\n  animateLegend?: boolean;\r\n  /** Grid color */\r\n  gridColor?: string;\r\n  /** Axis color */\r\n  axisColor?: string;\r\n  /** Size variant */\r\n  variant?: 'default' | 'minimal' | 'detailed' | 'interactive';\r\n  /** Format value function */\r\n  formatValue?: (count: number) => string;\r\n  /** X-axis label */\r\n  xLabel?: string;\r\n  /** Y-axis label */\r\n  yLabel?: string;\r\n  /** Title */\r\n  title?: string;\r\n  /** Callback when a hexagon is clicked (for interactive variant) */\r\n  onHexClick?: (bin: HexBin, index: number) => void;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n}\r\n\r\n/** HexagonalBinningGraph component for 2D density visualization */\r\nexport const HexagonalBinningGraph: React.FC<HexagonalBinningGraphProps> = ({\r\n  data,\r\n  width = '100%',\r\n  height = '100%',\r\n  hexRadius = 12,\r\n  xDomain,\r\n  yDomain,\r\n  colors = ['#1a1a1a', '#2a2a2a', '#3a2828', '#4a2525', '#6b3030', '#8b2c2c'],\r\n  showAxes = true,\r\n  showGrid = false,\r\n  showValues = false,\r\n  showLegend = true,\r\n  animate = true,\r\n  animateLegend = true,\r\n  gridColor = '#3a3a3a',\r\n  axisColor = '#5a5a5a',\r\n  variant = 'default',\r\n  formatValue = (count) => count.toString(),\r\n  xLabel,\r\n  yLabel,\r\n  title,\r\n  onHexClick,\r\n  className = '',\r\n}) => {\r\n  // State for interactive variant\r\n  const [activeHex, setActiveHex] = useState<string | null>(null);\r\n  const [hoveredHex, setHoveredHex] = useState<string | null>(null);\r\n\r\n  // Calculate domains\r\n  const { xMin, xMax, yMin, yMax } = useMemo(() => {\r\n    const xValues = data.map(d => d.x);\r\n    const yValues = data.map(d => d.y);\r\n    return {\r\n      xMin: xDomain ? xDomain[0] : Math.min(...xValues),\r\n      xMax: xDomain ? xDomain[1] : Math.max(...xValues),\r\n      yMin: yDomain ? yDomain[0] : Math.min(...yValues),\r\n      yMax: yDomain ? yDomain[1] : Math.max(...yValues),\r\n    };\r\n  }, [data, xDomain, yDomain]);\r\n\r\n  // Calculate hexagon dimensions\r\n  const hexHeight = Math.sqrt(3) * hexRadius;\r\n  const hexWidth = 2 * hexRadius;\r\n  const vertDist = hexHeight;\r\n  const horizDist = hexWidth * 0.75;\r\n\r\n  // SVG dimensions - use a default viewBox size\r\n  const svgWidth = 600;\r\n  const svgHeight = 400;\r\n  \r\n  // Margins for axes and labels\r\n  const margin = { top: 40, right: 40, bottom: 60, left: 60 };\r\n  const plotWidth = svgWidth - margin.left - margin.right;\r\n  const plotHeight = svgHeight - margin.top - margin.bottom;\r\n\r\n  // Create hexagonal bins\r\n  const hexBins = useMemo(() => {\r\n    const bins: Map<string, HexBin> = new Map();\r\n    \r\n    // Add padding equal to hexagon radius to keep hexagons within bounds\r\n    const padding = hexRadius;\r\n    const effectiveWidth = plotWidth - (2 * padding);\r\n    const effectiveHeight = plotHeight - (2 * padding);\r\n    \r\n    const cols = Math.ceil(effectiveWidth / horizDist);\r\n    const rows = Math.ceil(effectiveHeight / vertDist);\r\n\r\n    // Scale functions with padding offset\r\n    const xScale = (x: number) => padding + ((x - xMin) / (xMax - xMin)) * effectiveWidth;\r\n    const yScale = (y: number) => padding + (effectiveHeight - ((y - yMin) / (yMax - yMin)) * effectiveHeight);\r\n\r\n    // Bin the data points\r\n    data.forEach(point => {\r\n      const scaledX = xScale(point.x);\r\n      const scaledY = yScale(point.y);\r\n\r\n      // Find nearest hexagon center within padded area\r\n      const col = Math.round((scaledX - padding) / horizDist);\r\n      const row = Math.round((scaledY - padding) / vertDist);\r\n      \r\n      // Calculate hexagon center position with padding\r\n      const hexX = padding + col * horizDist;\r\n      const hexY = padding + row * vertDist + (col % 2) * (vertDist / 2);\r\n      \r\n      // Only create bins that are fully within the plot area\r\n      if (hexX >= padding && hexX <= plotWidth - padding && \r\n          hexY >= padding && hexY <= plotHeight - padding) {\r\n        const key = `${col},${row}`;\r\n        \r\n        if (!bins.has(key)) {\r\n          bins.set(key, {\r\n            x: hexX,\r\n            y: hexY,\r\n            count: 0,\r\n            points: [],\r\n          });\r\n        }\r\n        \r\n        const bin = bins.get(key)!;\r\n        bin.count++;\r\n        bin.points.push(point);\r\n      }\r\n    });\r\n\r\n    return Array.from(bins.values());\r\n  }, [data, xMin, xMax, yMin, yMax, plotWidth, plotHeight, horizDist, vertDist, hexRadius]);\r\n\r\n  // Calculate max count for color scaling\r\n  const maxCount = useMemo(() => {\r\n    return Math.max(...hexBins.map(bin => bin.count));\r\n  }, [hexBins]);\r\n\r\n  // Generate hexagon path\r\n  const generateHexPath = (centerX: number, centerY: number, radius: number) => {\r\n    const angles = [0, 60, 120, 180, 240, 300];\r\n    const points = angles.map(angle => {\r\n      const radian = (angle * Math.PI) / 180;\r\n      return {\r\n        x: centerX + radius * Math.cos(radian),\r\n        y: centerY + radius * Math.sin(radian),\r\n      };\r\n    });\r\n    \r\n    return points.map((p, i) => `${i === 0 ? 'M' : 'L'} ${p.x} ${p.y}`).join(' ') + ' Z';\r\n  };\r\n\r\n  // Get color for bin based on count\r\n  const getColor = (count: number) => {\r\n    const index = Math.floor((count / maxCount) * (colors.length - 1));\r\n    return colors[Math.min(index, colors.length - 1)];\r\n  };\r\n\r\n  const classes = [\r\n    'snake-hexagonal-binning-graph',\r\n    `snake-hexagonal-binning-graph--${variant}`,\r\n    animate && 'snake-hexagonal-binning-graph--animated',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const variantStyles = {\r\n    minimal: {\r\n      showAxes: false,\r\n      showGrid: false,\r\n      showLegend: false,\r\n    },\r\n    detailed: {\r\n      showAxes: true,\r\n      showGrid: true,\r\n      showLegend: true,\r\n      showValues: true,\r\n    },\r\n    interactive: {\r\n      showAxes: true,\r\n      showLegend: true,\r\n    },\r\n  };\r\n\r\n  const variantProps = variant !== 'default' ? variantStyles[variant] || {} : {};\r\n  const finalShowAxes = variantProps.showAxes ?? showAxes;\r\n  const finalShowGrid = variantProps.showGrid ?? showGrid;\r\n  const finalShowLegend = variantProps.showLegend ?? showLegend;\r\n  const finalShowValues = variantProps.showValues ?? showValues;\r\n\r\n  const isInteractive = variant === 'interactive';\r\n\r\n  // Generate axis ticks\r\n  const xTicks = useMemo(() => {\r\n    const tickCount = 10;\r\n    const step = (xMax - xMin) / tickCount;\r\n    return Array.from({ length: tickCount + 1 }, (_, i) => xMin + i * step);\r\n  }, [xMin, xMax]);\r\n\r\n  const yTicks = useMemo(() => {\r\n    const tickCount = 8;\r\n    const step = (yMax - yMin) / tickCount;\r\n    return Array.from({ length: tickCount + 1 }, (_, i) => yMin + i * step);\r\n  }, [yMin, yMax]);\r\n\r\n  return (\r\n    <div className={classes}>\r\n      <div className=\"snake-hexagonal-binning-graph__corner snake-hexagonal-binning-graph__corner--top-left\" />\r\n      <div className=\"snake-hexagonal-binning-graph__corner snake-hexagonal-binning-graph__corner--top-right\" />\r\n      \r\n      <div className=\"snake-hexagonal-binning-graph__container\">\r\n        {title && (\r\n          <div className=\"snake-hexagonal-binning-graph__title\">{title}</div>\r\n        )}\r\n        \r\n        <svg\r\n          width={typeof width === 'number' ? width : '100%'}\r\n          height={typeof height === 'number' ? height : '100%'}\r\n          viewBox={`0 0 ${svgWidth} ${svgHeight}`}\r\n          className=\"snake-hexagonal-binning-graph__svg\"\r\n          preserveAspectRatio=\"xMidYMid meet\"\r\n        >\r\n          <g transform={`translate(${margin.left}, ${margin.top})`}>\r\n            {/* Grid */}\r\n            {finalShowGrid && (\r\n              <g className=\"snake-hexagonal-binning-graph__grid\">\r\n                {xTicks.map((tick, i) => {\r\n                  const x = ((tick - xMin) / (xMax - xMin)) * plotWidth;\r\n                  return (\r\n                    <line\r\n                      key={`grid-x-${i}`}\r\n                      x1={x}\r\n                      y1={0}\r\n                      x2={x}\r\n                      y2={plotHeight}\r\n                      stroke={gridColor}\r\n                      strokeWidth=\"1\"\r\n                      strokeOpacity=\"0.3\"\r\n                      strokeDasharray=\"2 4\"\r\n                    />\r\n                  );\r\n                })}\r\n                {yTicks.map((tick, i) => {\r\n                  const y = plotHeight - ((tick - yMin) / (yMax - yMin)) * plotHeight;\r\n                  return (\r\n                    <line\r\n                      key={`grid-y-${i}`}\r\n                      x1={0}\r\n                      y1={y}\r\n                      x2={plotWidth}\r\n                      y2={y}\r\n                      stroke={gridColor}\r\n                      strokeWidth=\"1\"\r\n                      strokeOpacity=\"0.3\"\r\n                      strokeDasharray=\"2 4\"\r\n                    />\r\n                  );\r\n                })}\r\n              </g>\r\n            )}\r\n\r\n            {/* Hexagonal bins */}\r\n            <g className=\"snake-hexagonal-binning-graph__hexagons\">\r\n              {hexBins.map((bin, i) => {\r\n                const hexKey = `${bin.x},${bin.y}`;\r\n                const isActive = activeHex === hexKey;\r\n                const isHovered = hoveredHex === hexKey;\r\n                const isDimmed = isInteractive && activeHex && !isActive;\r\n                const color = getColor(bin.count);\r\n                \r\n                return (\r\n                  <g key={`hex-${i}`}>\r\n                    <path\r\n                      d={generateHexPath(bin.x, bin.y, hexRadius - 1)}\r\n                      fill={color}\r\n                      fillOpacity={\r\n                        isDimmed ? 0.2 : \r\n                        isActive ? 1 : \r\n                        isHovered ? 0.9 : \r\n                        0.8\r\n                      }\r\n                      stroke={color}\r\n                      strokeWidth={isActive || isHovered ? 2 : 1}\r\n                      strokeOpacity={\r\n                        isDimmed ? 0.3 : \r\n                        isActive ? 1 : \r\n                        isHovered ? 1 : \r\n                        0.9\r\n                      }\r\n                      className={`snake-hexagonal-binning-graph__hexagon ${isActive ? 'snake-hexagonal-binning-graph__hexagon--active' : ''}`}\r\n                      style={{\r\n                        cursor: isInteractive ? 'pointer' : 'default',\r\n                        transition: 'all 0.3s ease',\r\n                        transform: isActive ? 'scale(1.1)' : 'scale(1)',\r\n                        transformOrigin: `${bin.x}px ${bin.y}px`,\r\n                      }}\r\n                      onClick={() => {\r\n                        if (isInteractive) {\r\n                          const newActive = isActive ? null : hexKey;\r\n                          setActiveHex(newActive);\r\n                          onHexClick?.(bin, i);\r\n                        }\r\n                      }}\r\n                      onMouseEnter={() => isInteractive && setHoveredHex(hexKey)}\r\n                      onMouseLeave={() => isInteractive && setHoveredHex(null)}\r\n                    />\r\n                    {finalShowValues && bin.count > 0 && (\r\n                      <text\r\n                        x={bin.x}\r\n                        y={bin.y}\r\n                        textAnchor=\"middle\"\r\n                        dominantBaseline=\"middle\"\r\n                        fill=\"#ffffff\"\r\n                        fontSize=\"10\"\r\n                        fontFamily=\"var(--font-family-mono)\"\r\n                        className=\"snake-hexagonal-binning-graph__value\"\r\n                        pointerEvents=\"none\"\r\n                      >\r\n                        {formatValue(bin.count)}\r\n                      </text>\r\n                    )}\r\n                  </g>\r\n                );\r\n              })}\r\n            </g>\r\n\r\n            {/* Axes */}\r\n            {finalShowAxes && (\r\n              <g className=\"snake-hexagonal-binning-graph__axes\">\r\n                {/* X-axis */}\r\n                <line\r\n                  x1={0}\r\n                  y1={plotHeight}\r\n                  x2={plotWidth}\r\n                  y2={plotHeight}\r\n                  stroke={axisColor}\r\n                  strokeWidth=\"2\"\r\n                />\r\n                {xTicks.map((tick, i) => {\r\n                  const x = ((tick - xMin) / (xMax - xMin)) * plotWidth;\r\n                  return (\r\n                    <g key={`x-tick-${i}`}>\r\n                      <line\r\n                        x1={x}\r\n                        y1={plotHeight}\r\n                        x2={x}\r\n                        y2={plotHeight + 5}\r\n                        stroke={axisColor}\r\n                        strokeWidth=\"1\"\r\n                      />\r\n                      <text\r\n                        x={x}\r\n                        y={plotHeight + 20}\r\n                        textAnchor=\"middle\"\r\n                        fill=\"#8a8a8a\"\r\n                        fontSize=\"10\"\r\n                        fontFamily=\"var(--font-family-mono)\"\r\n                      >\r\n                        {tick.toFixed(1)}\r\n                      </text>\r\n                    </g>\r\n                  );\r\n                })}\r\n                \r\n                {/* Y-axis */}\r\n                <line\r\n                  x1={0}\r\n                  y1={0}\r\n                  x2={0}\r\n                  y2={plotHeight}\r\n                  stroke={axisColor}\r\n                  strokeWidth=\"2\"\r\n                />\r\n                {yTicks.map((tick, i) => {\r\n                  const y = plotHeight - ((tick - yMin) / (yMax - yMin)) * plotHeight;\r\n                  return (\r\n                    <g key={`y-tick-${i}`}>\r\n                      <line\r\n                        x1={0}\r\n                        y1={y}\r\n                        x2={-5}\r\n                        y2={y}\r\n                        stroke={axisColor}\r\n                        strokeWidth=\"1\"\r\n                      />\r\n                      <text\r\n                        x={-10}\r\n                        y={y}\r\n                        textAnchor=\"end\"\r\n                        dominantBaseline=\"middle\"\r\n                        fill=\"#8a8a8a\"\r\n                        fontSize=\"10\"\r\n                        fontFamily=\"var(--font-family-mono)\"\r\n                      >\r\n                        {tick.toFixed(1)}\r\n                      </text>\r\n                    </g>\r\n                  );\r\n                })}\r\n              </g>\r\n            )}\r\n\r\n            {/* Axis labels */}\r\n            {finalShowAxes && (\r\n              <>\r\n                {xLabel && (\r\n                  <text\r\n                    x={plotWidth / 2}\r\n                    y={plotHeight + 45}\r\n                    textAnchor=\"middle\"\r\n                    fill=\"#bdbdbd\"\r\n                    fontSize=\"12\"\r\n                    fontFamily=\"var(--font-family)\"\r\n                    className=\"snake-hexagonal-binning-graph__axis-label\"\r\n                  >\r\n                    {xLabel}\r\n                  </text>\r\n                )}\r\n                {yLabel && (\r\n                  <text\r\n                    x={-plotHeight / 2}\r\n                    y={-40}\r\n                    textAnchor=\"middle\"\r\n                    fill=\"#bdbdbd\"\r\n                    fontSize=\"12\"\r\n                    fontFamily=\"var(--font-family)\"\r\n                    transform=\"rotate(-90)\"\r\n                    className=\"snake-hexagonal-binning-graph__axis-label\"\r\n                  >\r\n                    {yLabel}\r\n                  </text>\r\n                )}\r\n              </>\r\n            )}\r\n          </g>\r\n        </svg>\r\n\r\n        {/* Legend */}\r\n        {finalShowLegend && (\r\n          <div className={`snake-hexagonal-binning-graph__legend ${animateLegend ? 'snake-hexagonal-binning-graph__legend--animated' : ''}`}>\r\n            <div className=\"snake-hexagonal-binning-graph__legend-title\">Density</div>\r\n            <div className=\"snake-hexagonal-binning-graph__legend-scale\">\r\n              <div className=\"snake-hexagonal-binning-graph__legend-gradient\">\r\n                {colors.map((color, i) => (\r\n                  <div\r\n                    key={`legend-color-${i}`}\r\n                    className=\"snake-hexagonal-binning-graph__legend-color\"\r\n                    style={{ backgroundColor: color }}\r\n                  />\r\n                ))}\r\n              </div>\r\n              <div className=\"snake-hexagonal-binning-graph__legend-labels\">\r\n                <span>Low</span>\r\n                <span>High</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"snake-hexagonal-binning-graph__corner snake-hexagonal-binning-graph__corner--bottom-left\" />\r\n      <div className=\"snake-hexagonal-binning-graph__corner snake-hexagonal-binning-graph__corner--bottom-right\" />\r\n    </div>\r\n  );\r\n};","import React from 'react';\r\nimport './iconbutton.css';\r\n\r\nexport interface IconButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\r\n  /** Icon content */\r\n  icon: React.ReactNode;\r\n  /** Button variant */\r\n  variant?: 'default' | 'primary' | 'secondary' | 'ghost' | 'danger';\r\n  /** Size variant */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** Shape variant */\r\n  shape?: 'square' | 'circle';\r\n  /** Loading state */\r\n  loading?: boolean;\r\n  /** Tooltip text */\r\n  tooltip?: string;\r\n  /** Badge content */\r\n  badge?: string | number;\r\n  /** Badge variant */\r\n  badgeVariant?: 'default' | 'success' | 'warning' | 'danger' | 'info';\r\n}\r\n\r\n/** IconButton component for icon-only actions */\r\nexport const IconButton: React.FC<IconButtonProps> = ({\r\n  icon,\r\n  variant = 'default',\r\n  size = 'medium',\r\n  shape = 'square',\r\n  loading = false,\r\n  tooltip,\r\n  badge,\r\n  badgeVariant = 'danger',\r\n  disabled = false,\r\n  className = '',\r\n  ...props\r\n}) => {\r\n  const buttonClasses = [\r\n    'snake-icon-button',\r\n    `snake-icon-button--${variant}`,\r\n    `snake-icon-button--${size}`,\r\n    `snake-icon-button--${shape}`,\r\n    loading && 'snake-icon-button--loading',\r\n    disabled && 'snake-icon-button--disabled',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      className={buttonClasses}\r\n      disabled={disabled || loading}\r\n      title={tooltip}\r\n      aria-label={tooltip}\r\n      {...props}\r\n    >\r\n      <span className=\"snake-icon-button__content\">\r\n        {loading ? <span className=\"snake-icon-button__loader\" /> : icon}\r\n      </span>\r\n\r\n      {badge !== undefined && !loading && (\r\n        <span className={`snake-icon-button__badge snake-icon-button__badge--${badgeVariant}`}>\r\n          {badge}\r\n        </span>\r\n      )}\r\n\r\n      {shape === 'square' && (\r\n        <>\r\n          <span className=\"snake-icon-button__corner snake-icon-button__corner--top-left\" />\r\n          <span className=\"snake-icon-button__corner snake-icon-button__corner--top-right\" />\r\n          <span className=\"snake-icon-button__corner snake-icon-button__corner--bottom-left\" />\r\n          <span className=\"snake-icon-button__corner snake-icon-button__corner--bottom-right\" />\r\n        </>\r\n      )}\r\n    </button>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport './input.css';\r\n\r\nexport interface InputProps extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'size'> {\r\n  /** Input label */\r\n  label?: string;\r\n  /** Helper text below input */\r\n  helperText?: string;\r\n  /** Error message */\r\n  error?: string;\r\n  /** Size variant */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** Visual variant */\r\n  variant?: 'default' | 'success' | 'warning' | 'danger' | 'info';\r\n  /** Full width */\r\n  fullWidth?: boolean;\r\n  /** Icon to display on the left */\r\n  leftIcon?: React.ReactNode;\r\n  /** Icon to display on the right */\r\n  rightIcon?: React.ReactNode;\r\n}\r\n\r\n/** Input component with dark theme styling */\r\nexport const Input: React.FC<InputProps> = ({\r\n  label,\r\n  helperText,\r\n  error,\r\n  size = 'medium',\r\n  variant = 'default',\r\n  fullWidth = false,\r\n  leftIcon,\r\n  rightIcon,\r\n  className = '',\r\n  disabled = false,\r\n  ...props\r\n}) => {\r\n  const inputClasses = [\r\n    'snake-input',\r\n    `snake-input--${size}`,\r\n    `snake-input--${variant}`,\r\n    error && 'snake-input--error',\r\n    fullWidth && 'snake-input--full-width',\r\n    disabled && 'snake-input--disabled',\r\n    leftIcon && 'snake-input--has-left-icon',\r\n    rightIcon && 'snake-input--has-right-icon',\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const wrapperClasses = [\r\n    'snake-input-wrapper',\r\n    fullWidth && 'snake-input-wrapper--full-width',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  return (\r\n    <div className={wrapperClasses}>\r\n      {label && <label className=\"snake-input__label\">{label}</label>}\r\n      <div className=\"snake-input__container\">\r\n        {leftIcon && <span className=\"snake-input__icon snake-input__icon--left\">{leftIcon}</span>}\r\n        <input className={inputClasses} disabled={disabled} {...props} />\r\n        {rightIcon && (\r\n          <span className=\"snake-input__icon snake-input__icon--right\">{rightIcon}</span>\r\n        )}\r\n      </div>\r\n      {(error || helperText) && (\r\n        <span\r\n          className={`snake-input__helper-text ${error ? 'snake-input__helper-text--error' : ''}`}\r\n        >\r\n          {error || helperText}\r\n        </span>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport './keyboardkey.css';\r\n\r\nexport interface KeyboardKeyProps {\r\n  /** The key label to display */\r\n  children: React.ReactNode;\r\n  /** Size variant */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** Key variant */\r\n  variant?: 'default' | 'modifier' | 'action' | 'danger' | 'space';\r\n  /** Whether the key is pressed */\r\n  pressed?: boolean;\r\n  /** Whether the key is disabled */\r\n  disabled?: boolean;\r\n  /** Click handler */\r\n  onClick?: () => void;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n  /** Width multiplier for special keys */\r\n  width?: number;\r\n  /** Icon to display alongside text */\r\n  icon?: React.ReactNode;\r\n  /** Position of icon */\r\n  iconPosition?: 'left' | 'right' | 'top' | 'bottom';\r\n}\r\n\r\n/** Keyboard Key component for displaying keyboard shortcuts or virtual keyboards */\r\nexport const KeyboardKey: React.FC<KeyboardKeyProps> = ({\r\n  children,\r\n  size = 'medium',\r\n  variant = 'default',\r\n  pressed = false,\r\n  disabled = false,\r\n  onClick,\r\n  className = '',\r\n  width = 1,\r\n  icon,\r\n  iconPosition = 'left',\r\n}) => {\r\n  const classes = [\r\n    'snake-keyboard-key',\r\n    `snake-keyboard-key--${size}`,\r\n    `snake-keyboard-key--${variant}`,\r\n    pressed && 'snake-keyboard-key--pressed',\r\n    disabled && 'snake-keyboard-key--disabled',\r\n    onClick && 'snake-keyboard-key--clickable',\r\n    icon && `snake-keyboard-key--with-icon`,\r\n    icon && `snake-keyboard-key--icon-${iconPosition}`,\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const style = width !== 1 ? { '--key-width': width } as React.CSSProperties : undefined;\r\n\r\n  const Component = onClick ? 'button' : 'kbd';\r\n\r\n  return (\r\n    <Component\r\n      className={classes}\r\n      onClick={onClick}\r\n      disabled={onClick ? disabled : undefined}\r\n      style={style}\r\n    >\r\n      {icon && <span className=\"snake-keyboard-key__icon\">{icon}</span>}\r\n      <span className=\"snake-keyboard-key__label\">{children}</span>\r\n    </Component>\r\n  );\r\n};","import React, { useMemo, useState, useEffect } from 'react';\r\nimport './linegraph.css';\r\n\r\ninterface DataPoint {\r\n  x: number;\r\n  y: number;\r\n  label?: string;\r\n}\r\n\r\ninterface DataSeries {\r\n  name: string;\r\n  data: DataPoint[];\r\n  color?: string;\r\n}\r\n\r\nexport interface LineGraphProps {\r\n  /** Data series to display */\r\n  data: DataSeries | DataSeries[];\r\n  /** Width of the graph (defaults to 100% to fill parent) */\r\n  width?: number | string;\r\n  /** Height of the graph (defaults to 100% to fill parent) */\r\n  height?: number | string;\r\n  /** Show axes */\r\n  showAxes?: boolean;\r\n  /** Show grid */\r\n  showGrid?: boolean;\r\n  /** Show legend */\r\n  showLegend?: boolean;\r\n  /** Show data points */\r\n  showPoints?: boolean;\r\n  /** Show values on hover */\r\n  showValues?: boolean;\r\n  /** Animate on mount */\r\n  animate?: boolean;\r\n  /** Animate legend */\r\n  animateLegend?: boolean;\r\n  /** Line width */\r\n  strokeWidth?: number;\r\n  /** Point radius */\r\n  pointRadius?: number;\r\n  /** Curve type */\r\n  curve?: 'linear' | 'smooth' | 'step';\r\n  /** Fill area under line */\r\n  fill?: boolean;\r\n  /** Fill opacity */\r\n  fillOpacity?: number;\r\n  /** Grid color */\r\n  gridColor?: string;\r\n  /** Axis color */\r\n  axisColor?: string;\r\n  /** Size variant */\r\n  variant?: 'default' | 'minimal' | 'detailed' | 'interactive';\r\n  /** X-axis label */\r\n  xLabel?: string;\r\n  /** Y-axis label */\r\n  yLabel?: string;\r\n  /** Title */\r\n  title?: string;\r\n  /** X-axis domain [min, max] */\r\n  xDomain?: [number, number];\r\n  /** Y-axis domain [min, max] */\r\n  yDomain?: [number, number];\r\n  /** Format x-axis value */\r\n  formatX?: (value: number) => string;\r\n  /** Format y-axis value */\r\n  formatY?: (value: number) => string;\r\n  /** Callback when a point is clicked (for interactive variant) */\r\n  onPointClick?: (point: DataPoint, seriesName: string) => void;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n}\r\n\r\n/** LineGraph component for time series and continuous data visualization */\r\nexport const LineGraph: React.FC<LineGraphProps> = ({\r\n  data,\r\n  width = '100%',\r\n  height = '100%',\r\n  showAxes = true,\r\n  showGrid = false,\r\n  showLegend = true,\r\n  showPoints = true,\r\n  showValues = false,\r\n  animate = true,\r\n  animateLegend = true,\r\n  strokeWidth = 2,\r\n  pointRadius = 4,\r\n  curve = 'linear',\r\n  fill = false,\r\n  fillOpacity = 0.2,\r\n  gridColor = '#3a3a3a',\r\n  axisColor = '#5a5a5a',\r\n  variant = 'default',\r\n  xLabel,\r\n  yLabel,\r\n  title,\r\n  xDomain,\r\n  yDomain,\r\n  formatX = (v) => v.toFixed(1),\r\n  formatY = (v) => v.toFixed(1),\r\n  onPointClick,\r\n  className = '',\r\n}) => {\r\n  // Normalize data to array\r\n  const series = Array.isArray(data) ? data : [data];\r\n  \r\n  // SVG dimensions - use a default viewBox size\r\n  const svgWidth = 600;\r\n  const svgHeight = 400;\r\n  \r\n  // State for interactive variant\r\n  const [activeSeries, setActiveSeries] = useState<string | null>(null);\r\n  const [hoveredPoint, setHoveredPoint] = useState<{\r\n    x: number;\r\n    y: number;\r\n    value: DataPoint;\r\n    series: string;\r\n  } | null>(null);\r\n\r\n  // Default colors\r\n  const defaultColors = ['#8b2c2c', '#6b3030', '#4a4a4a', '#7a7a7a', '#d4d4d4'];\r\n\r\n  // Calculate domains\r\n  const { xMin, xMax, yMin, yMax } = useMemo(() => {\r\n    const allPoints = series.flatMap(s => s.data);\r\n    const xValues = allPoints.map(p => p.x);\r\n    const yValues = allPoints.map(p => p.y);\r\n    \r\n    return {\r\n      xMin: xDomain ? xDomain[0] : Math.min(...xValues),\r\n      xMax: xDomain ? xDomain[1] : Math.max(...xValues),\r\n      yMin: yDomain ? yDomain[0] : Math.min(0, ...yValues),\r\n      yMax: yDomain ? yDomain[1] : Math.max(...yValues),\r\n    };\r\n  }, [series, xDomain, yDomain]);\r\n\r\n  // Margins for axes and labels\r\n  const margin = { top: 40, right: 40, bottom: 80, left: 80 };\r\n  const plotWidth = svgWidth - margin.left - margin.right;\r\n  const plotHeight = svgHeight - margin.top - margin.bottom;\r\n\r\n  // Scale functions\r\n  const xScale = (x: number) => ((x - xMin) / (xMax - xMin)) * plotWidth;\r\n  const yScale = (y: number) => plotHeight - ((y - yMin) / (yMax - yMin)) * plotHeight;\r\n\r\n  // Generate path for line\r\n  const generatePath = (points: DataPoint[]) => {\r\n    if (points.length === 0) return '';\r\n    \r\n    const scaledPoints = points.map(p => ({\r\n      x: xScale(p.x),\r\n      y: yScale(p.y),\r\n    }));\r\n    \r\n    let path = '';\r\n    \r\n    if (curve === 'smooth') {\r\n      // Cubic bezier curve\r\n      path = scaledPoints.map((point, i) => {\r\n        if (i === 0) return `M ${point.x} ${point.y}`;\r\n        \r\n        const prev = scaledPoints[i - 1];\r\n        const cpx1 = prev.x + (point.x - prev.x) / 3;\r\n        const cpy1 = prev.y;\r\n        const cpx2 = prev.x + 2 * (point.x - prev.x) / 3;\r\n        const cpy2 = point.y;\r\n        \r\n        return `C ${cpx1} ${cpy1}, ${cpx2} ${cpy2}, ${point.x} ${point.y}`;\r\n      }).join(' ');\r\n    } else if (curve === 'step') {\r\n      path = scaledPoints.map((point, i) => {\r\n        if (i === 0) return `M ${point.x} ${point.y}`;\r\n        const prev = scaledPoints[i - 1];\r\n        return `L ${point.x} ${prev.y} L ${point.x} ${point.y}`;\r\n      }).join(' ');\r\n    } else {\r\n      // Linear\r\n      path = scaledPoints.map((point, i) => \r\n        `${i === 0 ? 'M' : 'L'} ${point.x} ${point.y}`\r\n      ).join(' ');\r\n    }\r\n    \r\n    return path;\r\n  };\r\n\r\n  // Generate fill path\r\n  const generateFillPath = (points: DataPoint[]) => {\r\n    if (points.length === 0) return '';\r\n    \r\n    const linePath = generatePath(points);\r\n    const lastPoint = points[points.length - 1];\r\n    const firstPoint = points[0];\r\n    \r\n    return `${linePath} L ${xScale(lastPoint.x)} ${yScale(0)} L ${xScale(firstPoint.x)} ${yScale(0)} Z`;\r\n  };\r\n\r\n  const classes = [\r\n    'snake-line-graph',\r\n    `snake-line-graph--${variant}`,\r\n    animate && 'snake-line-graph--animated',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const variantStyles = {\r\n    minimal: {\r\n      showAxes: false,\r\n      showGrid: false,\r\n      showLegend: false,\r\n      showPoints: false,\r\n      strokeWidth: 1,\r\n    },\r\n    detailed: {\r\n      showAxes: true,\r\n      showGrid: true,\r\n      showLegend: true,\r\n      showPoints: true,\r\n      showValues: true,\r\n      strokeWidth: 2,\r\n    },\r\n    interactive: {\r\n      showAxes: true,\r\n      showLegend: true,\r\n      showPoints: true,\r\n      showValues: true,\r\n    },\r\n  };\r\n\r\n  const variantProps = variant !== 'default' ? variantStyles[variant] || {} : {};\r\n  const finalShowAxes = variantProps.showAxes ?? showAxes;\r\n  const finalShowGrid = variantProps.showGrid ?? showGrid;\r\n  const finalShowLegend = variantProps.showLegend ?? showLegend;\r\n  const finalShowPoints = variantProps.showPoints ?? showPoints;\r\n  const finalShowValues = variantProps.showValues ?? showValues;\r\n  const finalStrokeWidth = variantProps.strokeWidth ?? strokeWidth;\r\n\r\n  const isInteractive = variant === 'interactive';\r\n\r\n  // Generate axis ticks\r\n  const xTicks = useMemo(() => {\r\n    const tickCount = 10;\r\n    const step = (xMax - xMin) / tickCount;\r\n    return Array.from({ length: tickCount + 1 }, (_, i) => xMin + i * step);\r\n  }, [xMin, xMax]);\r\n\r\n  const yTicks = useMemo(() => {\r\n    const tickCount = 8;\r\n    const step = (yMax - yMin) / tickCount;\r\n    return Array.from({ length: tickCount + 1 }, (_, i) => yMin + i * step);\r\n  }, [yMin, yMax]);\r\n\r\n  return (\r\n    <div className={classes}>\r\n      <div className=\"snake-line-graph__corner snake-line-graph__corner--top-left\" />\r\n      <div className=\"snake-line-graph__corner snake-line-graph__corner--top-right\" />\r\n      \r\n      <div className=\"snake-line-graph__container\">\r\n        {title && (\r\n          <div className=\"snake-line-graph__title\">{title}</div>\r\n        )}\r\n        \r\n        <svg\r\n          width={typeof width === 'number' ? width : '100%'}\r\n          height={typeof height === 'number' ? height : '100%'}\r\n          viewBox={`0 0 ${svgWidth} ${svgHeight}`}\r\n          className=\"snake-line-graph__svg\"\r\n          preserveAspectRatio=\"xMidYMid meet\"\r\n        >\r\n          <defs>\r\n            {/* Gradient definitions for fill */}\r\n            {series.map((s, i) => {\r\n              const color = s.color || defaultColors[i % defaultColors.length];\r\n              return (\r\n                <linearGradient key={`gradient-${i}`} id={`line-gradient-${i}`} x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\r\n                  <stop offset=\"0%\" stopColor={color} stopOpacity={fillOpacity} />\r\n                  <stop offset=\"100%\" stopColor={color} stopOpacity={0} />\r\n                </linearGradient>\r\n              );\r\n            })}\r\n          </defs>\r\n          \r\n          <g transform={`translate(${margin.left}, ${margin.top})`}>\r\n            {/* Grid */}\r\n            {finalShowGrid && (\r\n              <g className=\"snake-line-graph__grid\">\r\n                {xTicks.map((tick, i) => (\r\n                  <line\r\n                    key={`grid-x-${i}`}\r\n                    x1={xScale(tick)}\r\n                    y1={0}\r\n                    x2={xScale(tick)}\r\n                    y2={plotHeight}\r\n                    stroke={gridColor}\r\n                    strokeWidth=\"1\"\r\n                    strokeOpacity=\"0.3\"\r\n                    strokeDasharray=\"2 4\"\r\n                  />\r\n                ))}\r\n                {yTicks.map((tick, i) => (\r\n                  <line\r\n                    key={`grid-y-${i}`}\r\n                    x1={0}\r\n                    y1={yScale(tick)}\r\n                    x2={plotWidth}\r\n                    y2={yScale(tick)}\r\n                    stroke={gridColor}\r\n                    strokeWidth=\"1\"\r\n                    strokeOpacity=\"0.3\"\r\n                    strokeDasharray=\"2 4\"\r\n                  />\r\n                ))}\r\n              </g>\r\n            )}\r\n\r\n            {/* Lines and areas */}\r\n            <g className=\"snake-line-graph__lines\">\r\n              {series.map((s, i) => {\r\n                const color = s.color || defaultColors[i % defaultColors.length];\r\n                const isActive = activeSeries === s.name;\r\n                const isDimmed = isInteractive && activeSeries && !isActive;\r\n                \r\n                return (\r\n                  <g \r\n                    key={`series-${i}`}\r\n                    className={`snake-line-graph__series ${isActive ? 'snake-line-graph__series--active' : ''}`}\r\n                    style={{\r\n                      opacity: isDimmed ? 0.3 : 1,\r\n                    }}\r\n                  >\r\n                    {/* Fill area */}\r\n                    {fill && (\r\n                      <path\r\n                        d={generateFillPath(s.data)}\r\n                        fill={`url(#line-gradient-${i})`}\r\n                        className=\"snake-line-graph__area\"\r\n                      />\r\n                    )}\r\n                    \r\n                    {/* Line */}\r\n                    <path\r\n                      d={generatePath(s.data)}\r\n                      fill=\"none\"\r\n                      stroke={color}\r\n                      strokeWidth={isActive ? finalStrokeWidth + 1 : finalStrokeWidth}\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                      className=\"snake-line-graph__line\"\r\n                      onClick={() => {\r\n                        if (isInteractive) {\r\n                          setActiveSeries(isActive ? null : s.name);\r\n                        }\r\n                      }}\r\n                      style={{\r\n                        cursor: isInteractive ? 'pointer' : 'default',\r\n                      }}\r\n                    />\r\n                    \r\n                    {/* Points */}\r\n                    {finalShowPoints && s.data.map((point, j) => (\r\n                      <circle\r\n                        key={`point-${j}`}\r\n                        cx={xScale(point.x)}\r\n                        cy={yScale(point.y)}\r\n                        r={isActive ? pointRadius + 1 : pointRadius}\r\n                        fill={color}\r\n                        stroke=\"#0b0b0d\"\r\n                        strokeWidth=\"1\"\r\n                        className=\"snake-line-graph__point\"\r\n                        onClick={() => {\r\n                          if (isInteractive) {\r\n                            onPointClick?.(point, s.name);\r\n                          }\r\n                        }}\r\n                        onMouseEnter={() => {\r\n                          if (finalShowValues) {\r\n                            setHoveredPoint({\r\n                              x: xScale(point.x),\r\n                              y: yScale(point.y),\r\n                              value: point,\r\n                              series: s.name,\r\n                            });\r\n                          }\r\n                        }}\r\n                        onMouseLeave={() => setHoveredPoint(null)}\r\n                        style={{\r\n                          cursor: isInteractive ? 'pointer' : 'default',\r\n                        }}\r\n                      />\r\n                    ))}\r\n                  </g>\r\n                );\r\n              })}\r\n            </g>\r\n\r\n            {/* Hover tooltip */}\r\n            {finalShowValues && hoveredPoint && (\r\n              <g className=\"snake-line-graph__tooltip\">\r\n                <rect\r\n                  x={hoveredPoint.x - 40}\r\n                  y={hoveredPoint.y - 30}\r\n                  width=\"80\"\r\n                  height=\"25\"\r\n                  fill=\"#101010\"\r\n                  stroke=\"#3a3a3a\"\r\n                  strokeWidth=\"1\"\r\n                />\r\n                <text\r\n                  x={hoveredPoint.x}\r\n                  y={hoveredPoint.y - 15}\r\n                  textAnchor=\"middle\"\r\n                  dominantBaseline=\"middle\"\r\n                  fill=\"#bdbdbd\"\r\n                  fontSize=\"10\"\r\n                  fontFamily=\"var(--font-family-mono)\"\r\n                >\r\n                  {`${formatX(hoveredPoint.value.x)}, ${formatY(hoveredPoint.value.y)}`}\r\n                </text>\r\n              </g>\r\n            )}\r\n\r\n            {/* Axes */}\r\n            {finalShowAxes && (\r\n              <g className=\"snake-line-graph__axes\">\r\n                {/* X-axis */}\r\n                <line\r\n                  x1={0}\r\n                  y1={plotHeight}\r\n                  x2={plotWidth}\r\n                  y2={plotHeight}\r\n                  stroke={axisColor}\r\n                  strokeWidth=\"2\"\r\n                />\r\n                {xTicks.map((tick, i) => (\r\n                  <g key={`x-tick-${i}`}>\r\n                    <line\r\n                      x1={xScale(tick)}\r\n                      y1={plotHeight}\r\n                      x2={xScale(tick)}\r\n                      y2={plotHeight + 5}\r\n                      stroke={axisColor}\r\n                      strokeWidth=\"1\"\r\n                    />\r\n                    <text\r\n                      x={xScale(tick)}\r\n                      y={plotHeight + 20}\r\n                      textAnchor=\"middle\"\r\n                      fill=\"#8a8a8a\"\r\n                      fontSize=\"10\"\r\n                      fontFamily=\"var(--font-family-mono)\"\r\n                    >\r\n                      {formatX(tick)}\r\n                    </text>\r\n                  </g>\r\n                ))}\r\n                \r\n                {/* Y-axis */}\r\n                <line\r\n                  x1={0}\r\n                  y1={0}\r\n                  x2={0}\r\n                  y2={plotHeight}\r\n                  stroke={axisColor}\r\n                  strokeWidth=\"2\"\r\n                />\r\n                {yTicks.map((tick, i) => (\r\n                  <g key={`y-tick-${i}`}>\r\n                    <line\r\n                      x1={0}\r\n                      y1={yScale(tick)}\r\n                      x2={-5}\r\n                      y2={yScale(tick)}\r\n                      stroke={axisColor}\r\n                      strokeWidth=\"1\"\r\n                    />\r\n                    <text\r\n                      x={-10}\r\n                      y={yScale(tick)}\r\n                      textAnchor=\"end\"\r\n                      dominantBaseline=\"middle\"\r\n                      fill=\"#8a8a8a\"\r\n                      fontSize=\"10\"\r\n                      fontFamily=\"var(--font-family-mono)\"\r\n                    >\r\n                      {formatY(tick)}\r\n                    </text>\r\n                  </g>\r\n                ))}\r\n              </g>\r\n            )}\r\n\r\n            {/* Axis labels */}\r\n            {finalShowAxes && (\r\n              <>\r\n                {xLabel && (\r\n                  <text\r\n                    x={plotWidth / 2}\r\n                    y={plotHeight + 50}\r\n                    textAnchor=\"middle\"\r\n                    fill=\"#bdbdbd\"\r\n                    fontSize=\"12\"\r\n                    fontFamily=\"var(--font-family)\"\r\n                    className=\"snake-line-graph__axis-label\"\r\n                  >\r\n                    {xLabel}\r\n                  </text>\r\n                )}\r\n                {yLabel && (\r\n                  <text\r\n                    x={-plotHeight / 2}\r\n                    y={-50}\r\n                    textAnchor=\"middle\"\r\n                    fill=\"#bdbdbd\"\r\n                    fontSize=\"12\"\r\n                    fontFamily=\"var(--font-family)\"\r\n                    transform=\"rotate(-90)\"\r\n                    className=\"snake-line-graph__axis-label\"\r\n                  >\r\n                    {yLabel}\r\n                  </text>\r\n                )}\r\n              </>\r\n            )}\r\n          </g>\r\n        </svg>\r\n\r\n        {/* Legend */}\r\n        {finalShowLegend && series.length > 1 && (\r\n          <div className={`snake-line-graph__legend ${animateLegend ? 'snake-line-graph__legend--animated' : ''}`}>\r\n            {series.map((s, i) => {\r\n              const color = s.color || defaultColors[i % defaultColors.length];\r\n              const isActive = activeSeries === s.name;\r\n              \r\n              return (\r\n                <div\r\n                  key={`legend-${i}`}\r\n                  className={`snake-line-graph__legend-item ${isActive ? 'snake-line-graph__legend-item--active' : ''}`}\r\n                  onClick={() => {\r\n                    if (isInteractive) {\r\n                      setActiveSeries(isActive ? null : s.name);\r\n                    }\r\n                  }}\r\n                  style={{\r\n                    cursor: isInteractive ? 'pointer' : 'default',\r\n                  }}\r\n                >\r\n                  <div\r\n                    className=\"snake-line-graph__legend-color\"\r\n                    style={{ backgroundColor: color }}\r\n                  />\r\n                  <span className=\"snake-line-graph__legend-label\">{s.name}</span>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"snake-line-graph__corner snake-line-graph__corner--bottom-left\" />\r\n      <div className=\"snake-line-graph__corner snake-line-graph__corner--bottom-right\" />\r\n    </div>\r\n  );\r\n};","import React from 'react';\r\nimport './link.css';\r\n\r\nexport interface LinkProps extends React.AnchorHTMLAttributes<HTMLAnchorElement> {\r\n  /** Link variant */\r\n  variant?: 'default' | 'primary' | 'subtle' | 'underline';\r\n  /** Size variant */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** External link indicator */\r\n  external?: boolean;\r\n  /** Disabled state */\r\n  disabled?: boolean;\r\n  /** Show icon before text */\r\n  startIcon?: React.ReactNode;\r\n  /** Show icon after text */\r\n  endIcon?: React.ReactNode;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n  /** Children content */\r\n  children: React.ReactNode;\r\n}\r\n\r\n/** Link component for navigation */\r\nexport const Link: React.FC<LinkProps> = ({\r\n  variant = 'default',\r\n  size = 'medium',\r\n  external = false,\r\n  disabled = false,\r\n  startIcon,\r\n  endIcon,\r\n  className = '',\r\n  children,\r\n  href,\r\n  target,\r\n  rel,\r\n  ...props\r\n}) => {\r\n  const linkClasses = [\r\n    'snake-link',\r\n    `snake-link--${variant}`,\r\n    `snake-link--${size}`,\r\n    disabled && 'snake-link--disabled',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  // Ensure security for external links\r\n  const linkTarget = external ? '_blank' : target;\r\n  const linkRel = external ? `${rel || ''} noopener noreferrer`.trim() : rel;\r\n\r\n  const handleClick = (e: React.MouseEvent<HTMLAnchorElement>) => {\r\n    if (disabled) {\r\n      e.preventDefault();\r\n      return;\r\n    }\r\n    props.onClick?.(e);\r\n  };\r\n\r\n  return (\r\n    <a\r\n      className={linkClasses}\r\n      href={disabled ? undefined : href}\r\n      target={linkTarget}\r\n      rel={linkRel}\r\n      onClick={handleClick}\r\n      aria-disabled={disabled}\r\n      {...props}\r\n    >\r\n      {startIcon && <span className=\"snake-link__icon snake-link__icon--start\">{startIcon}</span>}\r\n      <span className=\"snake-link__text\">{children}</span>\r\n      {endIcon && <span className=\"snake-link__icon snake-link__icon--end\">{endIcon}</span>}\r\n      {external && !endIcon && <span className=\"snake-link__external\">↗</span>}\r\n    </a>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport './list.css';\r\n\r\ninterface ListItem {\r\n  /** The text content of the list item */\r\n  content: React.ReactNode;\r\n  /** Optional subitems */\r\n  subitems?: ListItem[];\r\n  /** Click handler for interactive items */\r\n  onClick?: () => void;\r\n}\r\n\r\nexport interface ListProps {\r\n  /** Array of list items */\r\n  items: ListItem[];\r\n  /** Starting number for the list */\r\n  startNumber?: number;\r\n  /** Number of digits to pad numbers with zeros */\r\n  numberPadding?: number;\r\n  /** Custom number format function */\r\n  formatNumber?: (num: number) => string;\r\n  /** Color for subitem arrows */\r\n  arrowColor?: string;\r\n  /** Show numbers */\r\n  showNumbers?: boolean;\r\n  /** List type */\r\n  type?: 'ordered' | 'unordered';\r\n  /** Size variant */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** Display text in uppercase */\r\n  uppercase?: boolean;\r\n  /** Make top-level items interactive */\r\n  interactive?: boolean;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n}\r\n\r\n/** List component with customizable numbering and styling */\r\nexport const List: React.FC<ListProps> = ({\r\n  items,\r\n  startNumber = 1,\r\n  numberPadding = 3,\r\n  formatNumber,\r\n  arrowColor = 'var(--color-text-primary)',\r\n  showNumbers = true,\r\n  type = 'ordered',\r\n  size = 'medium',\r\n  uppercase = true,\r\n  interactive = false,\r\n  className = '',\r\n}) => {\r\n  const defaultFormatNumber = (num: number) => {\r\n    return num.toString().padStart(numberPadding, '0');\r\n  };\r\n\r\n  const getFormattedNumber = formatNumber || defaultFormatNumber;\r\n\r\n  const renderListItem = (item: ListItem, index: number, parentNumber?: string) => {\r\n    const currentNumber = parentNumber\r\n      ? `${parentNumber}.${getFormattedNumber(index + 1)}`\r\n      : getFormattedNumber(startNumber + index);\r\n\r\n    const isInteractive = interactive && !parentNumber && item.onClick;\r\n\r\n    return (\r\n      <li\r\n        key={index}\r\n        className={`snake-list__item ${isInteractive ? 'snake-list__item--interactive' : ''}`}\r\n      >\r\n        <div\r\n          className=\"snake-list__content\"\r\n          onClick={isInteractive ? item.onClick : undefined}\r\n          role={isInteractive ? 'button' : undefined}\r\n          tabIndex={isInteractive ? 0 : undefined}\r\n          onKeyDown={\r\n            isInteractive\r\n              ? (e) => {\r\n                if (e.key === 'Enter' || e.key === ' ') {\r\n                  e.preventDefault();\r\n                  item.onClick?.();\r\n                }\r\n              }\r\n              : undefined\r\n          }\r\n        >\r\n          <span className=\"snake-list__bullet\">\r\n            <span className=\"snake-list__square\" />\r\n          </span>\r\n          {showNumbers && <span className=\"snake-list__number\">{currentNumber}</span>}\r\n          <span className=\"snake-list__text\">{item.content}</span>\r\n        </div>\r\n        {item.subitems && item.subitems.length > 0 && (\r\n          <ul className=\"snake-list__subitems\">\r\n            {item.subitems.map((subitem, subIndex) => (\r\n              <li key={subIndex} className=\"snake-list__subitem\">\r\n                <div className=\"snake-list__content\">\r\n                  <span className=\"snake-list__arrow\" style={{ color: arrowColor }}>\r\n                    ▶\r\n                  </span>\r\n                  {showNumbers && (\r\n                    <span className=\"snake-list__number\">\r\n                      {currentNumber}.{getFormattedNumber(subIndex + 1)}\r\n                    </span>\r\n                  )}\r\n                  <span className=\"snake-list__text\">{subitem.content}</span>\r\n                </div>\r\n                {subitem.subitems && subitem.subitems.length > 0 && (\r\n                  <ul className=\"snake-list__subitems\">\r\n                    {subitem.subitems.map((subSubitem, subSubIndex) => (\r\n                      <li\r\n                        key={subSubIndex}\r\n                        className=\"snake-list__subitem snake-list__subitem--nested\"\r\n                      >\r\n                        <div className=\"snake-list__content\">\r\n                          <span\r\n                            className=\"snake-list__arrow\"\r\n                            style={{ color: arrowColor, opacity: 0.7 }}\r\n                          >\r\n                            ▶\r\n                          </span>\r\n                          {showNumbers && (\r\n                            <span className=\"snake-list__number\">\r\n                              {currentNumber}.{getFormattedNumber(subIndex + 1)}.\r\n                              {getFormattedNumber(subSubIndex + 1)}\r\n                            </span>\r\n                          )}\r\n                          <span className=\"snake-list__text\">{subSubitem.content}</span>\r\n                        </div>\r\n                      </li>\r\n                    ))}\r\n                  </ul>\r\n                )}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        )}\r\n      </li>\r\n    );\r\n  };\r\n\r\n  const listClasses = [\r\n    'snake-list',\r\n    `snake-list--${type}`,\r\n    `snake-list--${size}`,\r\n    !showNumbers && 'snake-list--no-numbers',\r\n    uppercase && 'snake-list--uppercase',\r\n    interactive && 'snake-list--interactive',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  return <ul className={listClasses}>{items.map((item, index) => renderListItem(item, index))}</ul>;\r\n};\r\n","import React from 'react';\r\nimport './loading.css';\r\n\r\nexport interface LoadingProps {\r\n  /** Loading type */\r\n  type?: 'dots' | 'bars' | 'pulse' | 'grid';\r\n  /** Size variant */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** Color variant */\r\n  variant?: 'default' | 'primary' | 'success' | 'warning' | 'danger' | 'info';\r\n  /** Show text label */\r\n  text?: string;\r\n  /** Full screen overlay */\r\n  fullscreen?: boolean;\r\n  /** Backdrop for inline loading */\r\n  backdrop?: boolean;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n}\r\n\r\n/** Loading component for indicating loading states */\r\nexport const Loading: React.FC<LoadingProps> = ({\r\n  type = 'grid',\r\n  size = 'medium',\r\n  variant = 'default',\r\n  text,\r\n  fullscreen = false,\r\n  backdrop = false,\r\n  className = '',\r\n}) => {\r\n  const loadingClasses = [\r\n    'snake-loading',\r\n    `snake-loading--${type}`,\r\n    `snake-loading--${size}`,\r\n    `snake-loading--${variant}`,\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const renderLoader = () => {\r\n    switch (type) {\r\n      case 'dots':\r\n        return (\r\n          <div className=\"snake-loading__dots\">\r\n            <span className=\"snake-loading__dot\" />\r\n            <span className=\"snake-loading__dot\" />\r\n            <span className=\"snake-loading__dot\" />\r\n          </div>\r\n        );\r\n\r\n      case 'bars':\r\n        return (\r\n          <div className=\"snake-loading__bars\">\r\n            <span className=\"snake-loading__bar\" />\r\n            <span className=\"snake-loading__bar\" />\r\n            <span className=\"snake-loading__bar\" />\r\n            <span className=\"snake-loading__bar\" />\r\n          </div>\r\n        );\r\n\r\n      case 'pulse':\r\n        return (\r\n          <div className=\"snake-loading__pulse\">\r\n            <span className=\"snake-loading__pulse-ring\" />\r\n            <span className=\"snake-loading__pulse-ring\" />\r\n          </div>\r\n        );\r\n\r\n      case 'grid':\r\n        return (\r\n          <div className=\"snake-loading__grid\">\r\n            {[...Array(9)].map((_, i) => (\r\n              <span key={i} className=\"snake-loading__grid-cell\" />\r\n            ))}\r\n          </div>\r\n        );\r\n\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  const content = (\r\n    <div className={loadingClasses}>\r\n      <div className=\"snake-loading__content\">\r\n        {renderLoader()}\r\n        {text && <div className=\"snake-loading__text\">{text}</div>}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  if (fullscreen) {\r\n    return <div className=\"snake-loading__fullscreen\">{content}</div>;\r\n  }\r\n\r\n  if (backdrop) {\r\n    return <div className=\"snake-loading__backdrop\">{content}</div>;\r\n  }\r\n\r\n  return content;\r\n};\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport './menu.css';\r\n\r\ninterface MenuItem {\r\n  id: string;\r\n  label: string;\r\n  icon?: React.ReactNode;\r\n  shortcut?: string;\r\n  disabled?: boolean;\r\n  danger?: boolean;\r\n  divider?: boolean;\r\n  submenu?: MenuItem[];\r\n}\r\n\r\nexport interface MenuProps {\r\n  /** Menu items */\r\n  items: MenuItem[];\r\n  /** Trigger element */\r\n  trigger?: React.ReactNode;\r\n  /** Open state (controlled mode) */\r\n  isOpen?: boolean;\r\n  /** Open state change handler */\r\n  onOpenChange?: (open: boolean) => void;\r\n  /** Menu placement */\r\n  placement?:\r\n    | 'bottom-start'\r\n    | 'bottom-end'\r\n    | 'top-start'\r\n    | 'top-end'\r\n    | 'right-start'\r\n    | 'left-start';\r\n  /** Menu size */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** Click handler */\r\n  onItemClick?: (itemId: string) => void;\r\n  /** Show arrow */\r\n  showArrow?: boolean;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n}\r\n\r\n/** Menu component for dropdown navigation */\r\nexport const Menu: React.FC<MenuProps> = ({\r\n  items,\r\n  trigger,\r\n  isOpen: controlledIsOpen,\r\n  onOpenChange,\r\n  placement = 'bottom-start',\r\n  size = 'medium',\r\n  onItemClick,\r\n  showArrow = false,\r\n  className = '',\r\n}) => {\r\n  const [internalIsOpen, setInternalIsOpen] = useState(false);\r\n  const [activeSubmenu, setActiveSubmenu] = useState<string | null>(null);\r\n  const menuRef = useRef<HTMLDivElement>(null);\r\n  const triggerRef = useRef<HTMLDivElement>(null);\r\n\r\n  const isOpen = controlledIsOpen !== undefined ? controlledIsOpen : internalIsOpen;\r\n  const setIsOpen = (open: boolean) => {\r\n    if (controlledIsOpen === undefined) {\r\n      setInternalIsOpen(open);\r\n    }\r\n    onOpenChange?.(open);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (\r\n        menuRef.current &&\r\n        !menuRef.current.contains(event.target as Node) &&\r\n        triggerRef.current &&\r\n        !triggerRef.current.contains(event.target as Node)\r\n      ) {\r\n        setIsOpen(false);\r\n        setActiveSubmenu(null);\r\n      }\r\n    };\r\n\r\n    const handleEscape = (event: KeyboardEvent) => {\r\n      if (event.key === 'Escape') {\r\n        setIsOpen(false);\r\n        setActiveSubmenu(null);\r\n      }\r\n    };\r\n\r\n    if (isOpen) {\r\n      document.addEventListener('mousedown', handleClickOutside);\r\n      document.addEventListener('keydown', handleEscape);\r\n      return () => {\r\n        document.removeEventListener('mousedown', handleClickOutside);\r\n        document.removeEventListener('keydown', handleEscape);\r\n      };\r\n    }\r\n  }, [isOpen]);\r\n\r\n  const handleTriggerClick = () => {\r\n    setIsOpen(!isOpen);\r\n    if (!isOpen) {\r\n      setActiveSubmenu(null);\r\n    }\r\n  };\r\n\r\n  const handleItemClick = (item: MenuItem) => {\r\n    if (item.disabled || item.divider) return;\r\n\r\n    if (item.submenu) {\r\n      setActiveSubmenu(activeSubmenu === item.id ? null : item.id);\r\n    } else {\r\n      onItemClick?.(item.id);\r\n      setIsOpen(false);\r\n      setActiveSubmenu(null);\r\n    }\r\n  };\r\n\r\n  const renderMenuItem = (item: MenuItem, isSubmenuItem = false) => {\r\n    if (item.divider) {\r\n      return <div key={item.id} className=\"snake-menu__divider\" />;\r\n    }\r\n\r\n    const itemClasses = [\r\n      'snake-menu__item',\r\n      item.disabled && 'snake-menu__item--disabled',\r\n      item.danger && 'snake-menu__item--danger',\r\n      item.submenu && 'snake-menu__item--has-submenu',\r\n      activeSubmenu === item.id && 'snake-menu__item--submenu-open',\r\n    ]\r\n      .filter(Boolean)\r\n      .join(' ');\r\n\r\n    return (\r\n      <div key={item.id} className=\"snake-menu__item-wrapper\">\r\n        <button\r\n          className={itemClasses}\r\n          onClick={() => handleItemClick(item)}\r\n          disabled={item.disabled}\r\n        >\r\n          {item.icon && <span className=\"snake-menu__item-icon\">{item.icon}</span>}\r\n          <span className=\"snake-menu__item-label\">{item.label}</span>\r\n          {item.shortcut && <span className=\"snake-menu__item-shortcut\">{item.shortcut}</span>}\r\n          {item.submenu && <span className=\"snake-menu__item-arrow\">▶</span>}\r\n        </button>\r\n\r\n        {item.submenu && activeSubmenu === item.id && (\r\n          <div\r\n            className={`snake-menu__submenu snake-menu__submenu--${isSubmenuItem ? 'nested' : 'root'}`}\r\n          >\r\n            {item.submenu.map((subItem) => renderMenuItem(subItem, true))}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const menuClasses = [\r\n    'snake-menu',\r\n    `snake-menu--${size}`,\r\n    `snake-menu--${placement}`,\r\n    isOpen && 'snake-menu--open',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  return (\r\n    <div className=\"snake-menu__container\">\r\n      {trigger && (\r\n        <div ref={triggerRef} className=\"snake-menu__trigger\" onClick={handleTriggerClick}>\r\n          {trigger}\r\n        </div>\r\n      )}\r\n\r\n      {isOpen && (\r\n        <div ref={menuRef} className={menuClasses} role=\"menu\">\r\n          {showArrow && <div className=\"snake-menu__arrow\" />}\r\n          <div className=\"snake-menu__content\">{items.map((item) => renderMenuItem(item))}</div>\r\n          <div className=\"snake-menu__corner snake-menu__corner--top-left\" />\r\n          <div className=\"snake-menu__corner snake-menu__corner--top-right\" />\r\n          <div className=\"snake-menu__corner snake-menu__corner--bottom-left\" />\r\n          <div className=\"snake-menu__corner snake-menu__corner--bottom-right\" />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useRef } from 'react';\r\nimport './modal.css';\r\n\r\n// Icon component for Times from pixel-icon-library\r\nconst TimesIcon = ({ className = '' }: { className?: string }) => (\r\n  <svg className={className} viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\">\r\n    <polygon points=\"15 13 16 13 16 14 17 14 17 15 18 15 18 16 19 16 19 17 20 17 20 18 21 18 21 19 22 19 22 20 21 20 21 21 20 21 20 22 19 22 19 21 18 21 18 20 17 20 17 19 16 19 16 18 15 18 15 17 14 17 14 16 13 16 13 15 11 15 11 16 10 16 10 17 9 17 9 18 8 18 8 19 7 19 7 20 6 20 6 21 5 21 5 22 4 22 4 21 3 21 3 20 2 20 2 19 3 19 3 18 4 18 4 17 5 17 5 16 6 16 6 15 7 15 7 14 8 14 8 13 9 13 9 11 8 11 8 10 7 10 7 9 6 9 6 8 5 8 5 7 4 7 4 6 3 6 3 5 2 5 2 4 3 4 3 3 4 3 4 2 5 2 5 3 6 3 6 4 7 4 7 5 8 5 8 6 9 6 9 7 10 7 10 8 11 8 11 9 13 9 13 8 14 8 14 7 15 7 15 6 16 6 16 5 17 5 17 4 18 4 18 3 19 3 19 2 20 2 20 3 21 3 21 4 22 4 22 5 21 5 21 6 20 6 20 7 19 7 19 8 18 8 18 9 17 9 17 10 16 10 16 11 15 11 15 13\"/>\r\n  </svg>\r\n);\r\n\r\nexport interface ModalProps {\r\n  /** Modal visibility */\r\n  isOpen: boolean;\r\n  /** Close handler */\r\n  onClose: () => void;\r\n  /** Modal title */\r\n  title?: string;\r\n  /** Modal content */\r\n  children: React.ReactNode;\r\n  /** Footer content */\r\n  footer?: React.ReactNode;\r\n  /** Size variant */\r\n  size?: 'small' | 'medium' | 'large' | 'full';\r\n  /** Close on overlay click */\r\n  closeOnOverlayClick?: boolean;\r\n  /** Show close button */\r\n  showCloseButton?: boolean;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n}\r\n\r\n/** Modal/Dialog component with dark theme styling */\r\nexport const Modal: React.FC<ModalProps> = ({\r\n  isOpen,\r\n  onClose,\r\n  title,\r\n  children,\r\n  footer,\r\n  size = 'medium',\r\n  closeOnOverlayClick = true,\r\n  showCloseButton = true,\r\n  className = '',\r\n}) => {\r\n  const modalRef = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    const handleEscape = (e: KeyboardEvent) => {\r\n      if (e.key === 'Escape' && isOpen) {\r\n        onClose();\r\n      }\r\n    };\r\n\r\n    if (isOpen) {\r\n      document.addEventListener('keydown', handleEscape);\r\n      document.body.style.overflow = 'hidden';\r\n    }\r\n\r\n    return () => {\r\n      document.removeEventListener('keydown', handleEscape);\r\n      document.body.style.overflow = '';\r\n    };\r\n  }, [isOpen, onClose]);\r\n\r\n  if (!isOpen) return null;\r\n\r\n  const handleOverlayClick = (e: React.MouseEvent) => {\r\n    if (closeOnOverlayClick && e.target === e.currentTarget) {\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  const modalClasses = ['snake-modal', `snake-modal--${size}`, className].filter(Boolean).join(' ');\r\n\r\n  return (\r\n    <div className=\"snake-modal-overlay\" onClick={handleOverlayClick}>\r\n      <div className={modalClasses} ref={modalRef}>\r\n        {(title || showCloseButton) && (\r\n          <div className=\"snake-modal__header\">\r\n            {title && <h2 className=\"snake-modal__title\">{title}</h2>}\r\n            {showCloseButton && (\r\n              <button\r\n                type=\"button\"\r\n                className=\"snake-modal__close\"\r\n                onClick={onClose}\r\n                aria-label=\"Close modal\"\r\n              >\r\n                <TimesIcon />\r\n              </button>\r\n            )}\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"snake-modal__content\">{children}</div>\r\n\r\n        {footer && <div className=\"snake-modal__footer\">{footer}</div>}\r\n\r\n        <div className=\"snake-modal__corner snake-modal__corner--top-left\" />\r\n        <div className=\"snake-modal__corner snake-modal__corner--top-right\" />\r\n        <div className=\"snake-modal__corner snake-modal__corner--bottom-left\" />\r\n        <div className=\"snake-modal__corner snake-modal__corner--bottom-right\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useRef, useState, useEffect } from 'react';\r\nimport './pininput.css';\r\n\r\nexport interface PinInputProps {\r\n  /** Number of input fields */\r\n  length?: number;\r\n  /** Callback when all fields are filled */\r\n  onComplete?: (value: string) => void;\r\n  /** Callback when value changes */\r\n  onChange?: (value: string) => void;\r\n  /** Type of input */\r\n  type?: 'numeric' | 'alphanumeric';\r\n  /** Whether to mask the input */\r\n  masked?: boolean;\r\n  /** Size variant */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** Whether the input is disabled */\r\n  disabled?: boolean;\r\n  /** Error state */\r\n  error?: boolean;\r\n  /** Success state */\r\n  success?: boolean;\r\n  /** Auto focus first input */\r\n  autoFocus?: boolean;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n  /** Placeholder for each input */\r\n  placeholder?: string;\r\n  /** Initial value */\r\n  value?: string;\r\n}\r\n\r\n/** Pin Input component for OTP, verification codes, etc. */\r\nexport const PinInput: React.FC<PinInputProps> = ({\r\n  length = 4,\r\n  onComplete,\r\n  onChange,\r\n  type = 'numeric',\r\n  masked = false,\r\n  size = 'medium',\r\n  disabled = false,\r\n  error = false,\r\n  success = false,\r\n  autoFocus = false,\r\n  className = '',\r\n  placeholder = '○',\r\n  value = '',\r\n}) => {\r\n  const [values, setValues] = useState<string[]>(() => {\r\n    const initial = value.split('').slice(0, length);\r\n    return Array(length).fill('').map((_, i) => initial[i] || '');\r\n  });\r\n  \r\n  const inputRefs = useRef<(HTMLInputElement | null)[]>([]);\r\n\r\n  useEffect(() => {\r\n    if (value !== undefined) {\r\n      const newValues = value.split('').slice(0, length);\r\n      setValues(Array(length).fill('').map((_, i) => newValues[i] || ''));\r\n    }\r\n  }, [value, length]);\r\n\r\n  useEffect(() => {\r\n    const combined = values.join('');\r\n    onChange?.(combined);\r\n    \r\n    if (combined.length === length && values.every(v => v !== '')) {\r\n      onComplete?.(combined);\r\n    }\r\n  }, [values, length, onChange, onComplete]);\r\n\r\n  const handleChange = (index: number, value: string) => {\r\n    if (disabled) return;\r\n\r\n    // Handle paste\r\n    if (value.length > 1) {\r\n      const pastedValues = value.split('').slice(0, length);\r\n      const newValues = [...values];\r\n      \r\n      pastedValues.forEach((char, i) => {\r\n        if (index + i < length) {\r\n          if (type === 'numeric' && !/^\\d$/.test(char)) return;\r\n          if (type === 'alphanumeric' && !/^[a-zA-Z0-9]$/.test(char)) return;\r\n          newValues[index + i] = char;\r\n        }\r\n      });\r\n      \r\n      setValues(newValues);\r\n      \r\n      // Focus last filled input or next empty one\r\n      const lastFilledIndex = newValues.findLastIndex(v => v !== '');\r\n      const nextIndex = Math.min(lastFilledIndex + 1, length - 1);\r\n      inputRefs.current[nextIndex]?.focus();\r\n      return;\r\n    }\r\n\r\n    // Validate input\r\n    if (value !== '') {\r\n      if (type === 'numeric' && !/^\\d$/.test(value)) return;\r\n      if (type === 'alphanumeric' && !/^[a-zA-Z0-9]$/.test(value)) return;\r\n    }\r\n\r\n    const newValues = [...values];\r\n    newValues[index] = value;\r\n    setValues(newValues);\r\n\r\n    // Auto-focus next input\r\n    if (value !== '' && index < length - 1) {\r\n      inputRefs.current[index + 1]?.focus();\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = (index: number, e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (disabled) return;\r\n\r\n    // Handle backspace\r\n    if (e.key === 'Backspace') {\r\n      if (values[index] === '' && index > 0) {\r\n        // If current field is empty, go to previous field\r\n        inputRefs.current[index - 1]?.focus();\r\n      } else {\r\n        // Clear current field\r\n        const newValues = [...values];\r\n        newValues[index] = '';\r\n        setValues(newValues);\r\n      }\r\n    }\r\n\r\n    // Handle arrow keys\r\n    if (e.key === 'ArrowLeft' && index > 0) {\r\n      inputRefs.current[index - 1]?.focus();\r\n    }\r\n    if (e.key === 'ArrowRight' && index < length - 1) {\r\n      inputRefs.current[index + 1]?.focus();\r\n    }\r\n\r\n    // Handle delete\r\n    if (e.key === 'Delete') {\r\n      const newValues = [...values];\r\n      newValues[index] = '';\r\n      setValues(newValues);\r\n    }\r\n  };\r\n\r\n  const handleFocus = (index: number) => {\r\n    inputRefs.current[index]?.select();\r\n  };\r\n\r\n  const handlePaste = (e: React.ClipboardEvent) => {\r\n    e.preventDefault();\r\n    const pastedData = e.clipboardData.getData('text');\r\n    const firstEmptyIndex = values.findIndex(v => v === '');\r\n    const startIndex = firstEmptyIndex === -1 ? 0 : firstEmptyIndex;\r\n    handleChange(startIndex, pastedData);\r\n  };\r\n\r\n  const classes = [\r\n    'snake-pin-input',\r\n    `snake-pin-input--${size}`,\r\n    error && 'snake-pin-input--error',\r\n    success && 'snake-pin-input--success',\r\n    disabled && 'snake-pin-input--disabled',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  return (\r\n    <div className={classes}>\r\n      {Array(length)\r\n        .fill(0)\r\n        .map((_, index) => (\r\n          <input\r\n            key={index}\r\n            ref={(el) => (inputRefs.current[index] = el)}\r\n            type={masked ? 'password' : 'text'}\r\n            inputMode={type === 'numeric' ? 'numeric' : 'text'}\r\n            className={[\r\n              'snake-pin-input__field',\r\n              values[index] && 'snake-pin-input__field--filled',\r\n            ]\r\n              .filter(Boolean)\r\n              .join(' ')}\r\n            value={masked && values[index] ? '●' : values[index]}\r\n            onChange={(e) => handleChange(index, e.target.value)}\r\n            onKeyDown={(e) => handleKeyDown(index, e)}\r\n            onFocus={() => handleFocus(index)}\r\n            onPaste={handlePaste}\r\n            disabled={disabled}\r\n            maxLength={1}\r\n            autoFocus={autoFocus && index === 0}\r\n            placeholder={placeholder}\r\n            aria-label={`Pin input ${index + 1} of ${length}`}\r\n          />\r\n        ))}\r\n    </div>\r\n  );\r\n};","import React from 'react';\r\nimport './progress.css';\r\n\r\nexport interface ProgressProps {\r\n  /** Current progress value (0-100) */\r\n  value?: number;\r\n  /** Maximum value */\r\n  max?: number;\r\n  /** Size variant */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** Color variant */\r\n  variant?: 'default' | 'primary' | 'success' | 'warning' | 'danger' | 'info' | 'cyber';\r\n  /** Show percentage label */\r\n  showLabel?: boolean;\r\n  /** Label position */\r\n  labelPosition?: 'outside' | 'top' | 'bottom';\r\n  /** Progress type */\r\n  type?: 'linear' | 'striped' | 'animated' | 'segmented';\r\n  /** Number of segments for segmented type */\r\n  segments?: number;\r\n  /** Custom label text */\r\n  label?: string;\r\n  /** Format value function */\r\n  formatValue?: (value: number, max: number) => string;\r\n  /** Indeterminate state */\r\n  indeterminate?: boolean;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n  /** ARIA label */\r\n  ariaLabel?: string;\r\n}\r\n\r\n/** Progress component for displaying progress indicators */\r\nexport const Progress: React.FC<ProgressProps> = ({\r\n  value = 0,\r\n  max = 100,\r\n  size = 'medium',\r\n  variant = 'default',\r\n  showLabel = false,\r\n  labelPosition = 'bottom',\r\n  type = 'linear',\r\n  segments = 10,\r\n  label,\r\n  formatValue = (val, max) => `${Math.round((val / max) * 100)}%`,\r\n  indeterminate = false,\r\n  className = '',\r\n  ariaLabel,\r\n}) => {\r\n  const percentage = Math.min(100, Math.max(0, (value / max) * 100));\r\n\r\n  const progressClasses = [\r\n    'snake-progress',\r\n    `snake-progress--${size}`,\r\n    `snake-progress--${variant}`,\r\n    `snake-progress--${type}`,\r\n    indeterminate && 'snake-progress--indeterminate',\r\n    showLabel && `snake-progress--label-${labelPosition}`,\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const renderSegments = () => {\r\n    if (type !== 'segmented') return null;\r\n\r\n    const segmentElements = [];\r\n    const filledSegments = Math.floor((percentage / 100) * segments);\r\n\r\n    for (let i = 0; i < segments; i++) {\r\n      segmentElements.push(\r\n        <div\r\n          key={i}\r\n          className={`snake-progress__segment ${i < filledSegments ? 'snake-progress__segment--filled' : ''}`}\r\n        />,\r\n      );\r\n    }\r\n\r\n    return segmentElements;\r\n  };\r\n\r\n  const renderProgressBar = () => {\r\n    if (type === 'segmented') {\r\n      return <div className=\"snake-progress__segments\">{renderSegments()}</div>;\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <div\r\n          className=\"snake-progress__fill\"\r\n          style={!indeterminate ? { width: `${percentage}%` } : undefined}\r\n        />\r\n        {type === 'striped' && <div className=\"snake-progress__stripes\" />}\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className={progressClasses}>\r\n      {showLabel && labelPosition === 'top' && (\r\n        <div className=\"snake-progress__label snake-progress__label--top\">\r\n          {label || formatValue(value, max)}\r\n        </div>\r\n      )}\r\n\r\n      <div\r\n        className=\"snake-progress__container\"\r\n        role=\"progressbar\"\r\n        aria-valuenow={!indeterminate ? value : undefined}\r\n        aria-valuemin={0}\r\n        aria-valuemax={max}\r\n        aria-label={ariaLabel || 'Progress'}\r\n      >\r\n        <div className=\"snake-progress__track\">{renderProgressBar()}</div>\r\n\r\n        {showLabel && labelPosition === 'outside' && (\r\n          <span className=\"snake-progress__label snake-progress__label--outside\">\r\n            {label || formatValue(value, max)}\r\n          </span>\r\n        )}\r\n\r\n        <div className=\"snake-progress__corner snake-progress__corner--top-left\" />\r\n        <div className=\"snake-progress__corner snake-progress__corner--top-right\" />\r\n        <div className=\"snake-progress__corner snake-progress__corner--bottom-left\" />\r\n        <div className=\"snake-progress__corner snake-progress__corner--bottom-right\" />\r\n      </div>\r\n\r\n      {showLabel && labelPosition === 'bottom' && (\r\n        <div className=\"snake-progress__label snake-progress__label--bottom\">\r\n          {label || formatValue(value, max)}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport './radiobutton.css';\r\n\r\ninterface RadioOption {\r\n  value: string;\r\n  label: string;\r\n  disabled?: boolean;\r\n  helperText?: string;\r\n}\r\n\r\nexport interface RadioButtonProps {\r\n  /** Radio options */\r\n  options: RadioOption[];\r\n  /** Selected value */\r\n  value?: string;\r\n  /** Change handler */\r\n  onChange?: (value: string) => void;\r\n  /** Group name */\r\n  name: string;\r\n  /** Group label */\r\n  label?: string;\r\n  /** Layout direction */\r\n  direction?: 'horizontal' | 'vertical';\r\n  /** Size variant */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** Visual variant */\r\n  variant?: 'default' | 'success' | 'warning' | 'danger' | 'info';\r\n  /** Error message */\r\n  error?: string;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n}\r\n\r\n/** RadioButton component with dark theme styling */\r\nexport const RadioButton: React.FC<RadioButtonProps> = ({\r\n  options,\r\n  value,\r\n  onChange,\r\n  name,\r\n  label,\r\n  direction = 'vertical',\r\n  size = 'medium',\r\n  variant = 'default',\r\n  error,\r\n  className = '',\r\n}) => {\r\n  const handleChange = (optionValue: string) => {\r\n    onChange?.(optionValue);\r\n  };\r\n\r\n  const groupClasses = [\r\n    'snake-radio-group',\r\n    `snake-radio-group--${direction}`,\r\n    `snake-radio-group--${size}`,\r\n    error && 'snake-radio-group--error',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  return (\r\n    <div\r\n      className={groupClasses}\r\n      role=\"radiogroup\"\r\n      aria-labelledby={label ? `${name}-label` : undefined}\r\n    >\r\n      {label && (\r\n        <div className=\"snake-radio-group__label\" id={`${name}-label`}>\r\n          {label}\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"snake-radio-group__options\">\r\n        {options.map((option) => {\r\n          const isChecked = value === option.value;\r\n          const radioClasses = [\r\n            'snake-radio',\r\n            `snake-radio--${variant}`,\r\n            isChecked && 'snake-radio--checked',\r\n            option.disabled && 'snake-radio--disabled',\r\n          ]\r\n            .filter(Boolean)\r\n            .join(' ');\r\n\r\n          return (\r\n            <label key={option.value} className={radioClasses}>\r\n              <input\r\n                type=\"radio\"\r\n                name={name}\r\n                value={option.value}\r\n                checked={isChecked}\r\n                onChange={() => handleChange(option.value)}\r\n                disabled={option.disabled}\r\n                className=\"snake-radio__input\"\r\n              />\r\n              <span className=\"snake-radio__control\">\r\n                <span className=\"snake-radio__dot\" />\r\n              </span>\r\n              <div className=\"snake-radio__label-container\">\r\n                <span className=\"snake-radio__label\">{option.label}</span>\r\n                {option.helperText && (\r\n                  <span className=\"snake-radio__helper-text\">{option.helperText}</span>\r\n                )}\r\n              </div>\r\n            </label>\r\n          );\r\n        })}\r\n      </div>\r\n\r\n      {error && <span className=\"snake-radio-group__error\">{error}</span>}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useMemo, useState, useEffect, useRef } from 'react';\r\nimport './ridgelinegraph.css';\r\n\r\ninterface DataSeries {\r\n  label: string;\r\n  values: number[];\r\n  color?: string;\r\n}\r\n\r\nexport interface RidgelineGraphProps {\r\n  /** Array of data series */\r\n  data: DataSeries[];\r\n  /** Width of the graph (defaults to 100% to fill parent) */\r\n  width?: number | string;\r\n  /** Height of the graph (defaults to 100% to fill parent) */\r\n  height?: number | string;\r\n  /** Height of each ridge */\r\n  ridgeHeight?: number;\r\n  /** Overlap between ridges (0-1) */\r\n  overlap?: number;\r\n  /** Curve type */\r\n  curve?: 'linear' | 'smooth' | 'step';\r\n  /** Colors for ridges */\r\n  colors?: string[];\r\n  /** Show axes */\r\n  showAxes?: boolean;\r\n  /** Show grid */\r\n  showGrid?: boolean;\r\n  /** Show labels */\r\n  showLabels?: boolean;\r\n  /** Show values on hover */\r\n  showValues?: boolean;\r\n  /** Animation on mount */\r\n  animate?: boolean;\r\n  /** Fill ridges */\r\n  fill?: boolean;\r\n  /** Fill opacity */\r\n  fillOpacity?: number;\r\n  /** Stroke width */\r\n  strokeWidth?: number;\r\n  /** Grid color */\r\n  gridColor?: string;\r\n  /** Size variant */\r\n  variant?: 'default' | 'minimal' | 'detailed' | 'interactive' | 'scrolling';\r\n  /** X-axis labels */\r\n  xLabels?: string[];\r\n  /** X-axis label */\r\n  xLabel?: string;\r\n  /** Y-axis label */\r\n  yLabel?: string;\r\n  /** Title */\r\n  title?: string;\r\n  /** Maximum number of ridges for scrolling variant */\r\n  maxRidges?: number;\r\n  /** Update interval for scrolling variant (ms) */\r\n  scrollInterval?: number;\r\n  /** Generate new data function for scrolling variant */\r\n  generateNewData?: () => DataSeries;\r\n  /** Callback when a ridge is clicked (for interactive variant) */\r\n  onRidgeClick?: (series: DataSeries, index: number) => void;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n}\r\n\r\n/** RidgelineGraph component for overlapping distribution visualization */\r\nexport const RidgelineGraph: React.FC<RidgelineGraphProps> = ({\r\n  data: initialData,\r\n  width = '100%',\r\n  height = '100%',\r\n  ridgeHeight = 60,\r\n  overlap = 0.6,\r\n  curve = 'smooth',\r\n  colors = ['#8b2c2c', '#6b3030', '#4a4a4a', '#7a7a7a', '#5a5a5a'],\r\n  showAxes = true,\r\n  showGrid = false,\r\n  showLabels = true,\r\n  showValues = false,\r\n  animate = true,\r\n  fill = true,\r\n  fillOpacity = 0.7,\r\n  strokeWidth = 2,\r\n  gridColor = '#3a3a3a',\r\n  variant = 'default',\r\n  xLabels,\r\n  xLabel,\r\n  yLabel,\r\n  title,\r\n  maxRidges = 10,\r\n  scrollInterval = 2000,\r\n  generateNewData,\r\n  onRidgeClick,\r\n  className = '',\r\n}) => {\r\n  // State for interactive variant\r\n  const [activeRidge, setActiveRidge] = useState<string | null>(null);\r\n  const [hoveredRidge, setHoveredRidge] = useState<string | null>(null);\r\n  const [hoveredPoint, setHoveredPoint] = useState<{ x: number; y: number; value: number } | null>(null);\r\n  \r\n  // State for scrolling variant\r\n  // Initialize with placeholders if scrolling variant\r\n  const initializeScrollingData = () => {\r\n    if (variant === 'scrolling') {\r\n      const placeholders: DataSeries[] = [];\r\n      for (let i = 0; i < maxRidges; i++) {\r\n        placeholders.push({\r\n          label: `Placeholder ${i}`,\r\n          values: new Array(20).fill(0),\r\n        });\r\n      }\r\n      return placeholders;\r\n    }\r\n    return initialData;\r\n  };\r\n  \r\n  const [scrollingData, setScrollingData] = useState<DataSeries[]>(initializeScrollingData());\r\n  const scrollIntervalRef = useRef<NodeJS.Timeout | null>(null);\r\n  const dataCountRef = useRef(0);\r\n\r\n  // Handle scrolling variant\r\n  useEffect(() => {\r\n    if (variant === 'scrolling' && generateNewData) {\r\n      // Start adding real data immediately\r\n      const addNewData = () => {\r\n        setScrollingData(prevData => {\r\n          const newData = [...prevData];\r\n          const newItem = generateNewData();\r\n          \r\n          // Add real data at the top\r\n          newData.unshift(newItem);\r\n          \r\n          // Always maintain exactly maxRidges items\r\n          if (newData.length > maxRidges) {\r\n            newData.pop();\r\n          }\r\n          \r\n          dataCountRef.current++;\r\n          return newData;\r\n        });\r\n      };\r\n      \r\n      // Add first real data item immediately\r\n      if (dataCountRef.current === 0) {\r\n        addNewData();\r\n      }\r\n      \r\n      // Then continue adding at intervals\r\n      scrollIntervalRef.current = setInterval(addNewData, scrollInterval);\r\n\r\n      return () => {\r\n        if (scrollIntervalRef.current) {\r\n          clearInterval(scrollIntervalRef.current);\r\n        }\r\n      };\r\n    }\r\n  }, [variant, generateNewData, scrollInterval, maxRidges]);\r\n\r\n  const data = variant === 'scrolling' ? scrollingData : initialData;\r\n\r\n  // Fixed SVG dimensions for consistent viewBox\r\n  const svgWidth = 600;\r\n  const svgHeight = 400;\r\n  \r\n  // Margins for axes and labels\r\n  const margin = { top: 40, right: 40, bottom: 80, left: 100 };\r\n  const plotWidth = svgWidth - margin.left - margin.right;\r\n  const plotHeight = svgHeight - margin.top - margin.bottom;\r\n\r\n  // Calculate dimensions\r\n  const effectiveRidgeHeight = ridgeHeight * (1 - overlap);\r\n  const displayRidges = variant === 'scrolling' ? maxRidges : data.length;\r\n  // For scrolling variant, use full plot height; otherwise calculate based on data\r\n  const totalHeight = variant === 'scrolling' \r\n    ? plotHeight - 40 // Leave some space for axis\r\n    : displayRidges * effectiveRidgeHeight + ridgeHeight;\r\n\r\n  // Process data for rendering\r\n  const processedData = useMemo(() => {\r\n    // For scrolling variant, always process exactly maxRidges items\r\n    const dataToProcess = variant === 'scrolling' ? data : data;\r\n    \r\n    // For scrolling, calculate ridge height based on available space\r\n    const scrollingRidgeHeight = variant === 'scrolling' \r\n      ? totalHeight / maxRidges * (1 - overlap * 0.5)\r\n      : ridgeHeight;\r\n    const scrollingEffectiveHeight = variant === 'scrolling'\r\n      ? totalHeight / maxRidges\r\n      : effectiveRidgeHeight;\r\n    \r\n    return dataToProcess.map((series, seriesIndex) => {\r\n      const maxValue = Math.max(...series.values);\r\n      const minValue = Math.min(...series.values);\r\n      const range = maxValue - minValue || 1;\r\n      \r\n      // Check if this is a placeholder (all zeros)\r\n      const isPlaceholder = series.values.every(v => v === 0);\r\n      \r\n      // Normalize values to ridge height\r\n      const normalizedValues = series.values.map(value => \r\n        isPlaceholder ? 0 : ((value - minValue) / range) * scrollingRidgeHeight\r\n      );\r\n      \r\n      // Calculate y offset for this ridge\r\n      const yOffset = seriesIndex * scrollingEffectiveHeight;\r\n      \r\n      // Generate path points\r\n      const points = normalizedValues.map((value, i) => ({\r\n        x: (i / (normalizedValues.length - 1)) * plotWidth,\r\n        y: yOffset + scrollingRidgeHeight - value,\r\n        originalValue: series.values[i],\r\n      }));\r\n      \r\n      return {\r\n        ...series,\r\n        points,\r\n        yOffset,\r\n        color: series.color || colors[seriesIndex % colors.length],\r\n        isPlaceholder,\r\n      };\r\n    });\r\n  }, [data, ridgeHeight, effectiveRidgeHeight, plotWidth, colors, variant, maxRidges, totalHeight, overlap]);\r\n\r\n  // Generate path for ridge\r\n  const generatePath = (points: any[], yOffset: number, closed: boolean = false) => {\r\n    if (points.length === 0) return '';\r\n    \r\n    let path = '';\r\n    \r\n    if (curve === 'smooth') {\r\n      // Cubic bezier curve\r\n      path = points.map((point, i) => {\r\n        if (i === 0) return `M ${point.x} ${point.y}`;\r\n        \r\n        const prev = points[i - 1];\r\n        const cpx1 = prev.x + (point.x - prev.x) / 3;\r\n        const cpy1 = prev.y;\r\n        const cpx2 = prev.x + 2 * (point.x - prev.x) / 3;\r\n        const cpy2 = point.y;\r\n        \r\n        return `C ${cpx1} ${cpy1}, ${cpx2} ${cpy2}, ${point.x} ${point.y}`;\r\n      }).join(' ');\r\n    } else if (curve === 'step') {\r\n      path = points.map((point, i) => {\r\n        if (i === 0) return `M ${point.x} ${point.y}`;\r\n        const prev = points[i - 1];\r\n        return `L ${point.x} ${prev.y} L ${point.x} ${point.y}`;\r\n      }).join(' ');\r\n    } else {\r\n      // Linear\r\n      path = points.map((point, i) => \r\n        `${i === 0 ? 'M' : 'L'} ${point.x} ${point.y}`\r\n      ).join(' ');\r\n    }\r\n    \r\n    if (closed && fill) {\r\n      const lastPoint = points[points.length - 1];\r\n      const firstPoint = points[0];\r\n      const baseY = yOffset + ridgeHeight;\r\n      path += ` L ${lastPoint.x} ${baseY} L ${firstPoint.x} ${baseY} Z`;\r\n    }\r\n    \r\n    return path;\r\n  };\r\n\r\n  const classes = [\r\n    'snake-ridgeline-graph',\r\n    `snake-ridgeline-graph--${variant}`,\r\n    animate && 'snake-ridgeline-graph--animated',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const variantStyles = {\r\n    minimal: {\r\n      showAxes: false,\r\n      showGrid: false,\r\n      showLabels: false,\r\n      strokeWidth: 1,\r\n    },\r\n    detailed: {\r\n      showAxes: true,\r\n      showGrid: true,\r\n      showLabels: true,\r\n      showValues: true,\r\n      strokeWidth: 2,\r\n    },\r\n    interactive: {\r\n      showAxes: true,\r\n      showLabels: true,\r\n      showValues: true,\r\n    },\r\n    scrolling: {\r\n      showAxes: true,\r\n      showLabels: true,\r\n      animate: true,\r\n    },\r\n  };\r\n\r\n  const variantProps = variant !== 'default' ? variantStyles[variant] || {} : {};\r\n  const finalShowAxes = variantProps.showAxes ?? showAxes;\r\n  const finalShowGrid = variantProps.showGrid ?? showGrid;\r\n  const finalShowLabels = variantProps.showLabels ?? showLabels;\r\n  const finalShowValues = variantProps.showValues ?? showValues;\r\n  const finalStrokeWidth = variantProps.strokeWidth ?? strokeWidth;\r\n\r\n  const isInteractive = variant === 'interactive';\r\n\r\n  // Generate x-axis ticks\r\n  const xTicks = useMemo(() => {\r\n    if (!data[0]) return [];\r\n    const tickCount = Math.min(10, data[0].values.length);\r\n    const step = Math.floor(data[0].values.length / tickCount);\r\n    return Array.from({ length: tickCount }, (_, i) => i * step);\r\n  }, [data]);\r\n\r\n  return (\r\n    <div className={classes}>\r\n      <div className=\"snake-ridgeline-graph__corner snake-ridgeline-graph__corner--top-left\" />\r\n      <div className=\"snake-ridgeline-graph__corner snake-ridgeline-graph__corner--top-right\" />\r\n      \r\n      <div className=\"snake-ridgeline-graph__container\">\r\n        {title && (\r\n          <div className=\"snake-ridgeline-graph__title\">{title}</div>\r\n        )}\r\n        \r\n        <svg\r\n          width={width}\r\n          height={height}\r\n          viewBox={`0 0 ${svgWidth} ${svgHeight}`}\r\n          className=\"snake-ridgeline-graph__svg\"\r\n          preserveAspectRatio=\"xMidYMid meet\"\r\n        >\r\n          <defs>\r\n            {/* Gradient definitions for fill */}\r\n            {processedData.map((series, i) => (\r\n              <linearGradient key={`gradient-${i}`} id={`ridge-gradient-${i}`} x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\r\n                <stop offset=\"0%\" stopColor={series.color} stopOpacity={fillOpacity} />\r\n                <stop offset=\"100%\" stopColor={series.color} stopOpacity={fillOpacity * 0.3} />\r\n              </linearGradient>\r\n            ))}\r\n          </defs>\r\n          \r\n          <g transform={`translate(${margin.left}, ${margin.top})`}>\r\n            {/* Grid */}\r\n            {finalShowGrid && (\r\n              <g className=\"snake-ridgeline-graph__grid\">\r\n                {xTicks.map((tick, i) => {\r\n                  const x = (tick / (data[0].values.length - 1)) * plotWidth;\r\n                  return (\r\n                    <line\r\n                      key={`grid-${i}`}\r\n                      x1={x}\r\n                      y1={0}\r\n                      x2={x}\r\n                      y2={totalHeight}\r\n                      stroke={gridColor}\r\n                      strokeWidth=\"1\"\r\n                      strokeOpacity=\"0.3\"\r\n                      strokeDasharray=\"2 4\"\r\n                    />\r\n                  );\r\n                })}\r\n              </g>\r\n            )}\r\n\r\n            {/* Ridges */}\r\n            <g className=\"snake-ridgeline-graph__ridges\">\r\n              {processedData.map((series, i) => {\r\n                const isActive = activeRidge === series.label;\r\n                const isHovered = hoveredRidge === series.label;\r\n                const isDimmed = isInteractive && activeRidge && !isActive;\r\n                \r\n                return (\r\n                  <g \r\n                    key={`ridge-${i}`}\r\n                    className={`snake-ridgeline-graph__ridge ${isActive ? 'snake-ridgeline-graph__ridge--active' : ''} ${series.isPlaceholder ? 'snake-ridgeline-graph__ridge--placeholder' : ''}`}\r\n                    style={{\r\n                      opacity: isDimmed ? 0.3 : 1,\r\n                      transition: 'all 0.3s ease',\r\n                    }}\r\n                  >\r\n                    {/* Fill area - only show if not placeholder */}\r\n                    {fill && !series.isPlaceholder && (\r\n                      <path\r\n                        d={generatePath(series.points, series.yOffset, true)}\r\n                        fill={`url(#ridge-gradient-${i})`}\r\n                        stroke=\"none\"\r\n                        className=\"snake-ridgeline-graph__ridge-fill\"\r\n                        style={{\r\n                          cursor: isInteractive ? 'pointer' : 'default',\r\n                        }}\r\n                        onClick={() => {\r\n                          if (isInteractive) {\r\n                            const newActive = isActive ? null : series.label;\r\n                            setActiveRidge(newActive);\r\n                            onRidgeClick?.(series, i);\r\n                          }\r\n                        }}\r\n                        onMouseEnter={() => isInteractive && setHoveredRidge(series.label)}\r\n                        onMouseLeave={() => isInteractive && setHoveredRidge(null)}\r\n                      />\r\n                    )}\r\n                    \r\n                    {/* Stroke line or placeholder line */}\r\n                    <path\r\n                      d={series.isPlaceholder \r\n                        ? `M 0 ${series.yOffset + (variant === 'scrolling' ? totalHeight / maxRidges / 2 : ridgeHeight / 2)} L ${plotWidth} ${series.yOffset + (variant === 'scrolling' ? totalHeight / maxRidges / 2 : ridgeHeight / 2)}`\r\n                        : generatePath(series.points, series.yOffset, false)}\r\n                      fill=\"none\"\r\n                      stroke={series.isPlaceholder ? '#2a2a2a' : series.color}\r\n                      strokeWidth={series.isPlaceholder ? 1 : (isActive || isHovered ? finalStrokeWidth + 1 : finalStrokeWidth)}\r\n                      strokeOpacity={series.isPlaceholder ? 0.5 : (isDimmed ? 0.5 : 1)}\r\n                      strokeDasharray={series.isPlaceholder ? '4 4' : undefined}\r\n                      className=\"snake-ridgeline-graph__ridge-line\"\r\n                      style={{\r\n                        cursor: isInteractive ? 'pointer' : 'default',\r\n                        strokeLinecap: 'round',\r\n                        strokeLinejoin: 'round',\r\n                      }}\r\n                      onClick={() => {\r\n                        if (isInteractive) {\r\n                          const newActive = isActive ? null : series.label;\r\n                          setActiveRidge(newActive);\r\n                          onRidgeClick?.(series, i);\r\n                        }\r\n                      }}\r\n                      onMouseEnter={() => isInteractive && setHoveredRidge(series.label)}\r\n                      onMouseLeave={() => isInteractive && setHoveredRidge(null)}\r\n                      onMouseMove={(e) => {\r\n                        if (finalShowValues && isInteractive) {\r\n                          const rect = e.currentTarget.getBoundingClientRect();\r\n                          const x = e.clientX - rect.left;\r\n                          const index = Math.round((x / plotWidth) * (series.values.length - 1));\r\n                          if (index >= 0 && index < series.values.length) {\r\n                            setHoveredPoint({\r\n                              x: series.points[index].x,\r\n                              y: series.points[index].y,\r\n                              value: series.values[index],\r\n                            });\r\n                          }\r\n                        }\r\n                      }}\r\n                    />\r\n                    \r\n                    {/* Labels - don't show for placeholders */}\r\n                    {finalShowLabels && !series.isPlaceholder && (\r\n                      <text\r\n                        x={-15}\r\n                        y={series.yOffset + (variant === 'scrolling' ? totalHeight / maxRidges / 2 : ridgeHeight / 2)}\r\n                        textAnchor=\"end\"\r\n                        dominantBaseline=\"middle\"\r\n                        fill=\"#bdbdbd\"\r\n                        fontSize=\"12\"\r\n                        fontFamily=\"var(--font-family)\"\r\n                        className=\"snake-ridgeline-graph__label\"\r\n                      >\r\n                        {series.label}\r\n                      </text>\r\n                    )}\r\n                  </g>\r\n                );\r\n              })}\r\n            </g>\r\n\r\n            {/* Hover value tooltip */}\r\n            {finalShowValues && hoveredPoint && (\r\n              <g className=\"snake-ridgeline-graph__tooltip\">\r\n                <rect\r\n                  x={hoveredPoint.x - 30}\r\n                  y={hoveredPoint.y - 20}\r\n                  width=\"60\"\r\n                  height=\"20\"\r\n                  fill=\"#101010\"\r\n                  stroke=\"#3a3a3a\"\r\n                  strokeWidth=\"1\"\r\n                />\r\n                <text\r\n                  x={hoveredPoint.x}\r\n                  y={hoveredPoint.y - 10}\r\n                  textAnchor=\"middle\"\r\n                  dominantBaseline=\"middle\"\r\n                  fill=\"#bdbdbd\"\r\n                  fontSize=\"10\"\r\n                  fontFamily=\"var(--font-family-mono)\"\r\n                >\r\n                  {hoveredPoint.value.toFixed(2)}\r\n                </text>\r\n              </g>\r\n            )}\r\n\r\n            {/* X-axis */}\r\n            {finalShowAxes && (\r\n              <g className=\"snake-ridgeline-graph__x-axis\">\r\n                <line\r\n                  x1={0}\r\n                  y1={totalHeight}\r\n                  x2={plotWidth}\r\n                  y2={totalHeight}\r\n                  stroke=\"#5a5a5a\"\r\n                  strokeWidth=\"2\"\r\n                />\r\n                {xLabels ? xLabels.map((label, i) => {\r\n                  const x = (i / (xLabels.length - 1)) * plotWidth;\r\n                  return (\r\n                    <text\r\n                      key={`xlabel-${i}`}\r\n                      x={x}\r\n                      y={totalHeight + 25}\r\n                      textAnchor=\"middle\"\r\n                      fill=\"#8a8a8a\"\r\n                      fontSize=\"10\"\r\n                      fontFamily=\"var(--font-family-mono)\"\r\n                    >\r\n                      {label}\r\n                    </text>\r\n                  );\r\n                }) : xTicks.map((tick, i) => {\r\n                  const x = (tick / (data[0].values.length - 1)) * plotWidth;\r\n                  return (\r\n                    <text\r\n                      key={`xtick-${i}`}\r\n                      x={x}\r\n                      y={totalHeight + 25}\r\n                      textAnchor=\"middle\"\r\n                      fill=\"#8a8a8a\"\r\n                      fontSize=\"10\"\r\n                      fontFamily=\"var(--font-family-mono)\"\r\n                    >\r\n                      {tick}\r\n                    </text>\r\n                  );\r\n                })}\r\n              </g>\r\n            )}\r\n\r\n            {/* Axis labels */}\r\n            {finalShowAxes && (\r\n              <>\r\n                {xLabel && (\r\n                  <text\r\n                    x={plotWidth / 2}\r\n                    y={totalHeight + 50}\r\n                    textAnchor=\"middle\"\r\n                    fill=\"#bdbdbd\"\r\n                    fontSize=\"12\"\r\n                    fontFamily=\"var(--font-family)\"\r\n                    className=\"snake-ridgeline-graph__axis-label\"\r\n                  >\r\n                    {xLabel}\r\n                  </text>\r\n                )}\r\n                {yLabel && (\r\n                  <text\r\n                    x={-totalHeight / 2}\r\n                    y={-60}\r\n                    textAnchor=\"middle\"\r\n                    fill=\"#bdbdbd\"\r\n                    fontSize=\"12\"\r\n                    fontFamily=\"var(--font-family)\"\r\n                    transform=\"rotate(-90)\"\r\n                    className=\"snake-ridgeline-graph__y-label\"\r\n                  >\r\n                    {yLabel}\r\n                  </text>\r\n                )}\r\n              </>\r\n            )}\r\n          </g>\r\n        </svg>\r\n\r\n        {/* Scrolling indicator */}\r\n        {variant === 'scrolling' && (\r\n          <div className=\"snake-ridgeline-graph__scroll-indicator\">\r\n            <span className=\"snake-ridgeline-graph__scroll-dot\" />\r\n            <span>Live Data</span>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"snake-ridgeline-graph__corner snake-ridgeline-graph__corner--bottom-left\" />\r\n      <div className=\"snake-ridgeline-graph__corner snake-ridgeline-graph__corner--bottom-right\" />\r\n    </div>\r\n  );\r\n};","import React, { useState, useRef, useEffect } from 'react';\r\nimport './select.css';\r\n\r\n// Icon component for ChevronDown from pixel-icon-library\r\nconst ChevronDownIcon = ({ className = '' }: { className?: string }) => (\r\n  <svg className={className} viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\">\r\n    <polygon points=\"23 8 23 9 22 9 22 10 21 10 21 11 20 11 20 12 19 12 19 13 18 13 18 14 17 14 17 15 16 15 16 16 15 16 15 17 14 17 14 18 13 18 13 19 11 19 11 18 10 18 10 17 9 17 9 16 8 16 8 15 7 15 7 14 6 14 6 13 5 13 5 12 4 12 4 11 3 11 3 10 2 10 2 9 1 9 1 8 2 8 2 7 3 7 3 6 4 6 4 7 5 7 5 8 6 8 6 9 7 9 7 10 8 10 8 11 9 11 9 12 10 12 10 13 11 13 11 14 13 14 13 13 14 13 14 12 15 12 15 11 16 11 16 10 17 10 17 9 18 9 18 8 19 8 19 7 20 7 20 6 21 6 21 7 22 7 22 8 23 8\"/>\r\n  </svg>\r\n);\r\n\r\ninterface SelectOption {\r\n  value: string;\r\n  label: string;\r\n  disabled?: boolean;\r\n}\r\n\r\nexport interface SelectProps {\r\n  /** Select options */\r\n  options: SelectOption[];\r\n  /** Selected value */\r\n  value?: string;\r\n  /** Change handler */\r\n  onChange?: (value: string) => void;\r\n  /** Placeholder text */\r\n  placeholder?: string;\r\n  /** Label */\r\n  label?: string;\r\n  /** Helper text */\r\n  helperText?: string;\r\n  /** Error message */\r\n  error?: string;\r\n  /** Size variant */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** Visual variant */\r\n  variant?: 'default' | 'success' | 'warning' | 'danger' | 'info';\r\n  /** Full width */\r\n  fullWidth?: boolean;\r\n  /** Disabled state */\r\n  disabled?: boolean;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n}\r\n\r\n/** Select component with custom dropdown */\r\nexport const Select: React.FC<SelectProps> = ({\r\n  options,\r\n  value,\r\n  onChange,\r\n  placeholder = 'Select an option',\r\n  label,\r\n  helperText,\r\n  error,\r\n  size = 'medium',\r\n  variant = 'default',\r\n  fullWidth = false,\r\n  disabled = false,\r\n  className = '',\r\n}) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const selectRef = useRef<HTMLDivElement>(null);\r\n\r\n  const selectedOption = options.find((opt) => opt.value === value);\r\n\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (selectRef.current && !selectRef.current.contains(event.target as Node)) {\r\n        setIsOpen(false);\r\n      }\r\n    };\r\n\r\n    document.addEventListener('mousedown', handleClickOutside);\r\n    return () => document.removeEventListener('mousedown', handleClickOutside);\r\n  }, []);\r\n\r\n  const handleSelect = (optionValue: string) => {\r\n    onChange?.(optionValue);\r\n    setIsOpen(false);\r\n  };\r\n\r\n  const selectClasses = [\r\n    'snake-select',\r\n    `snake-select--${size}`,\r\n    `snake-select--${variant}`,\r\n    isOpen && 'snake-select--open',\r\n    error && 'snake-select--error',\r\n    disabled && 'snake-select--disabled',\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const wrapperClasses = [\r\n    'snake-select-wrapper',\r\n    fullWidth && 'snake-select-wrapper--full-width',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  return (\r\n    <div className={wrapperClasses} ref={selectRef}>\r\n      {label && <label className=\"snake-select__label\">{label}</label>}\r\n      <button\r\n        type=\"button\"\r\n        className={selectClasses}\r\n        onClick={() => !disabled && setIsOpen(!isOpen)}\r\n        disabled={disabled}\r\n      >\r\n        <span className=\"snake-select__value\">\r\n          {selectedOption ? selectedOption.label : placeholder}\r\n        </span>\r\n        <ChevronDownIcon className=\"snake-select__arrow\" />\r\n      </button>\r\n\r\n      {isOpen && (\r\n        <div className=\"snake-select__dropdown\">\r\n          {options.map((option) => (\r\n            <button\r\n              key={option.value}\r\n              type=\"button\"\r\n              className={[\r\n                'snake-select__option',\r\n                option.value === value && 'snake-select__option--selected',\r\n                option.disabled && 'snake-select__option--disabled',\r\n              ]\r\n                .filter(Boolean)\r\n                .join(' ')}\r\n              onClick={() => !option.disabled && handleSelect(option.value)}\r\n              disabled={option.disabled}\r\n            >\r\n              {option.label}\r\n            </button>\r\n          ))}\r\n        </div>\r\n      )}\r\n\r\n      {(error || helperText) && (\r\n        <span\r\n          className={`snake-select__helper-text ${error ? 'snake-select__helper-text--error' : ''}`}\r\n        >\r\n          {error || helperText}\r\n        </span>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport './skeleton.css';\r\n\r\nexport interface SkeletonProps {\r\n  /** Skeleton variant */\r\n  variant?: 'text' | 'rectangular' | 'circular' | 'button';\r\n  /** Width of the skeleton */\r\n  width?: string | number;\r\n  /** Height of the skeleton */\r\n  height?: string | number;\r\n  /** Animation style */\r\n  animation?: 'pulse' | 'wave' | 'none';\r\n  /** Number of lines (for text variant) */\r\n  lines?: number;\r\n  /** Show corner decorations */\r\n  decorated?: boolean;\r\n  /** Intensity of the animation */\r\n  intensity?: 'subtle' | 'normal' | 'strong';\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n  /** Additional styles */\r\n  style?: React.CSSProperties;\r\n}\r\n\r\n/** Skeleton component for loading states */\r\nexport const Skeleton: React.FC<SkeletonProps> = ({\r\n  variant = 'rectangular',\r\n  width,\r\n  height,\r\n  animation = 'pulse',\r\n  lines = 1,\r\n  decorated = false,\r\n  intensity = 'normal',\r\n  className = '',\r\n  style,\r\n}) => {\r\n  const skeletonClasses = [\r\n    'snake-skeleton',\r\n    `snake-skeleton--${variant}`,\r\n    `snake-skeleton--${animation}`,\r\n    `snake-skeleton--intensity-${intensity}`,\r\n    decorated && 'snake-skeleton--decorated',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const getSkeletonStyle = (): React.CSSProperties => {\r\n    const baseStyle: React.CSSProperties = { ...style };\r\n\r\n    if (width) {\r\n      baseStyle.width = typeof width === 'number' ? `${width}px` : width;\r\n    }\r\n\r\n    if (height && variant !== 'text') {\r\n      baseStyle.height = typeof height === 'number' ? `${height}px` : height;\r\n    }\r\n\r\n    return baseStyle;\r\n  };\r\n\r\n  if (variant === 'text' && lines > 1) {\r\n    return (\r\n      <div className=\"snake-skeleton__text-group\" style={style}>\r\n        {Array.from({ length: lines }, (_, i) => (\r\n          <div\r\n            key={i}\r\n            className={skeletonClasses}\r\n            style={{\r\n              ...getSkeletonStyle(),\r\n              width: i === lines - 1 ? '80%' : '100%',\r\n            }}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={skeletonClasses} style={getSkeletonStyle()}>\r\n      {decorated && (\r\n        <>\r\n          <div className=\"snake-skeleton__corner snake-skeleton__corner--top-left\" />\r\n          <div className=\"snake-skeleton__corner snake-skeleton__corner--top-right\" />\r\n          <div className=\"snake-skeleton__corner snake-skeleton__corner--bottom-left\" />\r\n          <div className=\"snake-skeleton__corner snake-skeleton__corner--bottom-right\" />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport './slider.css';\r\n\r\nexport interface SliderProps {\r\n  /** Current value */\r\n  value?: number;\r\n  /** Value change handler */\r\n  onChange?: (value: number) => void;\r\n  /** Minimum value */\r\n  min?: number;\r\n  /** Maximum value */\r\n  max?: number;\r\n  /** Step increment */\r\n  step?: number;\r\n  /** Show value label */\r\n  showValue?: boolean;\r\n  /** Value label position */\r\n  valueLabelPosition?: 'top' | 'bottom' | 'tooltip';\r\n  /** Show tick marks */\r\n  showTicks?: boolean;\r\n  /** Tick interval */\r\n  tickInterval?: number;\r\n  /** Custom marks */\r\n  marks?: Array<{ value: number; label?: string }>;\r\n  /** Size variant */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** Color variant */\r\n  variant?: 'default' | 'success' | 'warning' | 'danger' | 'info';\r\n  /** Orientation */\r\n  orientation?: 'horizontal' | 'vertical';\r\n  /** Disabled state */\r\n  disabled?: boolean;\r\n  /** Label */\r\n  label?: string;\r\n  /** Format value function */\r\n  formatValue?: (value: number) => string;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n}\r\n\r\n/** Slider component for selecting numeric values */\r\nexport const Slider: React.FC<SliderProps> = ({\r\n  value = 0,\r\n  onChange,\r\n  min = 0,\r\n  max = 100,\r\n  step = 1,\r\n  showValue = false,\r\n  valueLabelPosition = 'top',\r\n  showTicks = false,\r\n  tickInterval = 10,\r\n  marks,\r\n  size = 'medium',\r\n  variant = 'default',\r\n  orientation = 'horizontal',\r\n  disabled = false,\r\n  label,\r\n  formatValue = (v) => v.toString(),\r\n  className = '',\r\n}) => {\r\n  const [internalValue, setInternalValue] = useState(value);\r\n  const [isDragging, setIsDragging] = useState(false);\r\n  const [showTooltip, setShowTooltip] = useState(false);\r\n  const sliderRef = useRef<HTMLDivElement>(null);\r\n  const trackRef = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    setInternalValue(value);\r\n  }, [value]);\r\n\r\n  const percentage = ((internalValue - min) / (max - min)) * 100;\r\n\r\n  const handleMouseDown = (e: React.MouseEvent) => {\r\n    if (disabled) return;\r\n    setIsDragging(true);\r\n    updateValue(e);\r\n  };\r\n\r\n  const handleMouseMove = (e: MouseEvent) => {\r\n    if (isDragging && !disabled) {\r\n      updateValue(e);\r\n    }\r\n  };\r\n\r\n  const handleMouseUp = () => {\r\n    setIsDragging(false);\r\n  };\r\n\r\n  const updateValue = (e: React.MouseEvent | MouseEvent) => {\r\n    if (!trackRef.current) return;\r\n\r\n    const rect = trackRef.current.getBoundingClientRect();\r\n    let percentage: number;\r\n\r\n    if (orientation === 'horizontal') {\r\n      const x = Math.max(0, Math.min(e.clientX - rect.left, rect.width));\r\n      percentage = x / rect.width;\r\n    } else {\r\n      const y = Math.max(0, Math.min(rect.height - (e.clientY - rect.top), rect.height));\r\n      percentage = y / rect.height;\r\n    }\r\n\r\n    const newValue = Math.round((min + percentage * (max - min)) / step) * step;\r\n    const clampedValue = Math.max(min, Math.min(max, newValue));\r\n\r\n    setInternalValue(clampedValue);\r\n    onChange?.(clampedValue);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isDragging) {\r\n      document.addEventListener('mousemove', handleMouseMove);\r\n      document.addEventListener('mouseup', handleMouseUp);\r\n      return () => {\r\n        document.removeEventListener('mousemove', handleMouseMove);\r\n        document.removeEventListener('mouseup', handleMouseUp);\r\n      };\r\n    }\r\n  }, [isDragging]);\r\n\r\n  const handleKeyDown = (e: React.KeyboardEvent) => {\r\n    if (disabled) return;\r\n\r\n    let newValue = internalValue;\r\n    const bigStep = step * 10;\r\n\r\n    switch (e.key) {\r\n      case 'ArrowLeft':\r\n      case 'ArrowDown':\r\n        newValue = Math.max(min, internalValue - step);\r\n        break;\r\n      case 'ArrowRight':\r\n      case 'ArrowUp':\r\n        newValue = Math.min(max, internalValue + step);\r\n        break;\r\n      case 'PageDown':\r\n        newValue = Math.max(min, internalValue - bigStep);\r\n        break;\r\n      case 'PageUp':\r\n        newValue = Math.min(max, internalValue + bigStep);\r\n        break;\r\n      case 'Home':\r\n        newValue = min;\r\n        break;\r\n      case 'End':\r\n        newValue = max;\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n\r\n    e.preventDefault();\r\n    setInternalValue(newValue);\r\n    onChange?.(newValue);\r\n  };\r\n\r\n  const renderTicks = () => {\r\n    if (!showTicks && !marks) return null;\r\n\r\n    const tickMarks = marks || [];\r\n\r\n    if (showTicks && !marks) {\r\n      for (let i = min; i <= max; i += tickInterval) {\r\n        tickMarks.push({ value: i });\r\n      }\r\n    }\r\n\r\n    return tickMarks.map((mark) => {\r\n      const markPercentage = ((mark.value - min) / (max - min)) * 100;\r\n      const style =\r\n        orientation === 'horizontal'\r\n          ? { left: `${markPercentage}%` }\r\n          : { bottom: `${markPercentage}%` };\r\n\r\n      return (\r\n        <div key={mark.value} className=\"snake-slider__tick\" style={style}>\r\n          {mark.label && <span className=\"snake-slider__tick-label\">{mark.label}</span>}\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n\r\n  const sliderClasses = [\r\n    'snake-slider',\r\n    `snake-slider--${size}`,\r\n    `snake-slider--${variant}`,\r\n    `snake-slider--${orientation}`,\r\n    disabled && 'snake-slider--disabled',\r\n    isDragging && 'snake-slider--dragging',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const thumbStyle =\r\n    orientation === 'horizontal' ? { left: `${percentage}%` } : { bottom: `${percentage}%` };\r\n\r\n  const fillStyle =\r\n    orientation === 'horizontal' ? { width: `${percentage}%` } : { height: `${percentage}%` };\r\n\r\n  return (\r\n    <div className={sliderClasses}>\r\n      {label && <label className=\"snake-slider__label\">{label}</label>}\r\n\r\n      <div className=\"snake-slider__container\">\r\n        {showValue && valueLabelPosition === 'top' && (\r\n          <div className=\"snake-slider__value snake-slider__value--top\">\r\n            {formatValue(internalValue)}\r\n          </div>\r\n        )}\r\n\r\n        <div\r\n          ref={sliderRef}\r\n          className=\"snake-slider__wrapper\"\r\n          onMouseEnter={() => setShowTooltip(true)}\r\n          onMouseLeave={() => setShowTooltip(false)}\r\n        >\r\n          <div ref={trackRef} className=\"snake-slider__track\" onMouseDown={handleMouseDown}>\r\n            <div className=\"snake-slider__fill\" style={fillStyle} />\r\n            {renderTicks()}\r\n\r\n            <div\r\n              className=\"snake-slider__thumb\"\r\n              style={thumbStyle}\r\n              tabIndex={disabled ? -1 : 0}\r\n              role=\"slider\"\r\n              aria-valuemin={min}\r\n              aria-valuemax={max}\r\n              aria-valuenow={internalValue}\r\n              aria-disabled={disabled}\r\n              onKeyDown={handleKeyDown}\r\n            >\r\n              {showValue && valueLabelPosition === 'tooltip' && showTooltip && (\r\n                <div className=\"snake-slider__tooltip\">{formatValue(internalValue)}</div>\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"snake-slider__corner snake-slider__corner--start-top\" />\r\n          <div className=\"snake-slider__corner snake-slider__corner--start-bottom\" />\r\n          <div className=\"snake-slider__corner snake-slider__corner--end-top\" />\r\n          <div className=\"snake-slider__corner snake-slider__corner--end-bottom\" />\r\n        </div>\r\n\r\n        {showValue && valueLabelPosition === 'bottom' && (\r\n          <div className=\"snake-slider__value snake-slider__value--bottom\">\r\n            {formatValue(internalValue)}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useMemo } from 'react';\r\nimport './spidergraph.css';\r\n\r\ninterface DataPoint {\r\n  label: string;\r\n  value: number; // 0-100 percentage\r\n  color?: string;\r\n}\r\n\r\nexport interface SpiderGraphProps {\r\n  /** Array of data points */\r\n  data: DataPoint[];\r\n  /** Width of the graph (defaults to 100% to fill parent) */\r\n  width?: number | string;\r\n  /** Height of the graph (defaults to 100% to fill parent) */\r\n  height?: number | string;\r\n  /** Number of grid levels */\r\n  levels?: number;\r\n  /** Whether to show values on points */\r\n  showValues?: boolean;\r\n  /** Whether to show labels */\r\n  showLabels?: boolean;\r\n  /** Whether to show grid lines */\r\n  showGrid?: boolean;\r\n  /** Whether to show axes lines */\r\n  showAxes?: boolean;\r\n  /** Whether to animate on mount */\r\n  animate?: boolean;\r\n  /** Fill opacity for the shape */\r\n  fillOpacity?: number;\r\n  /** Stroke width */\r\n  strokeWidth?: number;\r\n  /** Grid color */\r\n  gridColor?: string;\r\n  /** Fill color */\r\n  fillColor?: string;\r\n  /** Stroke color */\r\n  strokeColor?: string;\r\n  /** Whether to show dots on points */\r\n  showDots?: boolean;\r\n  /** Size variant */\r\n  variant?: 'default' | 'minimal' | 'detailed' | 'cyber';\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n}\r\n\r\n/** SpiderGraph component for multi-dimensional data visualization */\r\nexport const SpiderGraph: React.FC<SpiderGraphProps> = ({\r\n  data,\r\n  width = '100%',\r\n  height = '100%',\r\n  levels = 5,\r\n  showValues = false,\r\n  showLabels = true,\r\n  showGrid = true,\r\n  showAxes = true,\r\n  animate = true,\r\n  fillOpacity = 0.1,\r\n  strokeWidth = 2,\r\n  gridColor = '#3a3a3a',\r\n  fillColor = '#ffffff',\r\n  strokeColor = '#ffffff',\r\n  showDots = true,\r\n  variant = 'default',\r\n  className = '',\r\n}) => {\r\n  // Fixed SVG dimensions for consistent viewBox\r\n  const svgWidth = 300;\r\n  const svgHeight = 300;\r\n  const center = svgWidth / 2;\r\n  const radius = (svgWidth * 0.8) / 2; // 80% of size for padding\r\n\r\n  // Calculate points for the polygon\r\n  const points = useMemo(() => {\r\n    return data.map((point, index) => {\r\n      const angle = (Math.PI * 2 * index) / data.length - Math.PI / 2;\r\n      const distance = (radius * point.value) / 100;\r\n      return {\r\n        x: center + Math.cos(angle) * distance,\r\n        y: center + Math.sin(angle) * distance,\r\n        labelX: center + Math.cos(angle) * (radius + 30),\r\n        labelY: center + Math.sin(angle) * (radius + 30),\r\n        endX: center + Math.cos(angle) * radius,\r\n        endY: center + Math.sin(angle) * radius,\r\n        ...point,\r\n      };\r\n    });\r\n  }, [data, center, radius]);\r\n\r\n  // Generate grid levels\r\n  const gridLevels = useMemo(() => {\r\n    return Array.from({ length: levels }, (_, i) => {\r\n      const levelRadius = (radius * (i + 1)) / levels;\r\n      return data.map((_, index) => {\r\n        const angle = (Math.PI * 2 * index) / data.length - Math.PI / 2;\r\n        return {\r\n          x: center + Math.cos(angle) * levelRadius,\r\n          y: center + Math.sin(angle) * levelRadius,\r\n        };\r\n      });\r\n    });\r\n  }, [data.length, levels, center, radius]);\r\n\r\n  // Create polygon path\r\n  const polygonPath = points.map((p, i) => `${i === 0 ? 'M' : 'L'} ${p.x} ${p.y}`).join(' ') + ' Z';\r\n\r\n  // Create grid path\r\n  const gridPaths = gridLevels.map((level) => {\r\n    return level.map((p, i) => `${i === 0 ? 'M' : 'L'} ${p.x} ${p.y}`).join(' ') + ' Z';\r\n  });\r\n\r\n  const classes = [\r\n    'snake-spider-graph',\r\n    `snake-spider-graph--${variant}`,\r\n    animate && 'snake-spider-graph--animated',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  // Variant-specific styles\r\n  const variantStyles = {\r\n    minimal: {\r\n      showGrid: false,\r\n      showAxes: false,\r\n      showDots: false,\r\n      strokeWidth: 1,\r\n    },\r\n    detailed: {\r\n      showValues: true,\r\n      showGrid: true,\r\n      showAxes: true,\r\n      showDots: true,\r\n    },\r\n    cyber: {\r\n      gridColor: '#61dafb',\r\n      strokeColor: '#61dafb',\r\n      fillColor: '#61dafb',\r\n      fillOpacity: 0.1,\r\n      strokeWidth: 3,\r\n    },\r\n  };\r\n\r\n  const variantProps = variant !== 'default' ? variantStyles[variant] || {} : {};\r\n  const finalProps = { ...variantProps };\r\n\r\n  return (\r\n    <div className={classes}>\r\n      <svg \r\n        width={typeof width === 'number' ? width : width} \r\n        height={typeof height === 'number' ? height : height} \r\n        viewBox={`0 0 ${svgWidth} ${svgHeight}`}\r\n        className=\"snake-spider-graph__svg\"\r\n        preserveAspectRatio=\"xMidYMid meet\"\r\n      >\r\n        {/* Grid */}\r\n        {(showGrid || finalProps.showGrid) && (\r\n          <g className=\"snake-spider-graph__grid\">\r\n            {gridPaths.map((path, i) => (\r\n              <path\r\n                key={`grid-${i}`}\r\n                d={path}\r\n                fill=\"none\"\r\n                stroke={finalProps.gridColor || gridColor}\r\n                strokeWidth=\"1\"\r\n                strokeOpacity={0.3 + (i / levels) * 0.3}\r\n                className=\"snake-spider-graph__grid-level\"\r\n              />\r\n            ))}\r\n          </g>\r\n        )}\r\n\r\n        {/* Axes */}\r\n        {(showAxes || finalProps.showAxes) && (\r\n          <g className=\"snake-spider-graph__axes\">\r\n            {points.map((point, i) => (\r\n              <line\r\n                key={`axis-${i}`}\r\n                x1={center}\r\n                y1={center}\r\n                x2={point.endX}\r\n                y2={point.endY}\r\n                stroke={finalProps.gridColor || gridColor}\r\n                strokeWidth=\"1\"\r\n                strokeOpacity=\"0.5\"\r\n                className=\"snake-spider-graph__axis\"\r\n              />\r\n            ))}\r\n          </g>\r\n        )}\r\n\r\n        {/* Data polygon */}\r\n        <g className=\"snake-spider-graph__data\">\r\n          <path\r\n            d={polygonPath}\r\n            fill={finalProps.fillColor || fillColor}\r\n            fillOpacity={finalProps.fillOpacity ?? fillOpacity}\r\n            stroke={finalProps.strokeColor || strokeColor}\r\n            strokeWidth={finalProps.strokeWidth ?? strokeWidth}\r\n            className=\"snake-spider-graph__polygon\"\r\n          />\r\n        </g>\r\n\r\n        {/* Data points */}\r\n        {(showDots || finalProps.showDots) && (\r\n          <g className=\"snake-spider-graph__dots\">\r\n            {points.map((point, i) => (\r\n              <circle\r\n                key={`dot-${i}`}\r\n                cx={point.x}\r\n                cy={point.y}\r\n                r=\"4\"\r\n                fill={point.color || finalProps.strokeColor || strokeColor}\r\n                stroke=\"#0b0b0d\"\r\n                strokeWidth=\"2\"\r\n                className=\"snake-spider-graph__dot\"\r\n              />\r\n            ))}\r\n          </g>\r\n        )}\r\n\r\n        {/* Values */}\r\n        {(showValues || finalProps.showValues) && (\r\n          <g className=\"snake-spider-graph__values\">\r\n            {points.map((point, i) => (\r\n              <text\r\n                key={`value-${i}`}\r\n                x={point.x}\r\n                y={point.y - 10}\r\n                textAnchor=\"middle\"\r\n                fill=\"#bdbdbd\"\r\n                fontSize=\"12\"\r\n                fontFamily=\"var(--font-family-mono)\"\r\n                className=\"snake-spider-graph__value\"\r\n              >\r\n                {point.value}%\r\n              </text>\r\n            ))}\r\n          </g>\r\n        )}\r\n\r\n        {/* Labels */}\r\n        {showLabels && (\r\n          <g className=\"snake-spider-graph__labels\">\r\n            {points.map((point, i) => {\r\n              // Determine text anchor based on position\r\n              let textAnchor = 'middle';\r\n              if (point.labelX < center - 10) textAnchor = 'end';\r\n              else if (point.labelX > center + 10) textAnchor = 'start';\r\n\r\n              return (\r\n                <text\r\n                  key={`label-${i}`}\r\n                  x={point.labelX}\r\n                  y={point.labelY}\r\n                  textAnchor={textAnchor}\r\n                  dominantBaseline=\"middle\"\r\n                  fill=\"#8a8a8a\"\r\n                  fontSize=\"12\"\r\n                  fontFamily=\"var(--font-family)\"\r\n                  className=\"snake-spider-graph__label\"\r\n                >\r\n                  {point.label}\r\n                </text>\r\n              );\r\n            })}\r\n          </g>\r\n        )}\r\n\r\n        {/* Corner accents */}\r\n        <g className=\"snake-spider-graph__corners\">\r\n          {/* Top left */}\r\n          <path\r\n            d=\"M 0 10 L 0 0 L 10 0\"\r\n            fill=\"none\"\r\n            stroke=\"#8e8e90\"\r\n            strokeWidth=\"2\"\r\n          />\r\n          {/* Top right */}\r\n          <path\r\n            d={`M ${svgWidth - 10} 0 L ${svgWidth} 0 L ${svgWidth} 10`}\r\n            fill=\"none\"\r\n            stroke=\"#8e8e90\"\r\n            strokeWidth=\"2\"\r\n          />\r\n          {/* Bottom left */}\r\n          <path\r\n            d={`M 0 ${svgHeight - 10} L 0 ${svgHeight} L 10 ${svgHeight}`}\r\n            fill=\"none\"\r\n            stroke=\"#8e8e90\"\r\n            strokeWidth=\"2\"\r\n          />\r\n          {/* Bottom right */}\r\n          <path\r\n            d={`M ${svgWidth - 10} ${svgHeight} L ${svgWidth} ${svgHeight} L ${svgWidth} ${svgHeight - 10}`}\r\n            fill=\"none\"\r\n            stroke=\"#8e8e90\"\r\n            strokeWidth=\"2\"\r\n          />\r\n        </g>\r\n      </svg>\r\n    </div>\r\n  );\r\n};","import React from 'react';\r\nimport './stat.css';\r\n\r\n// Icon components from pixel-icon-library\r\nconst AngleUpIcon = ({ className = '' }: { className?: string }) => (\r\n  <svg className={className} viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\">\r\n    <polygon points=\"19 17 17 17 17 16 16 16 16 15 15 15 15 14 14 14 14 13 13 13 13 12 11 12 11 13 10 13 10 14 9 14 9 15 8 15 8 16 7 16 7 17 5 17 5 16 4 16 4 14 5 14 5 13 6 13 6 12 7 12 7 11 8 11 8 10 9 10 9 9 10 9 10 8 11 8 11 7 13 7 13 8 14 8 14 9 15 9 15 10 16 10 16 11 17 11 17 12 18 12 18 13 19 13 19 14 20 14 20 16 19 16 19 17\"/>\r\n  </svg>\r\n);\r\n\r\nconst AngleDownIcon = ({ className = '' }: { className?: string }) => (\r\n  <svg className={className} viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\">\r\n    <polygon points=\"5 7 7 7 7 8 8 8 8 9 9 9 9 10 10 10 10 11 11 11 11 12 13 12 13 11 14 11 14 10 15 10 15 9 16 9 16 8 17 8 17 7 19 7 19 8 20 8 20 10 19 10 19 11 18 11 18 12 17 12 17 13 16 13 16 14 15 14 15 15 14 15 14 16 13 16 13 17 11 17 11 16 10 16 10 15 9 15 9 14 8 14 8 13 7 13 7 12 6 12 6 11 5 11 5 10 4 10 4 8 5 8 5 7\"/>\r\n  </svg>\r\n);\r\n\r\nconst AngleRightIcon = ({ className = '' }: { className?: string }) => (\r\n  <svg className={className} viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\">\r\n    <polygon points=\"7 19 7 17 8 17 8 16 9 16 9 15 10 15 10 14 11 14 11 13 12 13 12 11 11 11 11 10 10 10 10 9 9 9 9 8 8 8 8 7 7 7 7 5 8 5 8 4 10 4 10 5 11 5 11 6 12 6 12 7 13 7 13 8 14 8 14 9 15 9 15 10 16 10 16 11 17 11 17 13 16 13 16 14 15 14 15 15 14 15 14 16 13 16 13 17 12 17 12 18 11 18 11 19 10 19 10 20 8 20 8 19 7 19\"/>\r\n  </svg>\r\n);\r\n\r\nexport interface StatProps {\r\n  /** Label for the stat */\r\n  label: string;\r\n  /** Value to display */\r\n  value: string | number;\r\n  /** Additional info or description */\r\n  info?: string;\r\n  /** Change value */\r\n  change?: {\r\n    value: string | number;\r\n    type: 'increase' | 'decrease' | 'neutral';\r\n  };\r\n  /** Icon to display */\r\n  icon?: React.ReactNode;\r\n  /** Size variant */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** Layout variant */\r\n  variant?: 'default' | 'centered' | 'horizontal';\r\n  /** Color variant */\r\n  color?: 'default' | 'success' | 'warning' | 'danger' | 'info';\r\n  /** Loading state */\r\n  loading?: boolean;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n}\r\n\r\n/** Stat component for displaying statistics and metrics */\r\nexport const Stat: React.FC<StatProps> = ({\r\n  label,\r\n  value,\r\n  info,\r\n  change,\r\n  icon,\r\n  size = 'medium',\r\n  variant = 'default',\r\n  color = 'default',\r\n  loading = false,\r\n  className = '',\r\n}) => {\r\n  const statClasses = [\r\n    'snake-stat',\r\n    `snake-stat--${size}`,\r\n    `snake-stat--${variant}`,\r\n    `snake-stat--${color}`,\r\n    loading && 'snake-stat--loading',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const changeClasses = ['snake-stat__change', change && `snake-stat__change--${change.type}`]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const getChangeIcon = () => {\r\n    if (!change) return null;\r\n    switch (change.type) {\r\n      case 'increase':\r\n        return <AngleUpIcon />;\r\n      case 'decrease':\r\n        return <AngleDownIcon />;\r\n      default:\r\n        return <AngleRightIcon />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={statClasses}>\r\n      <div className=\"snake-stat__corner snake-stat__corner--top-left\" />\r\n      <div className=\"snake-stat__corner snake-stat__corner--top-right\" />\r\n\r\n      {icon && <div className=\"snake-stat__icon\">{icon}</div>}\r\n\r\n      <div className=\"snake-stat__content\">\r\n        <div className=\"snake-stat__label\">{label}</div>\r\n\r\n        {loading ? (\r\n          <div className=\"snake-stat__value\">\r\n            <span className=\"snake-stat__loading-bar\" />\r\n          </div>\r\n        ) : (\r\n          <div className=\"snake-stat__value\">{value}</div>\r\n        )}\r\n\r\n        {(info || change) && (\r\n          <div className=\"snake-stat__footer\">\r\n            {info && <div className=\"snake-stat__info\">{info}</div>}\r\n            {change && (\r\n              <div className={changeClasses}>\r\n                <span className=\"snake-stat__change-icon\">{getChangeIcon()}</span>\r\n                <span className=\"snake-stat__change-value\">{change.value}</span>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"snake-stat__corner snake-stat__corner--bottom-left\" />\r\n      <div className=\"snake-stat__corner snake-stat__corner--bottom-right\" />\r\n    </div>\r\n  );\r\n};\r\n","import React, { useRef, useState, useEffect } from 'react';\r\nimport './stepper.css';\r\n\r\ninterface StepperStep {\r\n  label: string;\r\n  description?: string;\r\n  icon?: React.ReactNode;\r\n  error?: boolean;\r\n}\r\n\r\nexport interface StepperProps {\r\n  /** Array of steps */\r\n  steps: StepperStep[];\r\n  /** Current active step index */\r\n  activeStep: number;\r\n  /** Orientation of the stepper */\r\n  orientation?: 'horizontal' | 'vertical';\r\n  /** Size variant */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** Whether to show step numbers */\r\n  showNumbers?: boolean;\r\n  /** Whether steps are clickable */\r\n  clickable?: boolean;\r\n  /** Callback when a step is clicked */\r\n  onStepClick?: (index: number) => void;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n  /** Whether to show connector lines */\r\n  showConnectors?: boolean;\r\n  /** Variant style */\r\n  variant?: 'default' | 'compact' | 'pills';\r\n}\r\n\r\n/** Stepper component for multi-step processes */\r\nexport const Stepper: React.FC<StepperProps> = ({\r\n  steps,\r\n  activeStep,\r\n  orientation = 'horizontal',\r\n  size = 'medium',\r\n  showNumbers = true,\r\n  clickable = false,\r\n  onStepClick,\r\n  className = '',\r\n  showConnectors = true,\r\n  variant = 'default',\r\n}) => {\r\n  const stepperRef = React.useRef<HTMLDivElement>(null);\r\n  const [connectorWidth, setConnectorWidth] = React.useState<number>(0);\r\n  const [connectorHeight, setConnectorHeight] = React.useState<number>(0);\r\n\r\n  React.useEffect(() => {\r\n    if (showConnectors && stepperRef.current) {\r\n      const calculateConnectorDimensions = () => {\r\n        const stepElements = stepperRef.current?.querySelectorAll('.snake-stepper__step-indicator');\r\n        if (stepElements && stepElements.length >= 2) {\r\n          const first = stepElements[0] as HTMLElement;\r\n          const second = stepElements[1] as HTMLElement;\r\n          const firstRect = first.getBoundingClientRect();\r\n          const secondRect = second.getBoundingClientRect();\r\n          \r\n          if (orientation === 'horizontal') {\r\n            const gap = secondRect.left - firstRect.right;\r\n            setConnectorWidth(gap);\r\n          } else {\r\n            const gap = secondRect.top - firstRect.bottom;\r\n            setConnectorHeight(gap);\r\n          }\r\n        }\r\n      };\r\n\r\n      calculateConnectorDimensions();\r\n      window.addEventListener('resize', calculateConnectorDimensions);\r\n      return () => window.removeEventListener('resize', calculateConnectorDimensions);\r\n    }\r\n  }, [orientation, showConnectors, steps.length]);\r\n\r\n  const handleStepClick = (index: number) => {\r\n    if (clickable && onStepClick) {\r\n      onStepClick(index);\r\n    }\r\n  };\r\n\r\n  const getStepState = (index: number) => {\r\n    if (steps[index].error) return 'error';\r\n    if (index < activeStep) return 'completed';\r\n    if (index === activeStep) return 'active';\r\n    return 'pending';\r\n  };\r\n\r\n  const classes = [\r\n    'snake-stepper',\r\n    `snake-stepper--${orientation}`,\r\n    `snake-stepper--${size}`,\r\n    `snake-stepper--${variant}`,\r\n    showConnectors && 'snake-stepper--with-connectors',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  return (\r\n    <div className={classes} ref={stepperRef}>\r\n      {steps.map((step, index) => {\r\n        const state = getStepState(index);\r\n        const isClickable = clickable && onStepClick;\r\n\r\n        return (\r\n          <div\r\n            key={index}\r\n            className={[\r\n              'snake-stepper__step',\r\n              `snake-stepper__step--${state}`,\r\n              isClickable && 'snake-stepper__step--clickable',\r\n            ]\r\n              .filter(Boolean)\r\n              .join(' ')}\r\n            onClick={() => handleStepClick(index)}\r\n            role={isClickable ? 'button' : undefined}\r\n            tabIndex={isClickable ? 0 : undefined}\r\n            onKeyDown={\r\n              isClickable\r\n                ? (e) => {\r\n                    if (e.key === 'Enter' || e.key === ' ') {\r\n                      e.preventDefault();\r\n                      handleStepClick(index);\r\n                    }\r\n                  }\r\n                : undefined\r\n            }\r\n          >\r\n            <div className=\"snake-stepper__indicator-wrapper\">\r\n              <div className=\"snake-stepper__step-indicator\">\r\n                {step.icon ? (\r\n                  <span className=\"snake-stepper__step-icon\">{step.icon}</span>\r\n                ) : showNumbers ? (\r\n                  <span className=\"snake-stepper__step-number\">\r\n                    {state === 'completed' ? '✓' : index + 1}\r\n                  </span>\r\n                ) : (\r\n                  <span className=\"snake-stepper__step-dot\" />\r\n                )}\r\n              </div>\r\n              \r\n              {showConnectors && index < steps.length - 1 && (\r\n                <div\r\n                  className={[\r\n                    'snake-stepper__connector',\r\n                    index < activeStep && 'snake-stepper__connector--completed',\r\n                  ]\r\n                    .filter(Boolean)\r\n                    .join(' ')}\r\n                  style={\r\n                    orientation === 'horizontal' \r\n                      ? { width: `${connectorWidth}px` } \r\n                      : { height: `${connectorHeight}px` }\r\n                  }\r\n                />\r\n              )}\r\n            </div>\r\n\r\n            {variant !== 'compact' && (\r\n              <div className=\"snake-stepper__step-content\">\r\n                <div className=\"snake-stepper__step-label\">{step.label}</div>\r\n                {step.description && variant === 'default' && (\r\n                  <div className=\"snake-stepper__step-description\">{step.description}</div>\r\n                )}\r\n              </div>\r\n            )}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};","import React, { useMemo, useState, useEffect } from 'react';\r\nimport './streamgraph.css';\r\n\r\ninterface DataPoint {\r\n  x: number | string;\r\n  [key: string]: number | string;\r\n}\r\n\r\nexport interface StreamGraphProps {\r\n  /** Array of data points */\r\n  data: DataPoint[];\r\n  /** Keys for the data series to display */\r\n  keys: string[];\r\n  /** Colors for each series */\r\n  colors?: string[];\r\n  /** Width of the graph (defaults to 100% to fill parent) */\r\n  width?: number | string;\r\n  /** Height of the graph (defaults to 100% to fill parent) */\r\n  height?: number | string;\r\n  /** Show grid lines */\r\n  showGrid?: boolean;\r\n  /** Number of grid lines */\r\n  gridLines?: number;\r\n  /** Show x-axis labels */\r\n  showLabels?: boolean;\r\n  /** Show legend */\r\n  showLegend?: boolean;\r\n  /** Animation on mount */\r\n  animate?: boolean;\r\n  /** Animate legend expand on mount */\r\n  animateLegend?: boolean;\r\n  /** Grid color */\r\n  gridColor?: string;\r\n  /** Curve type */\r\n  curve?: 'linear' | 'smooth' | 'step';\r\n  /** Offset type */\r\n  offset?: 'silhouette' | 'wiggle' | 'expand' | 'zero';\r\n  /** Size variant */\r\n  variant?: 'default' | 'minimal' | 'detailed' | 'interactive';\r\n  /** Format label function */\r\n  formatLabel?: (value: number | string) => string;\r\n  /** Callback when a layer is clicked (for interactive variant) */\r\n  onLayerClick?: (key: string, index: number) => void;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n}\r\n\r\n/** StreamGraph component for visualizing time-series data */\r\nexport const StreamGraph: React.FC<StreamGraphProps> = ({\r\n  data,\r\n  keys,\r\n  colors = ['#8b2c2c', '#4a4a4a', '#d4d4d4', '#6b3030', '#7a7a7a'],\r\n  width = '100%',\r\n  height = '100%',\r\n  showGrid = true,\r\n  gridLines = 5,\r\n  showLabels = true,\r\n  showLegend = true,\r\n  animate = true,\r\n  animateLegend = true,\r\n  gridColor = '#3a3a3a',\r\n  curve = 'smooth',\r\n  offset = 'silhouette',\r\n  variant = 'default',\r\n  formatLabel = (value) => value.toString(),\r\n  onLayerClick,\r\n  className = '',\r\n}) => {\r\n  // Fixed SVG dimensions for consistent viewBox\r\n  const svgWidth = 600;\r\n  const svgHeight = 400;\r\n  \r\n  // State for interactive variant\r\n  const [activeLayer, setActiveLayer] = useState<string | null>(null);\r\n  const [hoveredLayer, setHoveredLayer] = useState<string | null>(null);\r\n  // Calculate stacked data\r\n  const stackedData = useMemo(() => {\r\n    const layers: any[] = [];\r\n    \r\n    if (!keys || keys.length === 0 || !data || data.length === 0) {\r\n      return layers;\r\n    }\r\n    \r\n    keys.forEach((key, keyIndex) => {\r\n      const layer = data.map((d, i) => {\r\n        const value = typeof d[key] === 'number' ? d[key] : 0;\r\n        const prevLayers = layers.slice(0, keyIndex);\r\n        const y0 = prevLayers.reduce((sum, l) => sum + (l[i]?.value || 0), 0);\r\n        \r\n        return {\r\n          x: i,\r\n          y0,\r\n          y1: y0 + value,\r\n          value,\r\n          key,\r\n          originalX: d.x,\r\n        };\r\n      });\r\n      layers.push(layer);\r\n    });\r\n\r\n    // Apply offset\r\n    if (offset === 'silhouette') {\r\n      // Center the stream\r\n      const maxHeight = layers.reduce((max, layer) => {\r\n        const layerMax = Math.max(...layer.map((d: any) => d.y1));\r\n        return Math.max(max, layerMax);\r\n      }, 0);\r\n      \r\n      layers.forEach(layer => {\r\n        layer.forEach((d: any) => {\r\n          const shift = (maxHeight - d.y1) / 2;\r\n          d.y0 += shift;\r\n          d.y1 += shift;\r\n        });\r\n      });\r\n    } else if (offset === 'wiggle') {\r\n      // Minimize wiggle\r\n      const totals = data.map((_, i) => \r\n        layers.reduce((sum, layer) => sum + layer[i].value, 0)\r\n      );\r\n      const maxTotal = Math.max(...totals);\r\n      \r\n      layers.forEach(layer => {\r\n        layer.forEach((d: any, i: number) => {\r\n          const shift = (maxTotal - totals[i]) / 2;\r\n          d.y0 += shift;\r\n          d.y1 += shift;\r\n        });\r\n      });\r\n    } else if (offset === 'expand') {\r\n      // Normalize to 100%\r\n      data.forEach((_, i) => {\r\n        const total = layers.reduce((sum, layer) => sum + layer[i].value, 0);\r\n        if (total > 0) {\r\n          let cumulative = 0;\r\n          layers.forEach(layer => {\r\n            const normalized = (layer[i].value / total) * 100;\r\n            layer[i].y0 = cumulative;\r\n            layer[i].y1 = cumulative + normalized;\r\n            cumulative += normalized;\r\n          });\r\n        }\r\n      });\r\n    }\r\n\r\n    return layers;\r\n  }, [data, keys, offset]);\r\n\r\n  // Calculate max value for scaling\r\n  const maxValue = useMemo(() => {\r\n    if (offset === 'expand') return 100;\r\n    return Math.max(...stackedData.flat().map((d: any) => d.y1));\r\n  }, [stackedData, offset]);\r\n\r\n  // Generate path for each layer\r\n  const generatePath = (layer: any[]) => {\r\n    if (layer.length === 0) return '';\r\n    \r\n    const xScale = (i: number) => (i / (data.length - 1)) * svgWidth;\r\n    const yScale = (v: number) => svgHeight - (v / maxValue) * svgHeight;\r\n    \r\n    let pathTop = '';\r\n    let pathBottom = '';\r\n    \r\n    layer.forEach((point, i) => {\r\n      const x = xScale(i);\r\n      const y0 = yScale(point.y0);\r\n      const y1 = yScale(point.y1);\r\n      \r\n      if (i === 0) {\r\n        pathTop = `M ${x} ${y1}`;\r\n        pathBottom = `L ${x} ${y0}`;\r\n      } else {\r\n        if (curve === 'smooth') {\r\n          // Cubic bezier curve\r\n          const prevX = xScale(i - 1);\r\n          const midX = (prevX + x) / 2;\r\n          const prevY1 = yScale(layer[i - 1].y1);\r\n          pathTop += ` C ${midX} ${prevY1}, ${midX} ${y1}, ${x} ${y1}`;\r\n          \r\n          const prevY0 = yScale(layer[i - 1].y0);\r\n          pathBottom = ` C ${midX} ${y0}, ${midX} ${prevY0}, ${prevX} ${prevY0}` + pathBottom;\r\n        } else if (curve === 'step') {\r\n          const prevX = xScale(i - 1);\r\n          pathTop += ` L ${prevX} ${y1} L ${x} ${y1}`;\r\n          pathBottom = ` L ${x} ${y0} L ${prevX} ${y0}` + pathBottom;\r\n        } else {\r\n          pathTop += ` L ${x} ${y1}`;\r\n          pathBottom = ` L ${x} ${y0}` + pathBottom;\r\n        }\r\n      }\r\n    });\r\n    \r\n    return pathTop + pathBottom + ' Z';\r\n  };\r\n\r\n  const classes = [\r\n    'snake-stream-graph',\r\n    `snake-stream-graph--${variant}`,\r\n    animate && 'snake-stream-graph--animated',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const variantStyles = {\r\n    minimal: {\r\n      showGrid: false,\r\n      showLegend: false,\r\n    },\r\n    detailed: {\r\n      showGrid: true,\r\n      showLegend: true,\r\n      gridLines: 10,\r\n    },\r\n    interactive: {\r\n      showGrid: true,\r\n      showLegend: true,\r\n    },\r\n  };\r\n\r\n  const variantProps = variant !== 'default' ? variantStyles[variant] || {} : {};\r\n  const finalShowGrid = variantProps.showGrid ?? showGrid;\r\n  const finalShowLegend = variantProps.showLegend ?? showLegend;\r\n  const finalGridLines = variantProps.gridLines ?? gridLines;\r\n\r\n  // Generate grid positions\r\n  const gridPositions = useMemo(() => {\r\n    return Array.from({ length: finalGridLines + 1 }, (_, i) => \r\n      (i / finalGridLines) * svgHeight\r\n    );\r\n  }, [finalGridLines, svgHeight]);\r\n\r\n  // Generate x-axis labels\r\n  const xLabels = useMemo(() => {\r\n    const step = Math.ceil(data.length / 8); // Show max 8 labels\r\n    return data.filter((_, i) => i % step === 0).map((d, i) => ({\r\n      value: d.x,\r\n      position: (i * step) / (data.length - 1) * svgWidth,\r\n    }));\r\n  }, [data, svgWidth]);\r\n\r\n  return (\r\n    <div className={classes}>\r\n      <div className=\"snake-stream-graph__corner snake-stream-graph__corner--top-left\" />\r\n      <div className=\"snake-stream-graph__corner snake-stream-graph__corner--top-right\" />\r\n      \r\n      <div className=\"snake-stream-graph__container\">\r\n        <svg\r\n          width={typeof width === 'number' ? width : width}\r\n          height={typeof height === 'number' ? height : height}\r\n          viewBox={`0 0 ${svgWidth} ${svgHeight}`}\r\n          className=\"snake-stream-graph__svg\"\r\n          preserveAspectRatio=\"xMidYMid meet\"\r\n        >\r\n          {/* Grid */}\r\n          {finalShowGrid && (\r\n            <g className=\"snake-stream-graph__grid\">\r\n              {gridPositions.map((y, i) => (\r\n                <line\r\n                  key={`grid-${i}`}\r\n                  x1={0}\r\n                  y1={y}\r\n                  x2={svgWidth}\r\n                  y2={y}\r\n                  stroke={gridColor}\r\n                  strokeWidth=\"1\"\r\n                  strokeOpacity=\"0.3\"\r\n                  className=\"snake-stream-graph__grid-line\"\r\n                />\r\n              ))}\r\n            </g>\r\n          )}\r\n\r\n          {/* Streams */}\r\n          <g className=\"snake-stream-graph__streams\">\r\n            {stackedData.map((layer, i) => {\r\n              const isActive = activeLayer === keys[i];\r\n              const isHovered = hoveredLayer === keys[i];\r\n              const isInteractive = variant === 'interactive';\r\n              const isDimmed = isInteractive && activeLayer && !isActive;\r\n              \r\n              return (\r\n                <path\r\n                  key={`stream-${i}`}\r\n                  d={generatePath(layer)}\r\n                  fill={colors[i % colors.length]}\r\n                  fillOpacity={\r\n                    isDimmed ? '0.1' : \r\n                    isActive ? '0.7' : \r\n                    isHovered ? '0.6' : \r\n                    '0.4'\r\n                  }\r\n                  stroke={colors[i % colors.length]}\r\n                  strokeWidth={isActive || isHovered ? '2' : '1'}\r\n                  strokeOpacity={\r\n                    isDimmed ? '0.2' : \r\n                    isActive ? '1' : \r\n                    isHovered ? '0.8' : \r\n                    '0.6'\r\n                  }\r\n                  className={`snake-stream-graph__stream ${isActive ? 'snake-stream-graph__stream--active' : ''}`}\r\n                  style={{\r\n                    animationDelay: animate ? `${i * 100}ms` : '0',\r\n                    cursor: isInteractive ? 'pointer' : 'default',\r\n                    transition: 'all 0.3s ease',\r\n                  }}\r\n                  onClick={() => {\r\n                    if (isInteractive) {\r\n                      const newActive = isActive ? null : keys[i];\r\n                      setActiveLayer(newActive);\r\n                      onLayerClick?.(keys[i], i);\r\n                    }\r\n                  }}\r\n                  onMouseEnter={() => isInteractive && setHoveredLayer(keys[i])}\r\n                  onMouseLeave={() => isInteractive && setHoveredLayer(null)}\r\n                />\r\n              );\r\n            })}\r\n          </g>\r\n\r\n        </svg>\r\n\r\n        {/* X-axis labels */}\r\n        {showLabels && (\r\n          <div className=\"snake-stream-graph__labels\">\r\n            {xLabels.map((label, i) => (\r\n              <div\r\n                key={`label-${i}`}\r\n                className=\"snake-stream-graph__label\"\r\n                style={{ left: `${label.position}px` }}\r\n              >\r\n                {formatLabel(label.value)}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n\r\n        {/* Legend */}\r\n        {finalShowLegend && (\r\n          <div className={`snake-stream-graph__legend ${animateLegend ? 'snake-stream-graph__legend--animated' : ''}`}>\r\n            {keys.map((key, i) => {\r\n              const isActive = activeLayer === key;\r\n              const isInteractive = variant === 'interactive';\r\n              const isDimmed = isInteractive && activeLayer && !isActive;\r\n              \r\n              return (\r\n                <div \r\n                  key={`legend-${i}`} \r\n                  className={`snake-stream-graph__legend-item ${isActive ? 'snake-stream-graph__legend-item--active' : ''}`}\r\n                  style={{\r\n                    opacity: isDimmed ? 0.3 : 1,\r\n                    cursor: isInteractive ? 'pointer' : 'default',\r\n                  }}\r\n                  onClick={() => {\r\n                    if (isInteractive) {\r\n                      const newActive = isActive ? null : key;\r\n                      setActiveLayer(newActive);\r\n                      onLayerClick?.(key, i);\r\n                    }\r\n                  }}\r\n                  onMouseEnter={() => isInteractive && setHoveredLayer(key)}\r\n                  onMouseLeave={() => isInteractive && setHoveredLayer(null)}\r\n                >\r\n                  <span \r\n                    className=\"snake-stream-graph__legend-color\"\r\n                    style={{ \r\n                      backgroundColor: colors[i % colors.length],\r\n                      borderWidth: isActive ? '2px' : '1px',\r\n                      borderColor: isActive ? '#bdbdbd' : '#3a3a3a',\r\n                    }}\r\n                  />\r\n                  <span className=\"snake-stream-graph__legend-label\">{key}</span>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"snake-stream-graph__corner snake-stream-graph__corner--bottom-left\" />\r\n      <div className=\"snake-stream-graph__corner snake-stream-graph__corner--bottom-right\" />\r\n    </div>\r\n  );\r\n};","import React, { useState, useEffect } from 'react';\r\nimport './subcard.css';\r\n\r\nexport interface SubCardProps {\r\n  /** Card content */\r\n  children: React.ReactNode;\r\n  /** Optional header content */\r\n  header?: React.ReactNode;\r\n  /** Optional footer content */\r\n  footer?: React.ReactNode;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n  /** Size variant */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** Whether the card is interactive (hoverable) */\r\n  interactive?: boolean;\r\n  /** Click handler for interactive cards */\r\n  onClick?: () => void;\r\n  /** Color variant */\r\n  variant?: 'default' | 'success' | 'warning' | 'danger' | 'info' | 'inactive';\r\n  /** Custom color for corner plus symbols */\r\n  cornerColor?: string;\r\n  /** Enable transition animation */\r\n  transitionIn?: boolean;\r\n  /** Type of transition animation */\r\n  transitionType?: 'expand' | 'fade' | 'slide-up' | 'slide-down' | 'slide-left' | 'slide-right';\r\n  /** Transition speed in milliseconds */\r\n  transitionSpeed?: number;\r\n  /** Delay before transition starts in milliseconds */\r\n  transitionDelay?: number;\r\n  /** Callback when transition completes */\r\n  onTransitionComplete?: () => void;\r\n}\r\n\r\n/** SubCard component with plus symbols in corners */\r\nexport const SubCard: React.FC<SubCardProps> = ({\r\n  children,\r\n  header,\r\n  footer,\r\n  className = '',\r\n  size = 'medium',\r\n  interactive = false,\r\n  onClick,\r\n  variant = 'default',\r\n  cornerColor,\r\n  transitionIn = false,\r\n  transitionType = 'expand',\r\n  transitionSpeed = 300,\r\n  transitionDelay = 0,\r\n  onTransitionComplete,\r\n}) => {\r\n  const [isVisible, setIsVisible] = useState(!transitionIn);\r\n  const [isAnimating, setIsAnimating] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (transitionIn) {\r\n      const delayTimer = setTimeout(() => {\r\n        setIsVisible(true);\r\n        setIsAnimating(true);\r\n        \r\n        const completeTimer = setTimeout(() => {\r\n          setIsAnimating(false);\r\n          onTransitionComplete?.();\r\n        }, transitionSpeed);\r\n\r\n        return () => clearTimeout(completeTimer);\r\n      }, transitionDelay);\r\n\r\n      return () => clearTimeout(delayTimer);\r\n    }\r\n  }, [transitionIn, transitionDelay, transitionSpeed, onTransitionComplete]);\r\n\r\n  const classes = [\r\n    'snake-subcard',\r\n    `snake-subcard--${size}`,\r\n    `snake-subcard--${variant}`,\r\n    interactive && 'snake-subcard--interactive',\r\n    transitionIn && 'snake-subcard--transition',\r\n    transitionIn && `snake-subcard--transition-${transitionType}`,\r\n    isVisible && 'snake-subcard--visible',\r\n    isAnimating && 'snake-subcard--animating',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const Component = interactive ? 'button' : 'div';\r\n\r\n  const transitionStyle = transitionIn ? {\r\n    '--transition-speed': `${transitionSpeed}ms`,\r\n  } as React.CSSProperties : undefined;\r\n\r\n  return (\r\n    <Component\r\n      className={classes}\r\n      onClick={interactive ? onClick : undefined}\r\n      type={interactive ? 'button' : undefined}\r\n      style={transitionStyle}\r\n    >\r\n      <div\r\n        className=\"snake-subcard__corner snake-subcard__corner--top-left\"\r\n        style={cornerColor ? { color: cornerColor } : undefined}\r\n      >\r\n        ＋\r\n      </div>\r\n      <div\r\n        className=\"snake-subcard__corner snake-subcard__corner--top-right\"\r\n        style={cornerColor ? { color: cornerColor } : undefined}\r\n      >\r\n        ＋\r\n      </div>\r\n      <div\r\n        className=\"snake-subcard__corner snake-subcard__corner--bottom-left\"\r\n        style={cornerColor ? { color: cornerColor } : undefined}\r\n      >\r\n        ＋\r\n      </div>\r\n      <div\r\n        className=\"snake-subcard__corner snake-subcard__corner--bottom-right\"\r\n        style={cornerColor ? { color: cornerColor } : undefined}\r\n      >\r\n        ＋\r\n      </div>\r\n\r\n      {header && <div className=\"snake-subcard__header\">{header}</div>}\r\n\r\n      <div className=\"snake-subcard__content\">{children}</div>\r\n\r\n      {footer && <div className=\"snake-subcard__footer\">{footer}</div>}\r\n    </Component>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport './table.css';\r\n\r\n// Icon component for ChevronDown from pixel-icon-library\r\nconst ChevronDownIcon = ({ className = '' }: { className?: string }) => (\r\n  <svg className={className} viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\">\r\n    <polygon points=\"23 8 23 9 22 9 22 10 21 10 21 11 20 11 20 12 19 12 19 13 18 13 18 14 17 14 17 15 16 15 16 16 15 16 15 17 14 17 14 18 13 18 13 19 11 19 11 18 10 18 10 17 9 17 9 16 8 16 8 15 7 15 7 14 6 14 6 13 5 13 5 12 4 12 4 11 3 11 3 10 2 10 2 9 1 9 1 8 2 8 2 7 3 7 3 6 4 6 4 7 5 7 5 8 6 8 6 9 7 9 7 10 8 10 8 11 9 11 9 12 10 12 10 13 11 13 11 14 13 14 13 13 14 13 14 12 15 12 15 11 16 11 16 10 17 10 17 9 18 9 18 8 19 8 19 7 20 7 20 6 21 6 21 7 22 7 22 8 23 8\"/>\r\n  </svg>\r\n);\r\n\r\ninterface TableColumn<T> {\r\n  key: keyof T | string;\r\n  header: React.ReactNode;\r\n  render?: (value: any, row: T, index: number) => React.ReactNode;\r\n  width?: string;\r\n  align?: 'left' | 'center' | 'right';\r\n  sortable?: boolean;\r\n}\r\n\r\nexport interface TableProps<T> {\r\n  /** Table data */\r\n  data: T[];\r\n  /** Column definitions */\r\n  columns: TableColumn<T>[];\r\n  /** Size variant */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** Table variant */\r\n  variant?: 'default' | 'striped' | 'bordered';\r\n  /** Sticky header */\r\n  stickyHeader?: boolean;\r\n  /** Row selection */\r\n  selectable?: boolean;\r\n  /** Selected rows */\r\n  selectedRows?: number[];\r\n  /** Selection change handler */\r\n  onSelectionChange?: (selectedRows: number[]) => void;\r\n  /** Row click handler */\r\n  onRowClick?: (row: T, index: number) => void;\r\n  /** Sort handler */\r\n  onSort?: (column: string, direction: 'asc' | 'desc') => void;\r\n  /** Current sort column */\r\n  sortColumn?: string;\r\n  /** Current sort direction */\r\n  sortDirection?: 'asc' | 'desc';\r\n  /** Loading state */\r\n  loading?: boolean;\r\n  /** Empty state message */\r\n  emptyMessage?: string;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n}\r\n\r\n/** Table component for displaying tabular data */\r\nexport function Table<T extends Record<string, any>>({\r\n  data,\r\n  columns,\r\n  size = 'medium',\r\n  variant = 'default',\r\n  stickyHeader = false,\r\n  selectable = false,\r\n  selectedRows = [],\r\n  onSelectionChange,\r\n  onRowClick,\r\n  onSort,\r\n  sortColumn,\r\n  sortDirection,\r\n  loading = false,\r\n  emptyMessage = 'No data available',\r\n  className = '',\r\n}: TableProps<T>) {\r\n  const tableClasses = [\r\n    'snake-table',\r\n    `snake-table--${size}`,\r\n    `snake-table--${variant}`,\r\n    stickyHeader && 'snake-table--sticky-header',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const handleSelectAll = () => {\r\n    if (!onSelectionChange) return;\r\n\r\n    if (selectedRows.length === data.length) {\r\n      onSelectionChange([]);\r\n    } else {\r\n      onSelectionChange(data.map((_, index) => index));\r\n    }\r\n  };\r\n\r\n  const handleSelectRow = (index: number) => {\r\n    if (!onSelectionChange) return;\r\n\r\n    if (selectedRows.includes(index)) {\r\n      onSelectionChange(selectedRows.filter((i) => i !== index));\r\n    } else {\r\n      onSelectionChange([...selectedRows, index]);\r\n    }\r\n  };\r\n\r\n  const handleSort = (column: string) => {\r\n    if (!onSort) return;\r\n\r\n    const newDirection = sortColumn === column && sortDirection === 'asc' ? 'desc' : 'asc';\r\n    onSort(column, newDirection);\r\n  };\r\n\r\n  const getValue = (row: T, key: string) => {\r\n    const keys = key.split('.');\r\n    let value: any = row;\r\n\r\n    for (const k of keys) {\r\n      value = value?.[k];\r\n    }\r\n\r\n    return value;\r\n  };\r\n\r\n  return (\r\n    <div className=\"snake-table-wrapper\">\r\n      <table className={tableClasses}>\r\n        <thead className=\"snake-table__head\">\r\n          <tr className=\"snake-table__row\">\r\n            {selectable && (\r\n              <th className=\"snake-table__cell snake-table__cell--checkbox\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  className=\"snake-table__checkbox\"\r\n                  checked={selectedRows.length === data.length && data.length > 0}\r\n                  indeterminate={selectedRows.length > 0 && selectedRows.length < data.length}\r\n                  onChange={handleSelectAll}\r\n                  disabled={loading || data.length === 0}\r\n                />\r\n              </th>\r\n            )}\r\n            {columns.map((column, index) => (\r\n              <th\r\n                key={index}\r\n                className={[\r\n                  'snake-table__cell',\r\n                  'snake-table__cell--header',\r\n                  column.align && `snake-table__cell--${column.align}`,\r\n                  column.sortable && 'snake-table__cell--sortable',\r\n                ]\r\n                  .filter(Boolean)\r\n                  .join(' ')}\r\n                style={{ width: column.width }}\r\n                onClick={() => column.sortable && handleSort(column.key as string)}\r\n              >\r\n                <div className=\"snake-table__header-content\">\r\n                  {column.header}\r\n                  {column.sortable && (\r\n                    <ChevronDownIcon\r\n                      className={[\r\n                        'snake-table__sort-icon',\r\n                        sortColumn === column.key && `snake-table__sort-icon--${sortDirection}`,\r\n                      ]\r\n                        .filter(Boolean)\r\n                        .join(' ')}\r\n                    />\r\n                  )}\r\n                </div>\r\n              </th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody className=\"snake-table__body\">\r\n          {loading ? (\r\n            <tr>\r\n              <td\r\n                colSpan={columns.length + (selectable ? 1 : 0)}\r\n                className=\"snake-table__cell snake-table__cell--loading\"\r\n              >\r\n                <div className=\"snake-table__loading\">\r\n                  <span className=\"snake-table__loading-bar\" />\r\n                  <span className=\"snake-table__loading-bar\" />\r\n                  <span className=\"snake-table__loading-bar\" />\r\n                </div>\r\n              </td>\r\n            </tr>\r\n          ) : data.length === 0 ? (\r\n            <tr>\r\n              <td\r\n                colSpan={columns.length + (selectable ? 1 : 0)}\r\n                className=\"snake-table__cell snake-table__cell--empty\"\r\n              >\r\n                {emptyMessage}\r\n              </td>\r\n            </tr>\r\n          ) : (\r\n            data.map((row, rowIndex) => (\r\n              <tr\r\n                key={rowIndex}\r\n                className={[\r\n                  'snake-table__row',\r\n                  selectedRows.includes(rowIndex) && 'snake-table__row--selected',\r\n                  onRowClick && 'snake-table__row--clickable',\r\n                ]\r\n                  .filter(Boolean)\r\n                  .join(' ')}\r\n                onClick={() => onRowClick?.(row, rowIndex)}\r\n              >\r\n                {selectable && (\r\n                  <td className=\"snake-table__cell snake-table__cell--checkbox\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      className=\"snake-table__checkbox\"\r\n                      checked={selectedRows.includes(rowIndex)}\r\n                      onChange={(e) => {\r\n                        e.stopPropagation();\r\n                        handleSelectRow(rowIndex);\r\n                      }}\r\n                    />\r\n                  </td>\r\n                )}\r\n                {columns.map((column, colIndex) => (\r\n                  <td\r\n                    key={colIndex}\r\n                    className={[\r\n                      'snake-table__cell',\r\n                      column.align && `snake-table__cell--${column.align}`,\r\n                    ]\r\n                      .filter(Boolean)\r\n                      .join(' ')}\r\n                  >\r\n                    {/* Only add corner accent on bottom-right of each cell for bordered variant */}\r\n                    {variant === 'bordered' &&\r\n                      rowIndex < data.length - 1 &&\r\n                      colIndex < columns.length - 1 && (\r\n                      <span className=\"snake-table__corner\">+</span>\r\n                    )}\r\n                    {column.render\r\n                      ? column.render(getValue(row, column.key as string), row, rowIndex)\r\n                      : getValue(row, column.key as string)}\r\n                  </td>\r\n                ))}\r\n              </tr>\r\n            ))\r\n          )}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport './tabs.css';\r\n\r\ninterface Tab {\r\n  id: string;\r\n  label: string;\r\n  content: React.ReactNode;\r\n  disabled?: boolean;\r\n  icon?: React.ReactNode;\r\n}\r\n\r\nexport interface TabsProps {\r\n  /** Tab items */\r\n  tabs: Tab[];\r\n  /** Active tab ID */\r\n  activeTab?: string;\r\n  /** Change handler */\r\n  onChange?: (tabId: string) => void;\r\n  /** Visual variant */\r\n  variant?: 'default' | 'boxed' | 'underline';\r\n  /** Size variant */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** Full width tabs */\r\n  fullWidth?: boolean;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n}\r\n\r\n/** Tabs component for organizing content */\r\nexport const Tabs: React.FC<TabsProps> = ({\r\n  tabs,\r\n  activeTab: controlledActiveTab,\r\n  onChange,\r\n  variant = 'default',\r\n  size = 'medium',\r\n  fullWidth = false,\r\n  className = '',\r\n}) => {\r\n  const [internalActiveTab, setInternalActiveTab] = useState(tabs[0]?.id || '');\r\n  const activeTab = controlledActiveTab !== undefined ? controlledActiveTab : internalActiveTab;\r\n\r\n  const handleTabClick = (tabId: string) => {\r\n    if (onChange) {\r\n      onChange(tabId);\r\n    } else {\r\n      setInternalActiveTab(tabId);\r\n    }\r\n  };\r\n\r\n  const activeTabContent = tabs.find((tab) => tab.id === activeTab)?.content;\r\n\r\n  const tabsClasses = [\r\n    'snake-tabs',\r\n    `snake-tabs--${variant}`,\r\n    `snake-tabs--${size}`,\r\n    fullWidth && 'snake-tabs--full-width',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  return (\r\n    <div className={tabsClasses}>\r\n      <div className=\"snake-tabs__header\">\r\n        <div className=\"snake-tabs__list\" role=\"tablist\">\r\n          {tabs.map((tab) => (\r\n            <button\r\n              key={tab.id}\r\n              type=\"button\"\r\n              role=\"tab\"\r\n              aria-selected={activeTab === tab.id}\r\n              aria-controls={`tabpanel-${tab.id}`}\r\n              className={[\r\n                'snake-tabs__tab',\r\n                activeTab === tab.id && 'snake-tabs__tab--active',\r\n                tab.disabled && 'snake-tabs__tab--disabled',\r\n              ]\r\n                .filter(Boolean)\r\n                .join(' ')}\r\n              onClick={() => !tab.disabled && handleTabClick(tab.id)}\r\n              disabled={tab.disabled}\r\n            >\r\n              {tab.icon && <span className=\"snake-tabs__icon\">{tab.icon}</span>}\r\n              <span className=\"snake-tabs__label\">{tab.label}</span>\r\n            </button>\r\n          ))}\r\n        </div>\r\n        <div className=\"snake-tabs__indicator\" />\r\n      </div>\r\n\r\n      <div className=\"snake-tabs__content\">\r\n        {tabs.map((tab) => (\r\n          <div\r\n            key={tab.id}\r\n            id={`tabpanel-${tab.id}`}\r\n            role=\"tabpanel\"\r\n            aria-labelledby={tab.id}\r\n            className={['snake-tabs__panel', activeTab === tab.id && 'snake-tabs__panel--active']\r\n              .filter(Boolean)\r\n              .join(' ')}\r\n          >\r\n            {activeTab === tab.id && tab.content}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport './text.css';\r\n\r\nexport interface TextProps {\r\n  /** HTML element to render */\r\n  as?:\r\n    | 'p'\r\n    | 'span'\r\n    | 'div'\r\n    | 'blockquote'\r\n    | 'figcaption'\r\n    | 'small'\r\n    | 'strong'\r\n    | 'em'\r\n    | 'mark'\r\n    | 'del'\r\n    | 'ins'\r\n    | 'sub'\r\n    | 'sup';\r\n  /** Text size */\r\n  size?: '2xl' | 'xl' | 'lg' | 'md' | 'sm' | 'xs';\r\n  /** Color variant */\r\n  variant?:\r\n    | 'default'\r\n    | 'primary'\r\n    | 'secondary'\r\n    | 'muted'\r\n    | 'success'\r\n    | 'warning'\r\n    | 'danger'\r\n    | 'info';\r\n  /** Font weight */\r\n  weight?: 'normal' | 'medium' | 'bold';\r\n  /** Text alignment */\r\n  align?: 'left' | 'center' | 'right' | 'justify';\r\n  /** Text transform */\r\n  transform?: 'none' | 'uppercase' | 'lowercase' | 'capitalize';\r\n  /** Font style */\r\n  italic?: boolean;\r\n  /** Underline decoration */\r\n  underline?: boolean;\r\n  /** Strike through */\r\n  strike?: boolean;\r\n  /** Monospace font */\r\n  mono?: boolean;\r\n  /** Truncate with ellipsis */\r\n  truncate?: boolean;\r\n  /** Line clamp (multi-line truncation) */\r\n  clamp?: number;\r\n  /** Line height */\r\n  leading?: 'tight' | 'normal' | 'relaxed' | 'loose';\r\n  /** Letter spacing */\r\n  tracking?: 'tight' | 'normal' | 'wide';\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n  /** Children content */\r\n  children: React.ReactNode;\r\n}\r\n\r\n/** Text component for body text and inline elements */\r\nexport const Text: React.FC<TextProps> = ({\r\n  as = 'p',\r\n  size = 'md',\r\n  variant = 'default',\r\n  weight = 'normal',\r\n  align = 'left',\r\n  transform = 'none',\r\n  italic = false,\r\n  underline = false,\r\n  strike = false,\r\n  mono = false,\r\n  truncate = false,\r\n  clamp,\r\n  leading = 'normal',\r\n  tracking = 'normal',\r\n  className = '',\r\n  children,\r\n}) => {\r\n  const Component = as;\r\n\r\n  const textClasses = [\r\n    'snake-text',\r\n    `snake-text--${size}`,\r\n    `snake-text--${variant}`,\r\n    `snake-text--weight-${weight}`,\r\n    `snake-text--align-${align}`,\r\n    `snake-text--leading-${leading}`,\r\n    `snake-text--tracking-${tracking}`,\r\n    transform !== 'none' && `snake-text--${transform}`,\r\n    italic && 'snake-text--italic',\r\n    underline && 'snake-text--underline',\r\n    strike && 'snake-text--strike',\r\n    mono && 'snake-text--mono',\r\n    truncate && 'snake-text--truncate',\r\n    clamp && 'snake-text--clamp',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const style = clamp\r\n    ? ({\r\n      '--line-clamp': clamp,\r\n      WebkitLineClamp: clamp,\r\n    } as React.CSSProperties)\r\n    : undefined;\r\n\r\n  return (\r\n    <Component className={textClasses} style={style}>\r\n      {children}\r\n    </Component>\r\n  );\r\n};\r\n","import React, { useRef, useEffect } from 'react';\r\nimport './textarea.css';\r\n\r\nexport interface TextareaProps extends Omit<React.TextareaHTMLAttributes<HTMLTextAreaElement>, 'size'> {\r\n  /** Label for the textarea */\r\n  label?: string;\r\n  /** Helper text */\r\n  helperText?: string;\r\n  /** Error message */\r\n  error?: string;\r\n  /** Size variant */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** Visual variant */\r\n  variant?: 'default' | 'ghost' | 'bordered';\r\n  /** Full width */\r\n  fullWidth?: boolean;\r\n  /** Auto-resize to content */\r\n  autoResize?: boolean;\r\n  /** Minimum rows for auto-resize */\r\n  minRows?: number;\r\n  /** Maximum rows for auto-resize */\r\n  maxRows?: number;\r\n  /** Show character count */\r\n  showCount?: boolean;\r\n  /** Resize behavior */\r\n  resize?: 'none' | 'vertical' | 'horizontal' | 'both';\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n}\r\n\r\n/** Textarea component for multi-line text input */\r\nexport const Textarea: React.FC<TextareaProps> = ({\r\n  label,\r\n  helperText,\r\n  error,\r\n  size = 'medium',\r\n  variant = 'default',\r\n  fullWidth = false,\r\n  autoResize = false,\r\n  minRows = 3,\r\n  maxRows = 10,\r\n  showCount = false,\r\n  resize = 'vertical',\r\n  disabled = false,\r\n  maxLength,\r\n  value,\r\n  onChange,\r\n  className = '',\r\n  ...props\r\n}) => {\r\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\r\n  const [charCount, setCharCount] = React.useState(value ? String(value).length : 0);\r\n\r\n  const adjustHeight = () => {\r\n    const textarea = textareaRef.current;\r\n    if (!textarea || !autoResize) return;\r\n\r\n    // Reset height to get accurate scrollHeight\r\n    textarea.style.height = 'auto';\r\n\r\n    const lineHeight = parseInt(getComputedStyle(textarea).lineHeight);\r\n    const minHeight = minRows * lineHeight;\r\n    const maxHeight = maxRows * lineHeight;\r\n\r\n    const newHeight = Math.min(Math.max(textarea.scrollHeight, minHeight), maxHeight);\r\n    textarea.style.height = `${newHeight}px`;\r\n  };\r\n\r\n  useEffect(() => {\r\n    adjustHeight();\r\n  }, [value, autoResize]);\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    setCharCount(e.target.value.length);\r\n    onChange?.(e);\r\n    adjustHeight();\r\n  };\r\n\r\n  const wrapperClasses = [\r\n    'snake-textarea-wrapper',\r\n    `snake-textarea-wrapper--${size}`,\r\n    fullWidth && 'snake-textarea-wrapper--full-width',\r\n    error && 'snake-textarea-wrapper--error',\r\n    disabled && 'snake-textarea-wrapper--disabled',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const textareaClasses = [\r\n    'snake-textarea',\r\n    `snake-textarea--${variant}`,\r\n    autoResize && 'snake-textarea--auto-resize',\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const resizeStyle = autoResize ? 'none' : resize;\r\n\r\n  return (\r\n    <div className={wrapperClasses}>\r\n      {label && <label className=\"snake-textarea__label\">{label}</label>}\r\n\r\n      <div className=\"snake-textarea__container\">\r\n        <textarea\r\n          ref={textareaRef}\r\n          className={textareaClasses}\r\n          disabled={disabled}\r\n          value={value}\r\n          onChange={handleChange}\r\n          maxLength={maxLength}\r\n          rows={autoResize ? minRows : props.rows}\r\n          style={{ resize: resizeStyle }}\r\n          {...props}\r\n        />\r\n\r\n        <div className=\"snake-textarea__corner snake-textarea__corner--top-left\" />\r\n        <div className=\"snake-textarea__corner snake-textarea__corner--top-right\" />\r\n        <div className=\"snake-textarea__corner snake-textarea__corner--bottom-left\" />\r\n        <div className=\"snake-textarea__corner snake-textarea__corner--bottom-right\" />\r\n      </div>\r\n\r\n      <div className=\"snake-textarea__footer\">\r\n        {error ? (\r\n          <span className=\"snake-textarea__error\">{error}</span>\r\n        ) : helperText ? (\r\n          <span className=\"snake-textarea__helper\">{helperText}</span>\r\n        ) : null}\r\n\r\n        {showCount && (\r\n          <span className=\"snake-textarea__count\">\r\n            {charCount}\r\n            {maxLength && `/${maxLength}`}\r\n          </span>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport './toast.css';\r\n\r\n// Icon components from pixel-icon-library\r\nconst AngleRightIcon = ({ className = '' }: { className?: string }) => (\r\n  <svg className={className} viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\">\r\n    <polygon points=\"7 19 7 17 8 17 8 16 9 16 9 15 10 15 10 14 11 14 11 13 12 13 12 11 11 11 11 10 10 10 10 9 9 9 9 8 8 8 8 7 7 7 7 5 8 5 8 4 10 4 10 5 11 5 11 6 12 6 12 7 13 7 13 8 14 8 14 9 15 9 15 10 16 10 16 11 17 11 17 13 16 13 16 14 15 14 15 15 14 15 14 16 13 16 13 17 12 17 12 18 11 18 11 19 10 19 10 20 8 20 8 19 7 19\"/>\r\n  </svg>\r\n);\r\n\r\nconst CheckIcon = ({ className = '' }: { className?: string }) => (\r\n  <svg className={className} viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\">\r\n    <polygon points=\"23 5 23 6 22 6 22 7 21 7 21 8 20 8 20 9 19 9 19 10 18 10 18 11 17 11 17 12 16 12 16 13 15 13 15 14 14 14 14 15 13 15 13 16 12 16 12 17 11 17 11 18 10 18 10 19 8 19 8 18 7 18 7 17 6 17 6 16 5 16 5 15 4 15 4 14 3 14 3 13 2 13 2 12 1 12 1 11 2 11 2 10 3 10 3 9 4 9 4 10 5 10 5 11 6 11 6 12 7 12 7 13 8 13 8 14 10 14 10 13 11 13 11 12 12 12 12 11 13 11 13 10 14 10 14 9 15 9 15 8 16 8 16 7 17 7 17 6 18 6 18 5 19 5 19 4 20 4 20 3 21 3 21 4 22 4 22 5 23 5\"/>\r\n  </svg>\r\n);\r\n\r\nconst ExclamationTriangleIcon = ({ className = '' }: { className?: string }) => (\r\n  <svg className={className} viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\">\r\n    <path d=\"m22,20v-2h-1v-2h-1v-2h-1v-2h-1v-2h-1v-2h-1v-2h-1v-2h-1v-2h-1v-1h-2v1h-1v2h-1v2h-1v2h-1v2h-1v2h-1v2h-1v2h-1v2h-1v2h-1v2h1v1h20v-1h1v-2h-1Zm-12-9h4v3h-1v3h-2v-3h-1v-3Zm1,7h2v2h-2v-2Z\"/>\r\n  </svg>\r\n);\r\n\r\nconst TimesIcon = ({ className = '' }: { className?: string }) => (\r\n  <svg className={className} viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\">\r\n    <polygon points=\"15 13 16 13 16 14 17 14 17 15 18 15 18 16 19 16 19 17 20 17 20 18 21 18 21 19 22 19 22 20 21 20 21 21 20 21 20 22 19 22 19 21 18 21 18 20 17 20 17 19 16 19 16 18 15 18 15 17 14 17 14 16 13 16 13 15 11 15 11 16 10 16 10 17 9 17 9 18 8 18 8 19 7 19 7 20 6 20 6 21 5 21 5 22 4 22 4 21 3 21 3 20 2 20 2 19 3 19 3 18 4 18 4 17 5 17 5 16 6 16 6 15 7 15 7 14 8 14 8 13 9 13 9 11 8 11 8 10 7 10 7 9 6 9 6 8 5 8 5 7 4 7 4 6 3 6 3 5 2 5 2 4 3 4 3 3 4 3 4 2 5 2 5 3 6 3 6 4 7 4 7 5 8 5 8 6 9 6 9 7 10 7 10 8 11 8 11 9 13 9 13 8 14 8 14 7 15 7 15 6 16 6 16 5 17 5 17 4 18 4 18 3 19 3 19 2 20 2 20 3 21 3 21 4 22 4 22 5 21 5 21 6 20 6 20 7 19 7 19 8 18 8 18 9 17 9 17 10 16 10 16 11 15 11 15 13\"/>\r\n  </svg>\r\n);\r\n\r\nconst InfoCircleIcon = ({ className = '' }: { className?: string }) => (\r\n  <svg className={className} viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\">\r\n    <path d=\"m22,9v-2h-1v-2h-1v-1h-1v-1h-2v-1h-2v-1h-6v1h-2v1h-2v1h-1v1h-1v2h-1v2h-1v6h1v2h1v2h1v1h1v1h2v1h2v1h6v-1h2v-1h2v-1h1v-1h1v-2h1v-2h1v-6h-1Zm-11-3h2v2h-2v-2Zm-1,9h1v-5h-1v-1h3v6h1v2h-4v-2Z\"/>\r\n  </svg>\r\n);\r\n\r\nexport interface ToastProps {\r\n  /** Toast content */\r\n  message: string;\r\n  /** Toast variant */\r\n  variant?: 'default' | 'success' | 'warning' | 'danger' | 'info';\r\n  /** Toast position */\r\n  position?:\r\n    | 'top-left'\r\n    | 'top-center'\r\n    | 'top-right'\r\n    | 'bottom-left'\r\n    | 'bottom-center'\r\n    | 'bottom-right';\r\n  /** Duration in milliseconds (0 for persistent) */\r\n  duration?: number;\r\n  /** Show close button */\r\n  closable?: boolean;\r\n  /** Close handler */\r\n  onClose?: () => void;\r\n  /** Show icon */\r\n  showIcon?: boolean;\r\n  /** Custom icon */\r\n  icon?: React.ReactNode;\r\n  /** Action button */\r\n  action?: {\r\n    label: string;\r\n    onClick: () => void;\r\n  };\r\n  /** Progress bar */\r\n  showProgress?: boolean;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n}\r\n\r\n/** Toast component for notifications */\r\nexport const Toast: React.FC<ToastProps> = ({\r\n  message,\r\n  variant = 'default',\r\n  position = 'bottom-right',\r\n  duration = 3000,\r\n  closable = true,\r\n  onClose,\r\n  showIcon = true,\r\n  icon,\r\n  action,\r\n  showProgress = false,\r\n  className = '',\r\n}) => {\r\n  const [isVisible, setIsVisible] = useState(true);\r\n  const [progress, setProgress] = useState(100);\r\n\r\n  useEffect(() => {\r\n    if (duration > 0) {\r\n      const timer = setTimeout(() => {\r\n        setIsVisible(false);\r\n        setTimeout(() => onClose?.(), 300);\r\n      }, duration);\r\n\r\n      if (showProgress) {\r\n        const interval = setInterval(() => {\r\n          setProgress((prev) => {\r\n            const newProgress = prev - 100 / (duration / 100);\r\n            return newProgress > 0 ? newProgress : 0;\r\n          });\r\n        }, 100);\r\n\r\n        return () => {\r\n          clearTimeout(timer);\r\n          clearInterval(interval);\r\n        };\r\n      }\r\n\r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [duration, onClose, showProgress]);\r\n\r\n  const handleClose = () => {\r\n    setIsVisible(false);\r\n    setTimeout(() => onClose?.(), 300);\r\n  };\r\n\r\n  const getDefaultIcon = () => {\r\n    if (icon) return icon;\r\n\r\n    switch (variant) {\r\n      case 'success':\r\n        return <CheckIcon />;\r\n      case 'warning':\r\n        return <ExclamationTriangleIcon />;\r\n      case 'danger':\r\n        return <TimesIcon />;\r\n      case 'info':\r\n        return <InfoCircleIcon />;\r\n      default:\r\n        return <AngleRightIcon />;\r\n    }\r\n  };\r\n\r\n  const toastClasses = [\r\n    'snake-toast',\r\n    `snake-toast--${variant}`,\r\n    `snake-toast--${position}`,\r\n    !isVisible && 'snake-toast--hidden',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  return (\r\n    <div className={toastClasses} role=\"alert\">\r\n      {showIcon && <div className=\"snake-toast__icon\">{getDefaultIcon()}</div>}\r\n\r\n      <div className=\"snake-toast__content\">\r\n        <div className=\"snake-toast__message\">{message}</div>\r\n        {action && (\r\n          <button className=\"snake-toast__action\" onClick={action.onClick}>\r\n            {action.label}\r\n          </button>\r\n        )}\r\n      </div>\r\n\r\n      {closable && (\r\n        <button className=\"snake-toast__close\" onClick={handleClose} aria-label=\"Close\">\r\n          <TimesIcon />\r\n        </button>\r\n      )}\r\n\r\n      {showProgress && duration > 0 && (\r\n        <div className=\"snake-toast__progress\">\r\n          <div className=\"snake-toast__progress-bar\" style={{ width: `${progress}%` }} />\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"snake-toast__corner snake-toast__corner--top-left\" />\r\n      <div className=\"snake-toast__corner snake-toast__corner--top-right\" />\r\n      <div className=\"snake-toast__corner snake-toast__corner--bottom-left\" />\r\n      <div className=\"snake-toast__corner snake-toast__corner--bottom-right\" />\r\n    </div>\r\n  );\r\n};\r\n\r\n// Toast container component for managing multiple toasts\r\ninterface ToastContainerProps {\r\n  toasts: Array<{\r\n    id: string;\r\n    message: string;\r\n    variant?: ToastProps['variant'];\r\n    duration?: number;\r\n    action?: ToastProps['action'];\r\n  }>;\r\n  position?: ToastProps['position'];\r\n  onClose: (id: string) => void;\r\n}\r\n\r\nexport const ToastContainer: React.FC<ToastContainerProps> = ({\r\n  toasts,\r\n  position = 'bottom-right',\r\n  onClose,\r\n}) => {\r\n  const containerClasses = ['snake-toast-container', `snake-toast-container--${position}`].join(\r\n    ' ',\r\n  );\r\n\r\n  return (\r\n    <div className={containerClasses}>\r\n      {toasts.map((toast) => (\r\n        <Toast\r\n          key={toast.id}\r\n          message={toast.message}\r\n          variant={toast.variant}\r\n          duration={toast.duration}\r\n          action={toast.action}\r\n          position={position}\r\n          onClose={() => onClose(toast.id)}\r\n          showProgress\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport './toggle.css';\r\n\r\nexport interface ToggleProps {\r\n  /** Toggle state */\r\n  checked?: boolean;\r\n  /** Change handler */\r\n  onChange?: (checked: boolean) => void;\r\n  /** Label */\r\n  label?: string;\r\n  /** Helper text */\r\n  helperText?: string;\r\n  /** Size variant */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** Visual variant */\r\n  variant?: 'default' | 'success' | 'warning' | 'danger' | 'info';\r\n  /** Disabled state */\r\n  disabled?: boolean;\r\n  /** Label position */\r\n  labelPosition?: 'left' | 'right';\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n}\r\n\r\n/** Toggle/Switch component with dark theme styling */\r\nexport const Toggle: React.FC<ToggleProps> = ({\r\n  checked = false,\r\n  onChange,\r\n  label,\r\n  helperText,\r\n  size = 'medium',\r\n  variant = 'default',\r\n  disabled = false,\r\n  labelPosition = 'right',\r\n  className = '',\r\n}) => {\r\n  const handleClick = () => {\r\n    if (!disabled && onChange) {\r\n      onChange(!checked);\r\n    }\r\n  };\r\n\r\n  const toggleClasses = [\r\n    'snake-toggle',\r\n    `snake-toggle--${size}`,\r\n    `snake-toggle--${variant}`,\r\n    checked && 'snake-toggle--checked',\r\n    disabled && 'snake-toggle--disabled',\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const wrapperClasses = [\r\n    'snake-toggle-wrapper',\r\n    `snake-toggle-wrapper--${labelPosition}`,\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  return (\r\n    <div className={wrapperClasses}>\r\n      <button\r\n        type=\"button\"\r\n        role=\"switch\"\r\n        aria-checked={checked}\r\n        className={toggleClasses}\r\n        onClick={handleClick}\r\n        disabled={disabled}\r\n      >\r\n        <span className=\"snake-toggle__track\">\r\n          <span className=\"snake-toggle__thumb\" />\r\n        </span>\r\n      </button>\r\n      {label && (\r\n        <div className=\"snake-toggle__label-container\">\r\n          <label className=\"snake-toggle__label\" onClick={handleClick}>\r\n            {label}\r\n          </label>\r\n          {helperText && <span className=\"snake-toggle__helper-text\">{helperText}</span>}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n"],"names":["ChevronDownIcon","className","_jsx","viewBox","width","height","fill","children","points","Accordion","items","multiple","defaultOpen","openItems","controlledOpenItems","onChange","variant","size","header","internalOpenItems","setInternalOpenItems","useState","undefined","accordionClasses","filter","Boolean","join","map","item","index","isOpen","includes","id","itemClasses","disabled","_jsxs","type","onClick","itemId","newOpenItems","handleToggle","icon","title","content","length","AngleRightIcon","CheckIcon","ExclamationTriangleIcon","d","TimesIcon","InfoCircleIcon","Alert","description","showIcon","closable","onClose","actions","borderPosition","alertClasses","role","getDefaultIcon","Badge","style","Component","badgeClasses","BarGraph","data","maxValue","barWidth","gap","showValues","showGrid","gridLines","showLabels","showScale","orientation","animate","barColor","gridColor","formatValue","value","toString","onBarClick","onBarHover","hoveredBar","setHoveredBar","selectedBar","setSelectedBar","tooltipPosition","setTooltipPosition","calculatedMaxValue","useMemo","values","Math","max","scaleValues","Array","from","_","i","round","graphWidth","graphHeight","classes","variantProps","minimal","detailed","interactive","finalShowGrid","finalShowScale","finalShowValues","finalGridLines","finalBarColor","finalGridColor","maxWidth","_Fragment","bottom","borderColor","reverse","top","point","barHeight","onMouseEnter","e","rect","currentTarget","getBoundingClientRect","x","left","y","onMouseLeave","marginLeft","marginRight","backgroundColor","color","animationDelay","label","subLabel","barWidthPercent","marginTop","marginBottom","position","transform","Breadcrumb","separator","maxItems","renderItem","onItemClick","breadcrumbClasses","displayItems","React","href","slice","defaultRenderItem","isLast","preventDefault","handleClick","Button","loading","fullWidth","props","Card","footer","transitionIn","transitionType","transitionSpeed","transitionDelay","onTransitionComplete","isVisible","setIsVisible","isAnimating","setIsAnimating","useEffect","delayTimer","setTimeout","completeTimer","clearTimeout","Checkbox","indeterminate","helperText","error","checkboxRef","useRef","current","wrapperClasses","checkboxClasses","ref","ColorPicker","showAlpha","presets","showInput","inline","setIsOpen","currentColor","setCurrentColor","hue","setHue","saturation","setSaturation","brightness","setBrightness","alpha","setAlpha","pickerRef","saturationRef","hex","rgb","hexToRgb","r","g","b","delta","min","h","s","v","hexToHsb","result","exec","parseInt","hsbToHex","hNorm","sNorm","bNorm","floor","f","p","q","t","b_out","toHex","n","updateColor","a","handleClickOutside","event","contains","target","document","addEventListener","removeEventListener","pickerClasses","panelClasses","clientX","clientY","newSaturation","newBrightness","newHue","newAlpha","test","placeholder","handlePresetClick","Divider","thickness","spacing","dividerClasses","DonutGraph","innerRadius","colors","showCenterValue","centerValue","centerLabel","showLegend","animateLegend","segmentGap","total","onSegmentClick","activeSegment","setActiveSegment","hoveredSegment","setHoveredSegment","segments","sum","reduce","acc","currentAngle","segment","percentage","angle","startAngle","endAngle","center","svgSize","outerR","innerR","generateSegmentPath","finalSegmentGap","startAngleRad","PI","endAngleRad","x1","cos","y1","sin","x2","y2","x3","y3","x4","y4","largeArc","halfGap","outerGapAngle","innerGapAngle","startAngleOuterRad","endAngleOuterRad","startAngleInnerRad","endAngleInnerRad","finalShowLegend","finalShowCenterValue","isInteractive","centerText","preserveAspectRatio","isActive","isHovered","isDimmed","fillOpacity","stroke","strokeWidth","strokeOpacity","cursor","transition","transformOrigin","newActive","attributeName","to","dur","repeatCount","pos","midAngleRad","labelR","getLabelPosition","textAnchor","dominantBaseline","fontSize","fontFamily","pointerEvents","dy","fontWeight","cx","cy","opacity","borderWidth","Drawer","open","overlay","closeOnOverlayClick","lockScroll","drawerRef","handleEscape","key","body","overflow","focusableElements","querySelectorAll","firstElement","lastElement","handleTab","shiftKey","activeElement","focus","drawerClasses","Filter","active","count","Grid","columns","rows","columnGap","rowGap","alignItems","justifyItems","alignContent","justifyContent","autoFlow","areas","minColumnWidth","fullHeight","replace","gridStyle","Heading","as","align","weight","decorated","decorationPosition","truncate","headingClasses","HexagonalBinningGraph","hexRadius","xDomain","yDomain","showAxes","axisColor","xLabel","yLabel","onHexClick","activeHex","setActiveHex","hoveredHex","setHoveredHex","xMin","xMax","yMin","yMax","xValues","yValues","vertDist","sqrt","horizDist","margin","plotWidth","plotHeight","hexBins","bins","Map","padding","effectiveWidth","effectiveHeight","forEach","scaledX","scaledY","col","row","hexX","hexY","has","set","bin","get","push","maxCount","finalShowAxes","xTicks","step","tickCount","yTicks","tick","strokeDasharray","hexKey","getColor","centerX","centerY","radius","radian","toFixed","IconButton","shape","tooltip","badge","badgeVariant","buttonClasses","Input","leftIcon","rightIcon","inputClasses","KeyboardKey","pressed","iconPosition","LineGraph","showPoints","pointRadius","curve","formatX","formatY","onPointClick","series","isArray","activeSeries","setActiveSeries","hoveredPoint","setHoveredPoint","defaultColors","allPoints","flatMap","xScale","yScale","generatePath","scaledPoints","path","prev","generateFillPath","linePath","lastPoint","firstPoint","finalShowPoints","finalStrokeWidth","offset","stopColor","stopOpacity","name","strokeLinecap","strokeLinejoin","j","Link","external","startIcon","endIcon","rel","linkClasses","linkTarget","linkRel","trim","List","startNumber","numberPadding","formatNumber","arrowColor","showNumbers","uppercase","getFormattedNumber","num","padStart","listClasses","currentNumber","tabIndex","onKeyDown","subitems","subitem","subIndex","subSubitem","subSubIndex","renderListItem","Loading","text","fullscreen","backdrop","loadingClasses","renderLoader","Menu","trigger","controlledIsOpen","onOpenChange","placement","showArrow","internalIsOpen","setInternalIsOpen","activeSubmenu","setActiveSubmenu","menuRef","triggerRef","renderMenuItem","isSubmenuItem","divider","danger","submenu","handleItemClick","shortcut","subItem","menuClasses","Modal","showCloseButton","modalRef","modalClasses","PinInput","onComplete","masked","success","autoFocus","setValues","initial","split","inputRefs","newValues","combined","every","handleChange","pastedValues","char","lastFilledIndex","findLastIndex","nextIndex","handlePaste","pastedData","clipboardData","getData","firstEmptyIndex","findIndex","el","inputMode","handleKeyDown","onFocus","select","handleFocus","onPaste","maxLength","Progress","showLabel","labelPosition","val","ariaLabel","progressClasses","renderSegments","segmentElements","filledSegments","RadioButton","options","direction","groupClasses","option","isChecked","radioClasses","checked","optionValue","RidgelineGraph","initialData","ridgeHeight","overlap","xLabels","maxRidges","scrollInterval","generateNewData","onRidgeClick","activeRidge","setActiveRidge","hoveredRidge","setHoveredRidge","scrollingData","setScrollingData","placeholders","initializeScrollingData","scrollIntervalRef","dataCountRef","addNewData","prevData","newData","newItem","unshift","pop","setInterval","clearInterval","effectiveRidgeHeight","displayRidges","totalHeight","processedData","scrollingRidgeHeight","scrollingEffectiveHeight","seriesIndex","minValue","range","isPlaceholder","normalizedValues","yOffset","originalValue","closed","baseY","scrolling","finalShowLabels","onMouseMove","Select","selectRef","selectedOption","find","opt","selectClasses","Skeleton","animation","lines","intensity","skeletonClasses","getSkeletonStyle","baseStyle","Slider","showValue","valueLabelPosition","showTicks","tickInterval","marks","internalValue","setInternalValue","isDragging","setIsDragging","showTooltip","setShowTooltip","sliderRef","trackRef","handleMouseMove","updateValue","handleMouseUp","newValue","clampedValue","sliderClasses","thumbStyle","fillStyle","onMouseDown","tickMarks","mark","markPercentage","renderTicks","bigStep","SpiderGraph","levels","fillColor","strokeColor","showDots","svgWidth","distance","labelX","labelY","endX","endY","gridLevels","levelRadius","polygonPath","gridPaths","level","finalProps","cyber","AngleUpIcon","AngleDownIcon","Stat","info","change","statClasses","changeClasses","getChangeIcon","Stepper","steps","activeStep","clickable","onStepClick","showConnectors","stepperRef","connectorWidth","setConnectorWidth","connectorHeight","setConnectorHeight","calculateConnectorDimensions","stepElements","first","second","firstRect","secondRect","right","window","handleStepClick","state","getStepState","isClickable","StreamGraph","keys","formatLabel","onLayerClick","svgHeight","activeLayer","setActiveLayer","hoveredLayer","setHoveredLayer","stackedData","layers","keyIndex","layer","y0","l","originalX","maxHeight","layerMax","shift","totals","maxTotal","cumulative","normalized","flat","pathTop","pathBottom","prevX","midX","prevY1","prevY0","gridPositions","ceil","SubCard","cornerColor","Table","stickyHeader","selectable","selectedRows","onSelectionChange","onRowClick","onSort","sortColumn","sortDirection","emptyMessage","tableClasses","getValue","k","column","sortable","handleSort","colSpan","rowIndex","stopPropagation","colIndex","render","Tabs","tabs","activeTab","controlledActiveTab","internalActiveTab","setInternalActiveTab","tab","tabsClasses","tabId","Text","italic","underline","strike","mono","clamp","leading","tracking","textClasses","WebkitLineClamp","Textarea","autoResize","minRows","maxRows","showCount","resize","textareaRef","charCount","setCharCount","String","adjustHeight","textarea","lineHeight","getComputedStyle","minHeight","newHeight","scrollHeight","textareaClasses","resizeStyle","Toast","message","duration","action","showProgress","progress","setProgress","timer","interval","newProgress","toastClasses","Toggle","toggleClasses"],"mappings":"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"}