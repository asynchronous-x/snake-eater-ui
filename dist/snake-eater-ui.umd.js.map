{"version":3,"file":"snake-eater-ui.umd.js","sources":["../node_modules/style-inject/dist/style-inject.es.js","../stories/Accordion/Accordion.tsx","../stories/Alert/Alert.tsx","../stories/ColorPicker/ColorPicker.tsx","../stories/Modal/Modal.tsx","../stories/Select/Select.tsx","../stories/Stat/Stat.tsx","../stories/Table/Table.tsx","../stories/Toast/Toast.tsx","../stories/Badge/Badge.tsx","../stories/BarGraph/BarGraph.tsx","../stories/Breadcrumb/Breadcrumb.tsx","../stories/Button/Button.tsx","../stories/Card/Card.tsx","../stories/Checkbox/Checkbox.tsx","../stories/Divider/Divider.tsx","../stories/DonutGraph/DonutGraph.tsx","../stories/Drawer/Drawer.tsx","../stories/Filter/Filter.tsx","../stories/Grid/Grid.tsx","../stories/Heading/Heading.tsx","../stories/HexagonalBinningGraph/HexagonalBinningGraph.tsx","../stories/IconButton/IconButton.tsx","../stories/Input/Input.tsx","../stories/KeyboardKey/KeyboardKey.tsx","../stories/LineGraph/LineGraph.tsx","../stories/Link/Link.tsx","../stories/List/List.tsx","../stories/Loading/Loading.tsx","../stories/Menu/Menu.tsx","../stories/PinInput/PinInput.tsx","../stories/Progress/Progress.tsx","../stories/RadioButton/RadioButton.tsx","../stories/RidgelineGraph/RidgelineGraph.tsx","../stories/Skeleton/Skeleton.tsx","../stories/Slider/Slider.tsx","../stories/SpiderGraph/SpiderGraph.tsx","../stories/Stepper/Stepper.tsx","../stories/StreamGraph/StreamGraph.tsx","../stories/SubCard/SubCard.tsx","../stories/Tabs/Tabs.tsx","../stories/Text/Text.tsx","../stories/Textarea/Textarea.tsx","../stories/Toggle/Toggle.tsx"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import React, { useState } from 'react';\r\nimport './accordion.css';\r\n\r\n// Icon component for ChevronDown from pixel-icon-library\r\nconst ChevronDownIcon = ({ className = '' }: { className?: string }) => (\r\n  <svg className={className} viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\">\r\n    <polygon points=\"23 8 23 9 22 9 22 10 21 10 21 11 20 11 20 12 19 12 19 13 18 13 18 14 17 14 17 15 16 15 16 16 15 16 15 17 14 17 14 18 13 18 13 19 11 19 11 18 10 18 10 17 9 17 9 16 8 16 8 15 7 15 7 14 6 14 6 13 5 13 5 12 4 12 4 11 3 11 3 10 2 10 2 9 1 9 1 8 2 8 2 7 3 7 3 6 4 6 4 7 5 7 5 8 6 8 6 9 7 9 7 10 8 10 8 11 9 11 9 12 10 12 10 13 11 13 11 14 13 14 13 13 14 13 14 12 15 12 15 11 16 11 16 10 17 10 17 9 18 9 18 8 19 8 19 7 20 7 20 6 21 6 21 7 22 7 22 8 23 8\"/>\r\n  </svg>\r\n);\r\n\r\ninterface AccordionItem {\r\n  id: string;\r\n  title: React.ReactNode;\r\n  content: React.ReactNode;\r\n  disabled?: boolean;\r\n  icon?: React.ReactNode;\r\n}\r\n\r\nexport interface AccordionProps {\r\n  /** Accordion items */\r\n  items: AccordionItem[];\r\n  /** Allow multiple items open */\r\n  multiple?: boolean;\r\n  /** Initially open items */\r\n  defaultOpen?: string[];\r\n  /** Controlled open items */\r\n  openItems?: string[];\r\n  /** Change handler */\r\n  onChange?: (openItems: string[]) => void;\r\n  /** Visual variant */\r\n  variant?: 'default' | 'boxed' | 'minimal';\r\n  /** Size variant */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** Use header style with lighter background */\r\n  header?: boolean;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n}\r\n\r\n/** Accordion component for collapsible content */\r\nexport const Accordion: React.FC<AccordionProps> = ({\r\n  items,\r\n  multiple = false,\r\n  defaultOpen = [],\r\n  openItems: controlledOpenItems,\r\n  onChange,\r\n  variant = 'default',\r\n  size = 'medium',\r\n  header = false,\r\n  className = '',\r\n}) => {\r\n  const [internalOpenItems, setInternalOpenItems] = useState<string[]>(defaultOpen);\r\n  const openItems = controlledOpenItems !== undefined ? controlledOpenItems : internalOpenItems;\r\n\r\n  const handleToggle = (itemId: string) => {\r\n    let newOpenItems: string[];\r\n\r\n    if (multiple) {\r\n      newOpenItems = openItems.includes(itemId)\r\n        ? openItems.filter((id) => id !== itemId)\r\n        : [...openItems, itemId];\r\n    } else {\r\n      newOpenItems = openItems.includes(itemId) ? [] : [itemId];\r\n    }\r\n\r\n    if (onChange) {\r\n      onChange(newOpenItems);\r\n    } else {\r\n      setInternalOpenItems(newOpenItems);\r\n    }\r\n  };\r\n\r\n  const accordionClasses = [\r\n    'snake-accordion',\r\n    `snake-accordion--${variant}`,\r\n    `snake-accordion--${size}`,\r\n    header && 'snake-accordion--header',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  return (\r\n    <div className={accordionClasses}>\r\n      {items.map((item, index) => {\r\n        const isOpen = openItems.includes(item.id);\r\n        const itemClasses = [\r\n          'snake-accordion__item',\r\n          isOpen && 'snake-accordion__item--open',\r\n          item.disabled && 'snake-accordion__item--disabled',\r\n        ]\r\n          .filter(Boolean)\r\n          .join(' ');\r\n\r\n        return (\r\n          <div key={item.id} className={itemClasses}>\r\n            <button\r\n              type=\"button\"\r\n              className=\"snake-accordion__header\"\r\n              onClick={() => !item.disabled && handleToggle(item.id)}\r\n              disabled={item.disabled}\r\n              aria-expanded={isOpen}\r\n              aria-controls={`accordion-panel-${item.id}`}\r\n            >\r\n              <div className=\"snake-accordion__header-content\">\r\n                {item.icon && <span className=\"snake-accordion__icon\">{item.icon}</span>}\r\n                <span className=\"snake-accordion__title\">{item.title}</span>\r\n              </div>\r\n              <ChevronDownIcon className=\"snake-accordion__chevron\" />\r\n            </button>\r\n\r\n            <div\r\n              id={`accordion-panel-${item.id}`}\r\n              className=\"snake-accordion__panel\"\r\n              aria-hidden={!isOpen}\r\n            >\r\n              <div className=\"snake-accordion__content\">{item.content}</div>\r\n            </div>\r\n\r\n            {variant === 'default' && index < items.length - 1 && (\r\n              <div className=\"snake-accordion__divider\" />\r\n            )}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport './alert.css';\r\n\r\n// Icon components from pixel-icon-library\r\nconst AngleRightIcon = ({ className = '' }: { className?: string }) => (\r\n  <svg className={className} viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\">\r\n    <polygon points=\"7 19 7 17 8 17 8 16 9 16 9 15 10 15 10 14 11 14 11 13 12 13 12 11 11 11 11 10 10 10 10 9 9 9 9 8 8 8 8 7 7 7 7 5 8 5 8 4 10 4 10 5 11 5 11 6 12 6 12 7 13 7 13 8 14 8 14 9 15 9 15 10 16 10 16 11 17 11 17 13 16 13 16 14 15 14 15 15 14 15 14 16 13 16 13 17 12 17 12 18 11 18 11 19 10 19 10 20 8 20 8 19 7 19\"/>\r\n  </svg>\r\n);\r\n\r\nconst CheckIcon = ({ className = '' }: { className?: string }) => (\r\n  <svg className={className} viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\">\r\n    <polygon points=\"23 5 23 6 22 6 22 7 21 7 21 8 20 8 20 9 19 9 19 10 18 10 18 11 17 11 17 12 16 12 16 13 15 13 15 14 14 14 14 15 13 15 13 16 12 16 12 17 11 17 11 18 10 18 10 19 8 19 8 18 7 18 7 17 6 17 6 16 5 16 5 15 4 15 4 14 3 14 3 13 2 13 2 12 1 12 1 11 2 11 2 10 3 10 3 9 4 9 4 10 5 10 5 11 6 11 6 12 7 12 7 13 8 13 8 14 10 14 10 13 11 13 11 12 12 12 12 11 13 11 13 10 14 10 14 9 15 9 15 8 16 8 16 7 17 7 17 6 18 6 18 5 19 5 19 4 20 4 20 3 21 3 21 4 22 4 22 5 23 5\"/>\r\n  </svg>\r\n);\r\n\r\nconst ExclamationTriangleIcon = ({ className = '' }: { className?: string }) => (\r\n  <svg className={className} viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\">\r\n    <path d=\"m22,20v-2h-1v-2h-1v-2h-1v-2h-1v-2h-1v-2h-1v-2h-1v-2h-1v-2h-1v-1h-2v1h-1v2h-1v2h-1v2h-1v2h-1v2h-1v2h-1v2h-1v2h-1v2h-1v2h1v1h20v-1h1v-2h-1Zm-12-9h4v3h-1v3h-2v-3h-1v-3Zm1,7h2v2h-2v-2Z\"/>\r\n  </svg>\r\n);\r\n\r\nconst TimesIcon = ({ className = '' }: { className?: string }) => (\r\n  <svg className={className} viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\">\r\n    <polygon points=\"15 13 16 13 16 14 17 14 17 15 18 15 18 16 19 16 19 17 20 17 20 18 21 18 21 19 22 19 22 20 21 20 21 21 20 21 20 22 19 22 19 21 18 21 18 20 17 20 17 19 16 19 16 18 15 18 15 17 14 17 14 16 13 16 13 15 11 15 11 16 10 16 10 17 9 17 9 18 8 18 8 19 7 19 7 20 6 20 6 21 5 21 5 22 4 22 4 21 3 21 3 20 2 20 2 19 3 19 3 18 4 18 4 17 5 17 5 16 6 16 6 15 7 15 7 14 8 14 8 13 9 13 9 11 8 11 8 10 7 10 7 9 6 9 6 8 5 8 5 7 4 7 4 6 3 6 3 5 2 5 2 4 3 4 3 3 4 3 4 2 5 2 5 3 6 3 6 4 7 4 7 5 8 5 8 6 9 6 9 7 10 7 10 8 11 8 11 9 13 9 13 8 14 8 14 7 15 7 15 6 16 6 16 5 17 5 17 4 18 4 18 3 19 3 19 2 20 2 20 3 21 3 21 4 22 4 22 5 21 5 21 6 20 6 20 7 19 7 19 8 18 8 18 9 17 9 17 10 16 10 16 11 15 11 15 13\"/>\r\n  </svg>\r\n);\r\n\r\nconst InfoCircleIcon = ({ className = '' }: { className?: string }) => (\r\n  <svg className={className} viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\">\r\n    <path d=\"m22,9v-2h-1v-2h-1v-1h-1v-1h-2v-1h-2v-1h-6v1h-2v1h-2v1h-1v1h-1v2h-1v2h-1v6h1v2h1v2h1v1h1v1h2v1h2v1h6v-1h2v-1h2v-1h1v-1h1v-2h1v-2h1v-6h-1Zm-11-3h2v2h-2v-2Zm-1,9h1v-5h-1v-1h3v6h1v2h-4v-2Z\"/>\r\n  </svg>\r\n);\r\n\r\nexport interface AlertProps {\r\n  /** Alert title */\r\n  title?: string;\r\n  /** Alert description */\r\n  description?: React.ReactNode;\r\n  /** Alert variant */\r\n  variant?: 'default' | 'success' | 'warning' | 'danger' | 'info';\r\n  /** Size variant */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** Show icon */\r\n  showIcon?: boolean;\r\n  /** Custom icon */\r\n  icon?: React.ReactNode;\r\n  /** Closable alert */\r\n  closable?: boolean;\r\n  /** Close handler */\r\n  onClose?: () => void;\r\n  /** Action buttons */\r\n  actions?: React.ReactNode;\r\n  /** Border position */\r\n  borderPosition?: 'left' | 'top' | 'all';\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n  /** Children content (alternative to description) */\r\n  children?: React.ReactNode;\r\n}\r\n\r\n/** Alert component for displaying important messages */\r\nexport const Alert: React.FC<AlertProps> = ({\r\n  title,\r\n  description,\r\n  variant = 'default',\r\n  size = 'medium',\r\n  showIcon = true,\r\n  icon,\r\n  closable = false,\r\n  onClose,\r\n  actions,\r\n  borderPosition = 'left',\r\n  className = '',\r\n  children,\r\n}) => {\r\n  const alertClasses = [\r\n    'snake-alert',\r\n    `snake-alert--${variant}`,\r\n    `snake-alert--${size}`,\r\n    `snake-alert--border-${borderPosition}`,\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const getDefaultIcon = () => {\r\n    if (icon) return icon;\r\n\r\n    switch (variant) {\r\n      case 'success':\r\n        return <CheckIcon />;\r\n      case 'warning':\r\n        return <ExclamationTriangleIcon />;\r\n      case 'danger':\r\n        return <TimesIcon />;\r\n      case 'info':\r\n        return <InfoCircleIcon />;\r\n      default:\r\n        return <AngleRightIcon />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={alertClasses} role=\"alert\">\r\n      {showIcon && <div className=\"snake-alert__icon\">{getDefaultIcon()}</div>}\r\n\r\n      <div className=\"snake-alert__content\">\r\n        {title && <div className=\"snake-alert__title\">{title}</div>}\r\n        {(description || children) && (\r\n          <div className=\"snake-alert__description\">{description || children}</div>\r\n        )}\r\n        {actions && <div className=\"snake-alert__actions\">{actions}</div>}\r\n      </div>\r\n\r\n      {closable && (\r\n        <button className=\"snake-alert__close\" onClick={onClose} aria-label=\"Close alert\">\r\n          <TimesIcon />\r\n        </button>\r\n      )}\r\n\r\n      <div className=\"snake-alert__corner snake-alert__corner--top-left\" />\r\n      <div className=\"snake-alert__corner snake-alert__corner--top-right\" />\r\n      <div className=\"snake-alert__corner snake-alert__corner--bottom-left\" />\r\n      <div className=\"snake-alert__corner snake-alert__corner--bottom-right\" />\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport './colorpicker.css';\r\n\r\n// Icon component for ChevronDown from pixel-icon-library\r\nconst ChevronDownIcon = ({ className = '' }: { className?: string }) => (\r\n  <svg className={className} viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\">\r\n    <polygon points=\"23 8 23 9 22 9 22 10 21 10 21 11 20 11 20 12 19 12 19 13 18 13 18 14 17 14 17 15 16 15 16 16 15 16 15 17 14 17 14 18 13 18 13 19 11 19 11 18 10 18 10 17 9 17 9 16 8 16 8 15 7 15 7 14 6 14 6 13 5 13 5 12 4 12 4 11 3 11 3 10 2 10 2 9 1 9 1 8 2 8 2 7 3 7 3 6 4 6 4 7 5 7 5 8 6 8 6 9 7 9 7 10 8 10 8 11 9 11 9 12 10 12 10 13 11 13 11 14 13 14 13 13 14 13 14 12 15 12 15 11 16 11 16 10 17 10 17 9 18 9 18 8 19 8 19 7 20 7 20 6 21 6 21 7 22 7 22 8 23 8\"/>\r\n  </svg>\r\n);\r\n\r\nexport interface ColorPickerProps {\r\n  /** Current color value */\r\n  value?: string;\r\n  /** Change handler */\r\n  onChange?: (color: string) => void;\r\n  /** Show alpha channel */\r\n  showAlpha?: boolean;\r\n  /** Preset colors */\r\n  presets?: string[];\r\n  /** Size variant */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** Show hex input */\r\n  showInput?: boolean;\r\n  /** Disabled state */\r\n  disabled?: boolean;\r\n  /** Inline mode (always open) */\r\n  inline?: boolean;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n}\r\n\r\n/** ColorPicker component for color selection */\r\nexport const ColorPicker: React.FC<ColorPickerProps> = ({\r\n  value = '#50fa7b',\r\n  onChange,\r\n  showAlpha = false,\r\n  presets = [\r\n    '#50fa7b',\r\n    '#ffb86c',\r\n    '#ff5555',\r\n    '#61dafb',\r\n    '#bd93f9',\r\n    '#ff79c6',\r\n    '#f1fa8c',\r\n    '#8be9fd',\r\n    '#bdbdbd',\r\n    '#8e8e90',\r\n    '#3a3a3a',\r\n    '#1f1d20',\r\n  ],\r\n  size = 'medium',\r\n  showInput = true,\r\n  disabled = false,\r\n  inline = false,\r\n  className = '',\r\n}) => {\r\n  const [isOpen, setIsOpen] = useState(inline);\r\n  const [currentColor, setCurrentColor] = useState(value);\r\n  const [hue, setHue] = useState(0);\r\n  const [saturation, setSaturation] = useState(100);\r\n  const [brightness, setBrightness] = useState(50);\r\n  const [alpha, setAlpha] = useState(100);\r\n  const pickerRef = useRef<HTMLDivElement>(null);\r\n  const saturationRef = useRef<HTMLDivElement>(null);\r\n\r\n  // Convert hex to HSB\r\n  useEffect(() => {\r\n    const hexToHsb = (hex: string) => {\r\n      const rgb = hexToRgb(hex);\r\n      if (!rgb) return;\r\n\r\n      const r = rgb.r / 255;\r\n      const g = rgb.g / 255;\r\n      const b = rgb.b / 255;\r\n\r\n      const max = Math.max(r, g, b);\r\n      const min = Math.min(r, g, b);\r\n      const delta = max - min;\r\n\r\n      let h = 0;\r\n      const s = max === 0 ? 0 : delta / max;\r\n      const v = max;\r\n\r\n      if (delta !== 0) {\r\n        if (max === r) {\r\n          h = ((g - b) / delta + (g < b ? 6 : 0)) / 6;\r\n        } else if (max === g) {\r\n          h = ((b - r) / delta + 2) / 6;\r\n        } else {\r\n          h = ((r - g) / delta + 4) / 6;\r\n        }\r\n      }\r\n\r\n      setHue(Math.round(h * 360));\r\n      setSaturation(Math.round(s * 100));\r\n      setBrightness(Math.round(v * 100));\r\n    };\r\n\r\n    hexToHsb(value);\r\n  }, [value]);\r\n\r\n  const hexToRgb = (hex: string) => {\r\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    return result\r\n      ? {\r\n        r: parseInt(result[1], 16),\r\n        g: parseInt(result[2], 16),\r\n        b: parseInt(result[3], 16),\r\n      }\r\n      : null;\r\n  };\r\n\r\n  const hsbToHex = (h: number, s: number, b: number) => {\r\n    const hNorm = h / 360;\r\n    const sNorm = s / 100;\r\n    const bNorm = b / 100;\r\n\r\n    const i = Math.floor(hNorm * 6);\r\n    const f = hNorm * 6 - i;\r\n    const p = bNorm * (1 - sNorm);\r\n    const q = bNorm * (1 - f * sNorm);\r\n    const t = bNorm * (1 - (1 - f) * sNorm);\r\n\r\n    let r = 0,\r\n      g = 0,\r\n      b_out = 0;\r\n\r\n    switch (i % 6) {\r\n      case 0:\r\n        r = bNorm;\r\n        g = t;\r\n        b_out = p;\r\n        break;\r\n      case 1:\r\n        r = q;\r\n        g = bNorm;\r\n        b_out = p;\r\n        break;\r\n      case 2:\r\n        r = p;\r\n        g = bNorm;\r\n        b_out = t;\r\n        break;\r\n      case 3:\r\n        r = p;\r\n        g = q;\r\n        b_out = bNorm;\r\n        break;\r\n      case 4:\r\n        r = t;\r\n        g = p;\r\n        b_out = bNorm;\r\n        break;\r\n      case 5:\r\n        r = bNorm;\r\n        g = p;\r\n        b_out = q;\r\n        break;\r\n    }\r\n\r\n    const toHex = (n: number) => {\r\n      const hex = Math.round(n * 255).toString(16);\r\n      return hex.length === 1 ? '0' + hex : hex;\r\n    };\r\n\r\n    return `#${toHex(r)}${toHex(g)}${toHex(b_out)}`;\r\n  };\r\n\r\n  const updateColor = (h: number, s: number, b: number, a: number) => {\r\n    const hex = hsbToHex(h, s, b);\r\n    setCurrentColor(hex);\r\n    onChange?.(hex);\r\n  };\r\n\r\n  const handleSaturationClick = (e: React.MouseEvent<HTMLDivElement>) => {\r\n    if (disabled || !saturationRef.current) return;\r\n\r\n    const rect = saturationRef.current.getBoundingClientRect();\r\n    const x = Math.max(0, Math.min(e.clientX - rect.left, rect.width));\r\n    const y = Math.max(0, Math.min(e.clientY - rect.top, rect.height));\r\n\r\n    const newSaturation = Math.round((x / rect.width) * 100);\r\n    const newBrightness = Math.round((1 - y / rect.height) * 100);\r\n\r\n    setSaturation(newSaturation);\r\n    setBrightness(newBrightness);\r\n    updateColor(hue, newSaturation, newBrightness, alpha);\r\n  };\r\n\r\n  const handleHueChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const newHue = parseInt(e.target.value);\r\n    setHue(newHue);\r\n    updateColor(newHue, saturation, brightness, alpha);\r\n  };\r\n\r\n  const handleAlphaChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const newAlpha = parseInt(e.target.value);\r\n    setAlpha(newAlpha);\r\n    updateColor(hue, saturation, brightness, newAlpha);\r\n  };\r\n\r\n  const handleHexInput = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const hex = e.target.value;\r\n    if (/^#[0-9A-F]{6}$/i.test(hex)) {\r\n      setCurrentColor(hex);\r\n      onChange?.(hex);\r\n    }\r\n  };\r\n\r\n  const handlePresetClick = (color: string) => {\r\n    if (disabled) return;\r\n    setCurrentColor(color);\r\n    onChange?.(color);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!inline) {\r\n      const handleClickOutside = (event: MouseEvent) => {\r\n        if (pickerRef.current && !pickerRef.current.contains(event.target as Node)) {\r\n          setIsOpen(false);\r\n        }\r\n      };\r\n\r\n      if (isOpen) {\r\n        document.addEventListener('mousedown', handleClickOutside);\r\n        return () => document.removeEventListener('mousedown', handleClickOutside);\r\n      }\r\n    }\r\n  }, [isOpen, inline]);\r\n\r\n  const pickerClasses = [\r\n    'snake-colorpicker',\r\n    `snake-colorpicker--${size}`,\r\n    disabled && 'snake-colorpicker--disabled',\r\n    inline && 'snake-colorpicker--inline',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const panelClasses = ['snake-colorpicker__panel', isOpen && 'snake-colorpicker__panel--open']\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  return (\r\n    <div ref={pickerRef} className={pickerClasses}>\r\n      {!inline && (\r\n        <button\r\n          className=\"snake-colorpicker__trigger\"\r\n          onClick={() => !disabled && setIsOpen(!isOpen)}\r\n          disabled={disabled}\r\n        >\r\n          <div\r\n            className=\"snake-colorpicker__trigger-color\"\r\n            style={{ backgroundColor: currentColor }}\r\n          />\r\n          <span className=\"snake-colorpicker__trigger-value\">{currentColor}</span>\r\n          <ChevronDownIcon className=\"snake-colorpicker__trigger-arrow\" />\r\n        </button>\r\n      )}\r\n\r\n      {(isOpen || inline) && (\r\n        <div className={panelClasses}>\r\n          <div\r\n            ref={saturationRef}\r\n            className=\"snake-colorpicker__saturation\"\r\n            style={{ backgroundColor: hsbToHex(hue, 100, 100) }}\r\n            onClick={handleSaturationClick}\r\n          >\r\n            <div className=\"snake-colorpicker__saturation-white\" />\r\n            <div className=\"snake-colorpicker__saturation-black\" />\r\n            <div\r\n              className=\"snake-colorpicker__saturation-pointer\"\r\n              style={{\r\n                left: `${saturation}%`,\r\n                top: `${100 - brightness}%`,\r\n              }}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"snake-colorpicker__controls\">\r\n            <div className=\"snake-colorpicker__slider\">\r\n              <label>Hue</label>\r\n              <input\r\n                type=\"range\"\r\n                min=\"0\"\r\n                max=\"360\"\r\n                value={hue}\r\n                onChange={handleHueChange}\r\n                className=\"snake-colorpicker__hue-slider\"\r\n                disabled={disabled}\r\n              />\r\n            </div>\r\n\r\n            {showAlpha && (\r\n              <div className=\"snake-colorpicker__slider\">\r\n                <label>Alpha</label>\r\n                <input\r\n                  type=\"range\"\r\n                  min=\"0\"\r\n                  max=\"100\"\r\n                  value={alpha}\r\n                  onChange={handleAlphaChange}\r\n                  className=\"snake-colorpicker__alpha-slider\"\r\n                  disabled={disabled}\r\n                />\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {showInput && (\r\n            <div className=\"snake-colorpicker__input-wrapper\">\r\n              <input\r\n                type=\"text\"\r\n                value={currentColor}\r\n                onChange={handleHexInput}\r\n                className=\"snake-colorpicker__hex-input\"\r\n                placeholder=\"#000000\"\r\n                disabled={disabled}\r\n              />\r\n            </div>\r\n          )}\r\n\r\n          {presets.length > 0 && (\r\n            <div className=\"snake-colorpicker__presets\">\r\n              {presets.map((color, index) => (\r\n                <button\r\n                  key={index}\r\n                  className=\"snake-colorpicker__preset\"\r\n                  style={{ backgroundColor: color }}\r\n                  onClick={() => handlePresetClick(color)}\r\n                  disabled={disabled}\r\n                  title={color}\r\n                />\r\n              ))}\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"snake-colorpicker__corner snake-colorpicker__corner--top-left\" />\r\n          <div className=\"snake-colorpicker__corner snake-colorpicker__corner--top-right\" />\r\n          <div className=\"snake-colorpicker__corner snake-colorpicker__corner--bottom-left\" />\r\n          <div className=\"snake-colorpicker__corner snake-colorpicker__corner--bottom-right\" />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useRef } from 'react';\r\nimport './modal.css';\r\n\r\n// Icon component for Times from pixel-icon-library\r\nconst TimesIcon = ({ className = '' }: { className?: string }) => (\r\n  <svg className={className} viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\">\r\n    <polygon points=\"15 13 16 13 16 14 17 14 17 15 18 15 18 16 19 16 19 17 20 17 20 18 21 18 21 19 22 19 22 20 21 20 21 21 20 21 20 22 19 22 19 21 18 21 18 20 17 20 17 19 16 19 16 18 15 18 15 17 14 17 14 16 13 16 13 15 11 15 11 16 10 16 10 17 9 17 9 18 8 18 8 19 7 19 7 20 6 20 6 21 5 21 5 22 4 22 4 21 3 21 3 20 2 20 2 19 3 19 3 18 4 18 4 17 5 17 5 16 6 16 6 15 7 15 7 14 8 14 8 13 9 13 9 11 8 11 8 10 7 10 7 9 6 9 6 8 5 8 5 7 4 7 4 6 3 6 3 5 2 5 2 4 3 4 3 3 4 3 4 2 5 2 5 3 6 3 6 4 7 4 7 5 8 5 8 6 9 6 9 7 10 7 10 8 11 8 11 9 13 9 13 8 14 8 14 7 15 7 15 6 16 6 16 5 17 5 17 4 18 4 18 3 19 3 19 2 20 2 20 3 21 3 21 4 22 4 22 5 21 5 21 6 20 6 20 7 19 7 19 8 18 8 18 9 17 9 17 10 16 10 16 11 15 11 15 13\"/>\r\n  </svg>\r\n);\r\n\r\nexport interface ModalProps {\r\n  /** Modal visibility */\r\n  isOpen: boolean;\r\n  /** Close handler */\r\n  onClose: () => void;\r\n  /** Modal title */\r\n  title?: string;\r\n  /** Modal content */\r\n  children: React.ReactNode;\r\n  /** Footer content */\r\n  footer?: React.ReactNode;\r\n  /** Size variant */\r\n  size?: 'small' | 'medium' | 'large' | 'full';\r\n  /** Close on overlay click */\r\n  closeOnOverlayClick?: boolean;\r\n  /** Show close button */\r\n  showCloseButton?: boolean;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n}\r\n\r\n/** Modal/Dialog component with dark theme styling */\r\nexport const Modal: React.FC<ModalProps> = ({\r\n  isOpen,\r\n  onClose,\r\n  title,\r\n  children,\r\n  footer,\r\n  size = 'medium',\r\n  closeOnOverlayClick = true,\r\n  showCloseButton = true,\r\n  className = '',\r\n}) => {\r\n  const modalRef = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    const handleEscape = (e: KeyboardEvent) => {\r\n      if (e.key === 'Escape' && isOpen) {\r\n        onClose();\r\n      }\r\n    };\r\n\r\n    if (isOpen) {\r\n      document.addEventListener('keydown', handleEscape);\r\n      document.body.style.overflow = 'hidden';\r\n    }\r\n\r\n    return () => {\r\n      document.removeEventListener('keydown', handleEscape);\r\n      document.body.style.overflow = '';\r\n    };\r\n  }, [isOpen, onClose]);\r\n\r\n  if (!isOpen) return null;\r\n\r\n  const handleOverlayClick = (e: React.MouseEvent) => {\r\n    if (closeOnOverlayClick && e.target === e.currentTarget) {\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  const modalClasses = ['snake-modal', `snake-modal--${size}`, className].filter(Boolean).join(' ');\r\n\r\n  return (\r\n    <div className=\"snake-modal-overlay\" onClick={handleOverlayClick}>\r\n      <div className={modalClasses} ref={modalRef}>\r\n        {(title || showCloseButton) && (\r\n          <div className=\"snake-modal__header\">\r\n            {title && <h2 className=\"snake-modal__title\">{title}</h2>}\r\n            {showCloseButton && (\r\n              <button\r\n                type=\"button\"\r\n                className=\"snake-modal__close\"\r\n                onClick={onClose}\r\n                aria-label=\"Close modal\"\r\n              >\r\n                <TimesIcon />\r\n              </button>\r\n            )}\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"snake-modal__content\">{children}</div>\r\n\r\n        {footer && <div className=\"snake-modal__footer\">{footer}</div>}\r\n\r\n        <div className=\"snake-modal__corner snake-modal__corner--top-left\" />\r\n        <div className=\"snake-modal__corner snake-modal__corner--top-right\" />\r\n        <div className=\"snake-modal__corner snake-modal__corner--bottom-left\" />\r\n        <div className=\"snake-modal__corner snake-modal__corner--bottom-right\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport './select.css';\r\n\r\n// Icon component for ChevronDown from pixel-icon-library\r\nconst ChevronDownIcon = ({ className = '' }: { className?: string }) => (\r\n  <svg className={className} viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\">\r\n    <polygon points=\"23 8 23 9 22 9 22 10 21 10 21 11 20 11 20 12 19 12 19 13 18 13 18 14 17 14 17 15 16 15 16 16 15 16 15 17 14 17 14 18 13 18 13 19 11 19 11 18 10 18 10 17 9 17 9 16 8 16 8 15 7 15 7 14 6 14 6 13 5 13 5 12 4 12 4 11 3 11 3 10 2 10 2 9 1 9 1 8 2 8 2 7 3 7 3 6 4 6 4 7 5 7 5 8 6 8 6 9 7 9 7 10 8 10 8 11 9 11 9 12 10 12 10 13 11 13 11 14 13 14 13 13 14 13 14 12 15 12 15 11 16 11 16 10 17 10 17 9 18 9 18 8 19 8 19 7 20 7 20 6 21 6 21 7 22 7 22 8 23 8\"/>\r\n  </svg>\r\n);\r\n\r\ninterface SelectOption {\r\n  value: string;\r\n  label: string;\r\n  disabled?: boolean;\r\n}\r\n\r\nexport interface SelectProps {\r\n  /** Select options */\r\n  options: SelectOption[];\r\n  /** Selected value */\r\n  value?: string;\r\n  /** Change handler */\r\n  onChange?: (value: string) => void;\r\n  /** Placeholder text */\r\n  placeholder?: string;\r\n  /** Label */\r\n  label?: string;\r\n  /** Helper text */\r\n  helperText?: string;\r\n  /** Error message */\r\n  error?: string;\r\n  /** Size variant */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** Visual variant */\r\n  variant?: 'default' | 'success' | 'warning' | 'danger' | 'info';\r\n  /** Full width */\r\n  fullWidth?: boolean;\r\n  /** Disabled state */\r\n  disabled?: boolean;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n}\r\n\r\n/** Select component with custom dropdown */\r\nexport const Select: React.FC<SelectProps> = ({\r\n  options,\r\n  value,\r\n  onChange,\r\n  placeholder = 'Select an option',\r\n  label,\r\n  helperText,\r\n  error,\r\n  size = 'medium',\r\n  variant = 'default',\r\n  fullWidth = false,\r\n  disabled = false,\r\n  className = '',\r\n}) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const selectRef = useRef<HTMLDivElement>(null);\r\n\r\n  const selectedOption = options.find((opt) => opt.value === value);\r\n\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (selectRef.current && !selectRef.current.contains(event.target as Node)) {\r\n        setIsOpen(false);\r\n      }\r\n    };\r\n\r\n    document.addEventListener('mousedown', handleClickOutside);\r\n    return () => document.removeEventListener('mousedown', handleClickOutside);\r\n  }, []);\r\n\r\n  const handleSelect = (optionValue: string) => {\r\n    onChange?.(optionValue);\r\n    setIsOpen(false);\r\n  };\r\n\r\n  const selectClasses = [\r\n    'snake-select',\r\n    `snake-select--${size}`,\r\n    `snake-select--${variant}`,\r\n    isOpen && 'snake-select--open',\r\n    error && 'snake-select--error',\r\n    disabled && 'snake-select--disabled',\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const wrapperClasses = [\r\n    'snake-select-wrapper',\r\n    fullWidth && 'snake-select-wrapper--full-width',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  return (\r\n    <div className={wrapperClasses} ref={selectRef}>\r\n      {label && <label className=\"snake-select__label\">{label}</label>}\r\n      <button\r\n        type=\"button\"\r\n        className={selectClasses}\r\n        onClick={() => !disabled && setIsOpen(!isOpen)}\r\n        disabled={disabled}\r\n      >\r\n        <span className=\"snake-select__value\">\r\n          {selectedOption ? selectedOption.label : placeholder}\r\n        </span>\r\n        <ChevronDownIcon className=\"snake-select__arrow\" />\r\n      </button>\r\n\r\n      {isOpen && (\r\n        <div className=\"snake-select__dropdown\">\r\n          {options.map((option) => (\r\n            <button\r\n              key={option.value}\r\n              type=\"button\"\r\n              className={[\r\n                'snake-select__option',\r\n                option.value === value && 'snake-select__option--selected',\r\n                option.disabled && 'snake-select__option--disabled',\r\n              ]\r\n                .filter(Boolean)\r\n                .join(' ')}\r\n              onClick={() => !option.disabled && handleSelect(option.value)}\r\n              disabled={option.disabled}\r\n            >\r\n              {option.label}\r\n            </button>\r\n          ))}\r\n        </div>\r\n      )}\r\n\r\n      {(error || helperText) && (\r\n        <span\r\n          className={`snake-select__helper-text ${error ? 'snake-select__helper-text--error' : ''}`}\r\n        >\r\n          {error || helperText}\r\n        </span>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport './stat.css';\r\n\r\n// Icon components from pixel-icon-library\r\nconst AngleUpIcon = ({ className = '' }: { className?: string }) => (\r\n  <svg className={className} viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\">\r\n    <polygon points=\"19 17 17 17 17 16 16 16 16 15 15 15 15 14 14 14 14 13 13 13 13 12 11 12 11 13 10 13 10 14 9 14 9 15 8 15 8 16 7 16 7 17 5 17 5 16 4 16 4 14 5 14 5 13 6 13 6 12 7 12 7 11 8 11 8 10 9 10 9 9 10 9 10 8 11 8 11 7 13 7 13 8 14 8 14 9 15 9 15 10 16 10 16 11 17 11 17 12 18 12 18 13 19 13 19 14 20 14 20 16 19 16 19 17\"/>\r\n  </svg>\r\n);\r\n\r\nconst AngleDownIcon = ({ className = '' }: { className?: string }) => (\r\n  <svg className={className} viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\">\r\n    <polygon points=\"5 7 7 7 7 8 8 8 8 9 9 9 9 10 10 10 10 11 11 11 11 12 13 12 13 11 14 11 14 10 15 10 15 9 16 9 16 8 17 8 17 7 19 7 19 8 20 8 20 10 19 10 19 11 18 11 18 12 17 12 17 13 16 13 16 14 15 14 15 15 14 15 14 16 13 16 13 17 11 17 11 16 10 16 10 15 9 15 9 14 8 14 8 13 7 13 7 12 6 12 6 11 5 11 5 10 4 10 4 8 5 8 5 7\"/>\r\n  </svg>\r\n);\r\n\r\nconst AngleRightIcon = ({ className = '' }: { className?: string }) => (\r\n  <svg className={className} viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\">\r\n    <polygon points=\"7 19 7 17 8 17 8 16 9 16 9 15 10 15 10 14 11 14 11 13 12 13 12 11 11 11 11 10 10 10 10 9 9 9 9 8 8 8 8 7 7 7 7 5 8 5 8 4 10 4 10 5 11 5 11 6 12 6 12 7 13 7 13 8 14 8 14 9 15 9 15 10 16 10 16 11 17 11 17 13 16 13 16 14 15 14 15 15 14 15 14 16 13 16 13 17 12 17 12 18 11 18 11 19 10 19 10 20 8 20 8 19 7 19\"/>\r\n  </svg>\r\n);\r\n\r\nexport interface StatProps {\r\n  /** Label for the stat */\r\n  label: string;\r\n  /** Value to display */\r\n  value: string | number;\r\n  /** Additional info or description */\r\n  info?: string;\r\n  /** Change value */\r\n  change?: {\r\n    value: string | number;\r\n    type: 'increase' | 'decrease' | 'neutral';\r\n  };\r\n  /** Icon to display */\r\n  icon?: React.ReactNode;\r\n  /** Size variant */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** Layout variant */\r\n  variant?: 'default' | 'centered' | 'horizontal';\r\n  /** Color variant */\r\n  color?: 'default' | 'success' | 'warning' | 'danger' | 'info';\r\n  /** Loading state */\r\n  loading?: boolean;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n}\r\n\r\n/** Stat component for displaying statistics and metrics */\r\nexport const Stat: React.FC<StatProps> = ({\r\n  label,\r\n  value,\r\n  info,\r\n  change,\r\n  icon,\r\n  size = 'medium',\r\n  variant = 'default',\r\n  color = 'default',\r\n  loading = false,\r\n  className = '',\r\n}) => {\r\n  const statClasses = [\r\n    'snake-stat',\r\n    `snake-stat--${size}`,\r\n    `snake-stat--${variant}`,\r\n    `snake-stat--${color}`,\r\n    loading && 'snake-stat--loading',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const changeClasses = ['snake-stat__change', change && `snake-stat__change--${change.type}`]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const getChangeIcon = () => {\r\n    if (!change) return null;\r\n    switch (change.type) {\r\n      case 'increase':\r\n        return <AngleUpIcon />;\r\n      case 'decrease':\r\n        return <AngleDownIcon />;\r\n      default:\r\n        return <AngleRightIcon />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={statClasses}>\r\n      <div className=\"snake-stat__corner snake-stat__corner--top-left\" />\r\n      <div className=\"snake-stat__corner snake-stat__corner--top-right\" />\r\n\r\n      {icon && <div className=\"snake-stat__icon\">{icon}</div>}\r\n\r\n      <div className=\"snake-stat__content\">\r\n        <div className=\"snake-stat__label\">{label}</div>\r\n\r\n        {loading ? (\r\n          <div className=\"snake-stat__value\">\r\n            <span className=\"snake-stat__loading-bar\" />\r\n          </div>\r\n        ) : (\r\n          <div className=\"snake-stat__value\">{value}</div>\r\n        )}\r\n\r\n        {(info || change) && (\r\n          <div className=\"snake-stat__footer\">\r\n            {info && <div className=\"snake-stat__info\">{info}</div>}\r\n            {change && (\r\n              <div className={changeClasses}>\r\n                <span className=\"snake-stat__change-icon\">{getChangeIcon()}</span>\r\n                <span className=\"snake-stat__change-value\">{change.value}</span>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"snake-stat__corner snake-stat__corner--bottom-left\" />\r\n      <div className=\"snake-stat__corner snake-stat__corner--bottom-right\" />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport './table.css';\r\n\r\n// Icon component for ChevronDown from pixel-icon-library\r\nconst ChevronDownIcon = ({ className = '' }: { className?: string }) => (\r\n  <svg className={className} viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\">\r\n    <polygon points=\"23 8 23 9 22 9 22 10 21 10 21 11 20 11 20 12 19 12 19 13 18 13 18 14 17 14 17 15 16 15 16 16 15 16 15 17 14 17 14 18 13 18 13 19 11 19 11 18 10 18 10 17 9 17 9 16 8 16 8 15 7 15 7 14 6 14 6 13 5 13 5 12 4 12 4 11 3 11 3 10 2 10 2 9 1 9 1 8 2 8 2 7 3 7 3 6 4 6 4 7 5 7 5 8 6 8 6 9 7 9 7 10 8 10 8 11 9 11 9 12 10 12 10 13 11 13 11 14 13 14 13 13 14 13 14 12 15 12 15 11 16 11 16 10 17 10 17 9 18 9 18 8 19 8 19 7 20 7 20 6 21 6 21 7 22 7 22 8 23 8\"/>\r\n  </svg>\r\n);\r\n\r\ninterface TableColumn<T> {\r\n  key: keyof T | string;\r\n  header: React.ReactNode;\r\n  render?: (value: any, row: T, index: number) => React.ReactNode;\r\n  width?: string;\r\n  align?: 'left' | 'center' | 'right';\r\n  sortable?: boolean;\r\n}\r\n\r\nexport interface TableProps<T> {\r\n  /** Table data */\r\n  data: T[];\r\n  /** Column definitions */\r\n  columns: TableColumn<T>[];\r\n  /** Size variant */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** Table variant */\r\n  variant?: 'default' | 'striped' | 'bordered';\r\n  /** Sticky header */\r\n  stickyHeader?: boolean;\r\n  /** Row selection */\r\n  selectable?: boolean;\r\n  /** Selected rows */\r\n  selectedRows?: number[];\r\n  /** Selection change handler */\r\n  onSelectionChange?: (selectedRows: number[]) => void;\r\n  /** Row click handler */\r\n  onRowClick?: (row: T, index: number) => void;\r\n  /** Sort handler */\r\n  onSort?: (column: string, direction: 'asc' | 'desc') => void;\r\n  /** Current sort column */\r\n  sortColumn?: string;\r\n  /** Current sort direction */\r\n  sortDirection?: 'asc' | 'desc';\r\n  /** Loading state */\r\n  loading?: boolean;\r\n  /** Empty state message */\r\n  emptyMessage?: string;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n}\r\n\r\n/** Table component for displaying tabular data */\r\nexport function Table<T extends Record<string, any>>({\r\n  data,\r\n  columns,\r\n  size = 'medium',\r\n  variant = 'default',\r\n  stickyHeader = false,\r\n  selectable = false,\r\n  selectedRows = [],\r\n  onSelectionChange,\r\n  onRowClick,\r\n  onSort,\r\n  sortColumn,\r\n  sortDirection,\r\n  loading = false,\r\n  emptyMessage = 'No data available',\r\n  className = '',\r\n}: TableProps<T>) {\r\n  const tableClasses = [\r\n    'snake-table',\r\n    `snake-table--${size}`,\r\n    `snake-table--${variant}`,\r\n    stickyHeader && 'snake-table--sticky-header',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const handleSelectAll = () => {\r\n    if (!onSelectionChange) return;\r\n\r\n    if (selectedRows.length === data.length) {\r\n      onSelectionChange([]);\r\n    } else {\r\n      onSelectionChange(data.map((_, index) => index));\r\n    }\r\n  };\r\n\r\n  const handleSelectRow = (index: number) => {\r\n    if (!onSelectionChange) return;\r\n\r\n    if (selectedRows.includes(index)) {\r\n      onSelectionChange(selectedRows.filter((i) => i !== index));\r\n    } else {\r\n      onSelectionChange([...selectedRows, index]);\r\n    }\r\n  };\r\n\r\n  const handleSort = (column: string) => {\r\n    if (!onSort) return;\r\n\r\n    const newDirection = sortColumn === column && sortDirection === 'asc' ? 'desc' : 'asc';\r\n    onSort(column, newDirection);\r\n  };\r\n\r\n  const getValue = (row: T, key: string) => {\r\n    const keys = key.split('.');\r\n    let value: any = row;\r\n\r\n    for (const k of keys) {\r\n      value = value?.[k];\r\n    }\r\n\r\n    return value;\r\n  };\r\n\r\n  return (\r\n    <div className=\"snake-table-wrapper\">\r\n      <table className={tableClasses}>\r\n        <thead className=\"snake-table__head\">\r\n          <tr className=\"snake-table__row\">\r\n            {selectable && (\r\n              <th className=\"snake-table__cell snake-table__cell--checkbox\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  className=\"snake-table__checkbox\"\r\n                  checked={selectedRows.length === data.length && data.length > 0}\r\n                  indeterminate={selectedRows.length > 0 && selectedRows.length < data.length}\r\n                  onChange={handleSelectAll}\r\n                  disabled={loading || data.length === 0}\r\n                />\r\n              </th>\r\n            )}\r\n            {columns.map((column, index) => (\r\n              <th\r\n                key={index}\r\n                className={[\r\n                  'snake-table__cell',\r\n                  'snake-table__cell--header',\r\n                  column.align && `snake-table__cell--${column.align}`,\r\n                  column.sortable && 'snake-table__cell--sortable',\r\n                ]\r\n                  .filter(Boolean)\r\n                  .join(' ')}\r\n                style={{ width: column.width }}\r\n                onClick={() => column.sortable && handleSort(column.key as string)}\r\n              >\r\n                <div className=\"snake-table__header-content\">\r\n                  {column.header}\r\n                  {column.sortable && (\r\n                    <ChevronDownIcon\r\n                      className={[\r\n                        'snake-table__sort-icon',\r\n                        sortColumn === column.key && `snake-table__sort-icon--${sortDirection}`,\r\n                      ]\r\n                        .filter(Boolean)\r\n                        .join(' ')}\r\n                    />\r\n                  )}\r\n                </div>\r\n              </th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody className=\"snake-table__body\">\r\n          {loading ? (\r\n            <tr>\r\n              <td\r\n                colSpan={columns.length + (selectable ? 1 : 0)}\r\n                className=\"snake-table__cell snake-table__cell--loading\"\r\n              >\r\n                <div className=\"snake-table__loading\">\r\n                  <span className=\"snake-table__loading-bar\" />\r\n                  <span className=\"snake-table__loading-bar\" />\r\n                  <span className=\"snake-table__loading-bar\" />\r\n                </div>\r\n              </td>\r\n            </tr>\r\n          ) : data.length === 0 ? (\r\n            <tr>\r\n              <td\r\n                colSpan={columns.length + (selectable ? 1 : 0)}\r\n                className=\"snake-table__cell snake-table__cell--empty\"\r\n              >\r\n                {emptyMessage}\r\n              </td>\r\n            </tr>\r\n          ) : (\r\n            data.map((row, rowIndex) => (\r\n              <tr\r\n                key={rowIndex}\r\n                className={[\r\n                  'snake-table__row',\r\n                  selectedRows.includes(rowIndex) && 'snake-table__row--selected',\r\n                  onRowClick && 'snake-table__row--clickable',\r\n                ]\r\n                  .filter(Boolean)\r\n                  .join(' ')}\r\n                onClick={() => onRowClick?.(row, rowIndex)}\r\n              >\r\n                {selectable && (\r\n                  <td className=\"snake-table__cell snake-table__cell--checkbox\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      className=\"snake-table__checkbox\"\r\n                      checked={selectedRows.includes(rowIndex)}\r\n                      onChange={(e) => {\r\n                        e.stopPropagation();\r\n                        handleSelectRow(rowIndex);\r\n                      }}\r\n                    />\r\n                  </td>\r\n                )}\r\n                {columns.map((column, colIndex) => (\r\n                  <td\r\n                    key={colIndex}\r\n                    className={[\r\n                      'snake-table__cell',\r\n                      column.align && `snake-table__cell--${column.align}`,\r\n                    ]\r\n                      .filter(Boolean)\r\n                      .join(' ')}\r\n                  >\r\n                    {/* Only add corner accent on bottom-right of each cell for bordered variant */}\r\n                    {variant === 'bordered' &&\r\n                      rowIndex < data.length - 1 &&\r\n                      colIndex < columns.length - 1 && (\r\n                      <span className=\"snake-table__corner\">+</span>\r\n                    )}\r\n                    {column.render\r\n                      ? column.render(getValue(row, column.key as string), row, rowIndex)\r\n                      : getValue(row, column.key as string)}\r\n                  </td>\r\n                ))}\r\n              </tr>\r\n            ))\r\n          )}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport './toast.css';\r\n\r\n// Icon components from pixel-icon-library\r\nconst AngleRightIcon = ({ className = '' }: { className?: string }) => (\r\n  <svg className={className} viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\">\r\n    <polygon points=\"7 19 7 17 8 17 8 16 9 16 9 15 10 15 10 14 11 14 11 13 12 13 12 11 11 11 11 10 10 10 10 9 9 9 9 8 8 8 8 7 7 7 7 5 8 5 8 4 10 4 10 5 11 5 11 6 12 6 12 7 13 7 13 8 14 8 14 9 15 9 15 10 16 10 16 11 17 11 17 13 16 13 16 14 15 14 15 15 14 15 14 16 13 16 13 17 12 17 12 18 11 18 11 19 10 19 10 20 8 20 8 19 7 19\"/>\r\n  </svg>\r\n);\r\n\r\nconst CheckIcon = ({ className = '' }: { className?: string }) => (\r\n  <svg className={className} viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\">\r\n    <polygon points=\"23 5 23 6 22 6 22 7 21 7 21 8 20 8 20 9 19 9 19 10 18 10 18 11 17 11 17 12 16 12 16 13 15 13 15 14 14 14 14 15 13 15 13 16 12 16 12 17 11 17 11 18 10 18 10 19 8 19 8 18 7 18 7 17 6 17 6 16 5 16 5 15 4 15 4 14 3 14 3 13 2 13 2 12 1 12 1 11 2 11 2 10 3 10 3 9 4 9 4 10 5 10 5 11 6 11 6 12 7 12 7 13 8 13 8 14 10 14 10 13 11 13 11 12 12 12 12 11 13 11 13 10 14 10 14 9 15 9 15 8 16 8 16 7 17 7 17 6 18 6 18 5 19 5 19 4 20 4 20 3 21 3 21 4 22 4 22 5 23 5\"/>\r\n  </svg>\r\n);\r\n\r\nconst ExclamationTriangleIcon = ({ className = '' }: { className?: string }) => (\r\n  <svg className={className} viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\">\r\n    <path d=\"m22,20v-2h-1v-2h-1v-2h-1v-2h-1v-2h-1v-2h-1v-2h-1v-2h-1v-2h-1v-1h-2v1h-1v2h-1v2h-1v2h-1v2h-1v2h-1v2h-1v2h-1v2h-1v2h-1v2h1v1h20v-1h1v-2h-1Zm-12-9h4v3h-1v3h-2v-3h-1v-3Zm1,7h2v2h-2v-2Z\"/>\r\n  </svg>\r\n);\r\n\r\nconst TimesIcon = ({ className = '' }: { className?: string }) => (\r\n  <svg className={className} viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\">\r\n    <polygon points=\"15 13 16 13 16 14 17 14 17 15 18 15 18 16 19 16 19 17 20 17 20 18 21 18 21 19 22 19 22 20 21 20 21 21 20 21 20 22 19 22 19 21 18 21 18 20 17 20 17 19 16 19 16 18 15 18 15 17 14 17 14 16 13 16 13 15 11 15 11 16 10 16 10 17 9 17 9 18 8 18 8 19 7 19 7 20 6 20 6 21 5 21 5 22 4 22 4 21 3 21 3 20 2 20 2 19 3 19 3 18 4 18 4 17 5 17 5 16 6 16 6 15 7 15 7 14 8 14 8 13 9 13 9 11 8 11 8 10 7 10 7 9 6 9 6 8 5 8 5 7 4 7 4 6 3 6 3 5 2 5 2 4 3 4 3 3 4 3 4 2 5 2 5 3 6 3 6 4 7 4 7 5 8 5 8 6 9 6 9 7 10 7 10 8 11 8 11 9 13 9 13 8 14 8 14 7 15 7 15 6 16 6 16 5 17 5 17 4 18 4 18 3 19 3 19 2 20 2 20 3 21 3 21 4 22 4 22 5 21 5 21 6 20 6 20 7 19 7 19 8 18 8 18 9 17 9 17 10 16 10 16 11 15 11 15 13\"/>\r\n  </svg>\r\n);\r\n\r\nconst InfoCircleIcon = ({ className = '' }: { className?: string }) => (\r\n  <svg className={className} viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\">\r\n    <path d=\"m22,9v-2h-1v-2h-1v-1h-1v-1h-2v-1h-2v-1h-6v1h-2v1h-2v1h-1v1h-1v2h-1v2h-1v6h1v2h1v2h1v1h1v1h2v1h2v1h6v-1h2v-1h2v-1h1v-1h1v-2h1v-2h1v-6h-1Zm-11-3h2v2h-2v-2Zm-1,9h1v-5h-1v-1h3v6h1v2h-4v-2Z\"/>\r\n  </svg>\r\n);\r\n\r\nexport interface ToastProps {\r\n  /** Toast content */\r\n  message: string;\r\n  /** Toast variant */\r\n  variant?: 'default' | 'success' | 'warning' | 'danger' | 'info';\r\n  /** Toast position */\r\n  position?:\r\n    | 'top-left'\r\n    | 'top-center'\r\n    | 'top-right'\r\n    | 'bottom-left'\r\n    | 'bottom-center'\r\n    | 'bottom-right';\r\n  /** Duration in milliseconds (0 for persistent) */\r\n  duration?: number;\r\n  /** Show close button */\r\n  closable?: boolean;\r\n  /** Close handler */\r\n  onClose?: () => void;\r\n  /** Show icon */\r\n  showIcon?: boolean;\r\n  /** Custom icon */\r\n  icon?: React.ReactNode;\r\n  /** Action button */\r\n  action?: {\r\n    label: string;\r\n    onClick: () => void;\r\n  };\r\n  /** Progress bar */\r\n  showProgress?: boolean;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n}\r\n\r\n/** Toast component for notifications */\r\nexport const Toast: React.FC<ToastProps> = ({\r\n  message,\r\n  variant = 'default',\r\n  position = 'bottom-right',\r\n  duration = 3000,\r\n  closable = true,\r\n  onClose,\r\n  showIcon = true,\r\n  icon,\r\n  action,\r\n  showProgress = false,\r\n  className = '',\r\n}) => {\r\n  const [isVisible, setIsVisible] = useState(true);\r\n  const [progress, setProgress] = useState(100);\r\n\r\n  useEffect(() => {\r\n    if (duration > 0) {\r\n      const timer = setTimeout(() => {\r\n        setIsVisible(false);\r\n        setTimeout(() => onClose?.(), 300);\r\n      }, duration);\r\n\r\n      if (showProgress) {\r\n        const interval = setInterval(() => {\r\n          setProgress((prev) => {\r\n            const newProgress = prev - 100 / (duration / 100);\r\n            return newProgress > 0 ? newProgress : 0;\r\n          });\r\n        }, 100);\r\n\r\n        return () => {\r\n          clearTimeout(timer);\r\n          clearInterval(interval);\r\n        };\r\n      }\r\n\r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [duration, onClose, showProgress]);\r\n\r\n  const handleClose = () => {\r\n    setIsVisible(false);\r\n    setTimeout(() => onClose?.(), 300);\r\n  };\r\n\r\n  const getDefaultIcon = () => {\r\n    if (icon) return icon;\r\n\r\n    switch (variant) {\r\n      case 'success':\r\n        return <CheckIcon />;\r\n      case 'warning':\r\n        return <ExclamationTriangleIcon />;\r\n      case 'danger':\r\n        return <TimesIcon />;\r\n      case 'info':\r\n        return <InfoCircleIcon />;\r\n      default:\r\n        return <AngleRightIcon />;\r\n    }\r\n  };\r\n\r\n  const toastClasses = [\r\n    'snake-toast',\r\n    `snake-toast--${variant}`,\r\n    `snake-toast--${position}`,\r\n    !isVisible && 'snake-toast--hidden',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  return (\r\n    <div className={toastClasses} role=\"alert\">\r\n      {showIcon && <div className=\"snake-toast__icon\">{getDefaultIcon()}</div>}\r\n\r\n      <div className=\"snake-toast__content\">\r\n        <div className=\"snake-toast__message\">{message}</div>\r\n        {action && (\r\n          <button className=\"snake-toast__action\" onClick={action.onClick}>\r\n            {action.label}\r\n          </button>\r\n        )}\r\n      </div>\r\n\r\n      {closable && (\r\n        <button className=\"snake-toast__close\" onClick={handleClose} aria-label=\"Close\">\r\n          <TimesIcon />\r\n        </button>\r\n      )}\r\n\r\n      {showProgress && duration > 0 && (\r\n        <div className=\"snake-toast__progress\">\r\n          <div className=\"snake-toast__progress-bar\" style={{ width: `${progress}%` }} />\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"snake-toast__corner snake-toast__corner--top-left\" />\r\n      <div className=\"snake-toast__corner snake-toast__corner--top-right\" />\r\n      <div className=\"snake-toast__corner snake-toast__corner--bottom-left\" />\r\n      <div className=\"snake-toast__corner snake-toast__corner--bottom-right\" />\r\n    </div>\r\n  );\r\n};\r\n\r\n// Toast container component for managing multiple toasts\r\ninterface ToastContainerProps {\r\n  toasts: Array<{\r\n    id: string;\r\n    message: string;\r\n    variant?: ToastProps['variant'];\r\n    duration?: number;\r\n    action?: ToastProps['action'];\r\n  }>;\r\n  position?: ToastProps['position'];\r\n  onClose: (id: string) => void;\r\n}\r\n\r\nexport const ToastContainer: React.FC<ToastContainerProps> = ({\r\n  toasts,\r\n  position = 'bottom-right',\r\n  onClose,\r\n}) => {\r\n  const containerClasses = ['snake-toast-container', `snake-toast-container--${position}`].join(\r\n    ' ',\r\n  );\r\n\r\n  return (\r\n    <div className={containerClasses}>\r\n      {toasts.map((toast) => (\r\n        <Toast\r\n          key={toast.id}\r\n          message={toast.message}\r\n          variant={toast.variant}\r\n          duration={toast.duration}\r\n          action={toast.action}\r\n          position={position}\r\n          onClose={() => onClose(toast.id)}\r\n          showProgress\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport './badge.css';\r\n\r\nexport interface BadgeProps {\r\n  /** Badge content */\r\n  children: React.ReactNode;\r\n  /** Visual variant */\r\n  variant?: 'default' | 'success' | 'warning' | 'danger' | 'info' | 'ghost';\r\n  /** Size variant */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** Style variant */\r\n  style?: 'solid' | 'outline' | 'dot';\r\n  /** Icon to display */\r\n  icon?: React.ReactNode;\r\n  /** Clickable badge */\r\n  onClick?: () => void;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n}\r\n\r\n/** Badge component for status indicators and labels */\r\nexport const Badge: React.FC<BadgeProps> = ({\r\n  children,\r\n  variant = 'default',\r\n  size = 'medium',\r\n  style = 'solid',\r\n  icon,\r\n  onClick,\r\n  className = '',\r\n}) => {\r\n  const Component = onClick ? 'button' : 'span';\r\n\r\n  const badgeClasses = [\r\n    'snake-badge',\r\n    `snake-badge--${variant}`,\r\n    `snake-badge--${size}`,\r\n    `snake-badge--${style}`,\r\n    onClick && 'snake-badge--clickable',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  return (\r\n    <Component className={badgeClasses} onClick={onClick} type={onClick ? 'button' : undefined}>\r\n      {style === 'dot' && <span className=\"snake-badge__dot\" />}\r\n      {icon && <span className=\"snake-badge__icon\">{icon}</span>}\r\n      <span className=\"snake-badge__text\">{children}</span>\r\n    </Component>\r\n  );\r\n};\r\n","import React, { useMemo, useState } from 'react';\r\nimport './bargraph.css';\r\n\r\ninterface DataPoint {\r\n  label: string;\r\n  value: number;\r\n  color?: string;\r\n  subLabel?: string;\r\n}\r\n\r\nexport interface BarGraphProps {\r\n  /** Array of data points */\r\n  data: DataPoint[];\r\n  /** Maximum value for the scale (auto-calculated if not provided) */\r\n  maxValue?: number;\r\n  /** Height of the graph (defaults to 100% to fill parent) */\r\n  height?: number | string;\r\n  /** Width of the graph (defaults to 100% to fill parent) */\r\n  width?: number | string;\r\n  /** Width of each bar */\r\n  barWidth?: number;\r\n  /** Gap between bars */\r\n  gap?: number;\r\n  /** Show values on top of bars */\r\n  showValues?: boolean;\r\n  /** Show grid lines */\r\n  showGrid?: boolean;\r\n  /** Number of grid lines */\r\n  gridLines?: number;\r\n  /** Show x-axis labels */\r\n  showLabels?: boolean;\r\n  /** Show y-axis scale */\r\n  showScale?: boolean;\r\n  /** Orientation of the graph */\r\n  orientation?: 'vertical' | 'horizontal';\r\n  /** Animation on mount */\r\n  animate?: boolean;\r\n  /** Bar color (can be overridden per data point) */\r\n  barColor?: string;\r\n  /** Grid color */\r\n  gridColor?: string;\r\n  /** Size variant */\r\n  variant?: 'default' | 'minimal' | 'detailed' | 'interactive';\r\n  /** Value formatter function */\r\n  formatValue?: (value: number) => string;\r\n  /** Bar click handler for interactive variant */\r\n  onBarClick?: (dataPoint: DataPoint | null, index: number | null) => void;\r\n  /** Bar hover handler for interactive variant */\r\n  onBarHover?: (dataPoint: DataPoint | null, index: number | null) => void;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n}\r\n\r\n/** BarGraph component for data visualization */\r\nexport const BarGraph: React.FC<BarGraphProps> = ({\r\n  data,\r\n  maxValue,\r\n  height = '100%',\r\n  width = '100%',\r\n  barWidth = 40,\r\n  gap = 8,\r\n  showValues = true,\r\n  showGrid = true,\r\n  gridLines = 5,\r\n  showLabels = true,\r\n  showScale = true,\r\n  orientation = 'vertical',\r\n  animate = true,\r\n  barColor = '#3a3a3a',\r\n  gridColor = '#3a3a3a',\r\n  variant = 'default',\r\n  formatValue = (value) => value?.toString() || '0',\r\n  onBarClick,\r\n  onBarHover,\r\n  className = '',\r\n}) => {\r\n  // State for interactive variant\r\n  const [hoveredBar, setHoveredBar] = useState<number | null>(null);\r\n  const [selectedBar, setSelectedBar] = useState<number | null>(null);\r\n  const [tooltipPosition, setTooltipPosition] = useState<{ x: number; y: number } | null>(null);\r\n\r\n  const calculatedMaxValue = useMemo(() => {\r\n    if (maxValue) return maxValue;\r\n    const values = data.map((d) => d.value || 0);\r\n    return Math.max(...values, 0) * 1.1; // Add 10% padding\r\n  }, [data, maxValue]);\r\n\r\n  const scaleValues = useMemo(() => {\r\n    return Array.from({ length: gridLines + 1 }, (_, i) => {\r\n      return Math.round((calculatedMaxValue / gridLines) * i);\r\n    });\r\n  }, [calculatedMaxValue, gridLines]);\r\n\r\n  const graphWidth = useMemo(() => {\r\n    if (orientation === 'vertical') {\r\n      // Use 100% width to fill parent for vertical orientation\r\n      return '100%';\r\n    }\r\n    // For horizontal, use provided width\r\n    return width;\r\n  }, [orientation, width]);\r\n\r\n  const graphHeight = useMemo(() => {\r\n    if (orientation === 'vertical') {\r\n      return height;\r\n    }\r\n    // For horizontal orientation, calculate based on data\r\n    if (typeof height === 'number') {\r\n      return height;\r\n    }\r\n    return data.length * (barWidth + gap) + gap;\r\n  }, [orientation, height, data.length, barWidth, gap]);\r\n\r\n  const classes = [\r\n    'snake-bar-graph',\r\n    `snake-bar-graph--${orientation}`,\r\n    `snake-bar-graph--${variant}`,\r\n    animate && 'snake-bar-graph--animated',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const variantStyles = {\r\n    minimal: {\r\n      showGrid: false,\r\n      showScale: false,\r\n      showValues: false,\r\n    },\r\n    detailed: {\r\n      showGrid: true,\r\n      showScale: true,\r\n      showValues: true,\r\n      gridLines: 10,\r\n    },\r\n    interactive: {\r\n      showGrid: true,\r\n      showScale: true,\r\n      showValues: false,\r\n      animate: true,\r\n    },\r\n  };\r\n\r\n  const variantProps = variant !== 'default' ? variantStyles[variant] || {} : {};\r\n  const finalShowGrid = variantProps.showGrid ?? showGrid;\r\n  const finalShowScale = variantProps.showScale ?? showScale;\r\n  const finalShowValues = variantProps.showValues ?? showValues;\r\n  const finalGridLines = variantProps.gridLines ?? gridLines;\r\n  const finalBarColor = variantProps.barColor ?? barColor;\r\n  const finalGridColor = variantProps.gridColor ?? gridColor;\r\n\r\n  const renderVerticalBars = () => (\r\n    <>\r\n      {/* Grid lines */}\r\n      {finalShowGrid && (\r\n        <div className=\"snake-bar-graph__grid\">\r\n          {Array.from({ length: finalGridLines + 1 }, (_, i) => {\r\n            const position = (i / finalGridLines) * 100;\r\n            return (\r\n              <div\r\n                key={`grid-${i}`}\r\n                className=\"snake-bar-graph__grid-line\"\r\n                style={{\r\n                  bottom: `${position}%`,\r\n                  borderColor: finalGridColor,\r\n                }}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n\r\n      {/* Y-axis scale */}\r\n      {finalShowScale && (\r\n        <div className=\"snake-bar-graph__scale\">\r\n          {scaleValues.reverse().map((value, i) => (\r\n            <div\r\n              key={`scale-${i}`}\r\n              className=\"snake-bar-graph__scale-value\"\r\n              style={{\r\n                top: `${(i / finalGridLines) * 100}%`,\r\n              }}\r\n            >\r\n              {formatValue(value)}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n\r\n      {/* Bars */}\r\n      <div className=\"snake-bar-graph__bars\">\r\n        {data.map((point, index) => {\r\n          const barHeight = ((point.value || 0) / calculatedMaxValue) * 100;\r\n          return (\r\n            <div\r\n              key={`bar-${index}`}\r\n              className={`snake-bar-graph__bar-container ${\r\n                variant === 'interactive' && hoveredBar === index ? 'snake-bar-graph__bar-container--hovered' : ''\r\n              } ${\r\n                variant === 'interactive' && selectedBar === index ? 'snake-bar-graph__bar-container--selected' : ''\r\n              }`}\r\n              onMouseEnter={(e) => {\r\n                if (variant === 'interactive') {\r\n                  setHoveredBar(index);\r\n                  const rect = e.currentTarget.getBoundingClientRect();\r\n                  setTooltipPosition({\r\n                    x: rect.left + rect.width / 2,\r\n                    y: rect.top - 10\r\n                  });\r\n                  onBarHover?.(point, index);\r\n                }\r\n              }}\r\n              onMouseLeave={() => {\r\n                if (variant === 'interactive') {\r\n                  setHoveredBar(null);\r\n                  setTooltipPosition(null);\r\n                  onBarHover?.(null, null);\r\n                }\r\n              }}\r\n              onClick={() => {\r\n                if (variant === 'interactive') {\r\n                  setSelectedBar(selectedBar === index ? null : index);\r\n                  onBarClick?.(point, index);\r\n                }\r\n              }}\r\n              style={{\r\n                width: `${barWidth}px`,\r\n                marginLeft: index === 0 ? `${gap}px` : 0,\r\n                marginRight: `${gap}px`,\r\n              }}\r\n            >\r\n              <div\r\n                className={`snake-bar-graph__bar ${\r\n                  variant === 'interactive' && hoveredBar === index ? 'snake-bar-graph__bar--hovered' : ''\r\n                } ${\r\n                  variant === 'interactive' && selectedBar === index ? 'snake-bar-graph__bar--selected' : ''\r\n                }`}\r\n                style={{\r\n                  height: `${barHeight}%`,\r\n                  backgroundColor: point.color || finalBarColor,\r\n                  borderColor: point.color || finalBarColor,\r\n                  animationDelay: animate ? `${index * 50}ms` : '0',\r\n                }}\r\n              >\r\n                {finalShowValues && (\r\n                  <div className=\"snake-bar-graph__value\">{formatValue(point.value)}</div>\r\n                )}\r\n              </div>\r\n              {showLabels && (\r\n                <div className=\"snake-bar-graph__label\">\r\n                  <span className=\"snake-bar-graph__label-text\">{point.label}</span>\r\n                  {point.subLabel && (\r\n                    <span className=\"snake-bar-graph__sublabel\">{point.subLabel}</span>\r\n                  )}\r\n                </div>\r\n              )}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n\r\n  const renderHorizontalBars = () => (\r\n    <>\r\n      {/* Grid lines */}\r\n      {finalShowGrid && (\r\n        <div className=\"snake-bar-graph__grid\">\r\n          {Array.from({ length: finalGridLines + 1 }, (_, i) => {\r\n            const position = (i / finalGridLines) * 100;\r\n            return (\r\n              <div\r\n                key={`grid-${i}`}\r\n                className=\"snake-bar-graph__grid-line\"\r\n                style={{\r\n                  left: `${position}%`,\r\n                  borderColor: finalGridColor,\r\n                }}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n\r\n      {/* X-axis scale */}\r\n      {finalShowScale && (\r\n        <div className=\"snake-bar-graph__scale\">\r\n          {scaleValues.map((value, i) => (\r\n            <div\r\n              key={`scale-${i}`}\r\n              className=\"snake-bar-graph__scale-value\"\r\n              style={{\r\n                left: `${(i / finalGridLines) * 100}%`,\r\n              }}\r\n            >\r\n              {formatValue(value)}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n\r\n      {/* Bars */}\r\n      <div className=\"snake-bar-graph__bars\">\r\n        {data.map((point, index) => {\r\n          const barWidthPercent = ((point.value || 0) / calculatedMaxValue) * 100;\r\n          return (\r\n            <div\r\n              key={`bar-${index}`}\r\n              className={`snake-bar-graph__bar-container ${\r\n                variant === 'interactive' && hoveredBar === index ? 'snake-bar-graph__bar-container--hovered' : ''\r\n              } ${\r\n                variant === 'interactive' && selectedBar === index ? 'snake-bar-graph__bar-container--selected' : ''\r\n              }`}\r\n              onMouseEnter={(e) => {\r\n                if (variant === 'interactive') {\r\n                  setHoveredBar(index);\r\n                  const rect = e.currentTarget.getBoundingClientRect();\r\n                  setTooltipPosition({\r\n                    x: rect.left + rect.width / 2,\r\n                    y: rect.top - 10\r\n                  });\r\n                  onBarHover?.(point, index);\r\n                }\r\n              }}\r\n              onMouseLeave={() => {\r\n                if (variant === 'interactive') {\r\n                  setHoveredBar(null);\r\n                  setTooltipPosition(null);\r\n                  onBarHover?.(null, null);\r\n                }\r\n              }}\r\n              onClick={() => {\r\n                if (variant === 'interactive') {\r\n                  setSelectedBar(selectedBar === index ? null : index);\r\n                  onBarClick?.(point, index);\r\n                }\r\n              }}\r\n              style={{\r\n                height: `${barWidth}px`,\r\n                marginTop: index === 0 ? `${gap}px` : 0,\r\n                marginBottom: `${gap}px`,\r\n              }}\r\n            >\r\n              {showLabels && (\r\n                <div className=\"snake-bar-graph__label\">\r\n                  <span className=\"snake-bar-graph__label-text\">{point.label}</span>\r\n                  {point.subLabel && (\r\n                    <span className=\"snake-bar-graph__sublabel\">{point.subLabel}</span>\r\n                  )}\r\n                </div>\r\n              )}\r\n              <div\r\n                className={`snake-bar-graph__bar ${\r\n                  variant === 'interactive' && hoveredBar === index ? 'snake-bar-graph__bar--hovered' : ''\r\n                } ${\r\n                  variant === 'interactive' && selectedBar === index ? 'snake-bar-graph__bar--selected' : ''\r\n                }`}\r\n                style={{\r\n                  width: `${barWidthPercent}%`,\r\n                  backgroundColor: point.color || finalBarColor,\r\n                  borderColor: point.color || finalBarColor,\r\n                  animationDelay: animate ? `${index * 50}ms` : '0',\r\n                }}\r\n              >\r\n                {finalShowValues && (\r\n                  <div className=\"snake-bar-graph__value\">{formatValue(point.value)}</div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <div className={classes}>\r\n      <div className=\"snake-bar-graph__corner snake-bar-graph__corner--top-left\" />\r\n      <div className=\"snake-bar-graph__corner snake-bar-graph__corner--top-right\" />\r\n      \r\n      <div\r\n        className=\"snake-bar-graph__content\"\r\n        style={{\r\n          width: graphWidth,\r\n          height: typeof graphHeight === 'number' ? `${graphHeight}px` : graphHeight,\r\n          maxWidth: '100%',\r\n        }}\r\n      >\r\n        {orientation === 'vertical' ? renderVerticalBars() : renderHorizontalBars()}\r\n      </div>\r\n\r\n      <div className=\"snake-bar-graph__corner snake-bar-graph__corner--bottom-left\" />\r\n      <div className=\"snake-bar-graph__corner snake-bar-graph__corner--bottom-right\" />\r\n      \r\n      {/* Tooltip for interactive variant */}\r\n      {variant === 'interactive' && hoveredBar !== null && tooltipPosition && (\r\n        <div \r\n          className=\"snake-bar-graph__tooltip\"\r\n          style={{\r\n            position: 'fixed',\r\n            left: `${tooltipPosition.x}px`,\r\n            top: `${tooltipPosition.y}px`,\r\n            transform: 'translate(-50%, -100%)',\r\n          }}\r\n        >\r\n          <div className=\"snake-bar-graph__tooltip-content\">\r\n            <div className=\"snake-bar-graph__tooltip-label\">{data[hoveredBar].label}</div>\r\n            <div className=\"snake-bar-graph__tooltip-value\">{formatValue(data[hoveredBar].value)}</div>\r\n            {data[hoveredBar].subLabel && (\r\n              <div className=\"snake-bar-graph__tooltip-sublabel\">{data[hoveredBar].subLabel}</div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};","import React from 'react';\r\nimport './breadcrumb.css';\r\n\r\ninterface BreadcrumbItem {\r\n  label: string;\r\n  href?: string;\r\n  icon?: React.ReactNode;\r\n}\r\n\r\nexport interface BreadcrumbProps {\r\n  /** Breadcrumb items */\r\n  items: BreadcrumbItem[];\r\n  /** Separator character */\r\n  separator?: React.ReactNode;\r\n  /** Size variant */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** Maximum items to display (0 = no limit) */\r\n  maxItems?: number;\r\n  /** Custom item renderer */\r\n  renderItem?: (item: BreadcrumbItem, index: number, isLast: boolean) => React.ReactNode;\r\n  /** Click handler for items */\r\n  onItemClick?: (item: BreadcrumbItem, index: number) => void;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n}\r\n\r\n/** Breadcrumb component for navigation hierarchy */\r\nexport const Breadcrumb: React.FC<BreadcrumbProps> = ({\r\n  items,\r\n  separator = '/',\r\n  size = 'medium',\r\n  maxItems = 0,\r\n  renderItem,\r\n  onItemClick,\r\n  className = '',\r\n}) => {\r\n  const breadcrumbClasses = ['snake-breadcrumb', `snake-breadcrumb--${size}`, className]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const displayItems = React.useMemo(() => {\r\n    if (maxItems === 0 || items.length <= maxItems) {\r\n      return items;\r\n    }\r\n\r\n    const firstItem = items[0];\r\n    const lastItems = items.slice(-(maxItems - 2));\r\n\r\n    return [firstItem, { label: '...', href: undefined }, ...lastItems];\r\n  }, [items, maxItems]);\r\n\r\n  const handleClick = (item: BreadcrumbItem, index: number, e: React.MouseEvent) => {\r\n    if (!item.href) {\r\n      e.preventDefault();\r\n    }\r\n    onItemClick?.(item, index);\r\n  };\r\n\r\n  const defaultRenderItem = (item: BreadcrumbItem, index: number, isLast: boolean) => {\r\n    const itemClasses = [\r\n      'snake-breadcrumb__item',\r\n      isLast && 'snake-breadcrumb__item--current',\r\n      !item.href && 'snake-breadcrumb__item--disabled',\r\n    ]\r\n      .filter(Boolean)\r\n      .join(' ');\r\n\r\n    const content = (\r\n      <>\r\n        {item.icon && <span className=\"snake-breadcrumb__icon\">{item.icon}</span>}\r\n        <span className=\"snake-breadcrumb__text\">{item.label}</span>\r\n      </>\r\n    );\r\n\r\n    if (!isLast && item.href) {\r\n      return (\r\n        <a href={item.href} className={itemClasses} onClick={(e) => handleClick(item, index, e)}>\r\n          {content}\r\n        </a>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <span className={itemClasses} aria-current={isLast ? 'page' : undefined}>\r\n        {content}\r\n      </span>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <nav className={breadcrumbClasses} aria-label=\"Breadcrumb\">\r\n      <ol className=\"snake-breadcrumb__list\">\r\n        {displayItems.map((item, index) => {\r\n          const isLast = index === displayItems.length - 1;\r\n\r\n          return (\r\n            <li key={index} className=\"snake-breadcrumb__list-item\">\r\n              {renderItem\r\n                ? renderItem(item, index, isLast)\r\n                : defaultRenderItem(item, index, isLast)}\r\n              {!isLast && (\r\n                <span className=\"snake-breadcrumb__separator\" aria-hidden=\"true\">\r\n                  {separator}\r\n                </span>\r\n              )}\r\n            </li>\r\n          );\r\n        })}\r\n      </ol>\r\n    </nav>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport './button.css';\r\n\r\nexport interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\r\n  /** Visual style variant */\r\n  variant?: 'primary' | 'secondary' | 'ghost' | 'danger' | 'cyber' | 'clipped';\r\n  /** How large should the button be? */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** Is the button in a loading state? */\r\n  loading?: boolean;\r\n  /** Should the button fill its container? */\r\n  fullWidth?: boolean;\r\n  /** Button contents */\r\n  children: React.ReactNode;\r\n}\r\n\r\n/** Primary UI component for user interaction */\r\nexport const Button: React.FC<ButtonProps> = ({\r\n  variant = 'primary',\r\n  size = 'medium',\r\n  loading = false,\r\n  fullWidth = false,\r\n  disabled = false,\r\n  children,\r\n  className = '',\r\n  ...props\r\n}) => {\r\n  const classes = [\r\n    'snake-button',\r\n    `snake-button--${variant}`,\r\n    `snake-button--${size}`,\r\n    fullWidth && 'snake-button--full-width',\r\n    loading && 'snake-button--loading',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  return (\r\n    <button type=\"button\" className={classes} disabled={disabled || loading} {...props}>\r\n      {loading ? <span className=\"snake-button__loader\">Loading...</span> : children}\r\n    </button>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport './card.css';\r\n\r\nexport interface CardProps {\r\n  /** Card content */\r\n  children: React.ReactNode;\r\n  /** Optional header content */\r\n  header?: React.ReactNode;\r\n  /** Optional footer content */\r\n  footer?: React.ReactNode;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n  /** Size variant */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** Whether the card is interactive (hoverable) */\r\n  interactive?: boolean;\r\n  /** Click handler for interactive cards */\r\n  onClick?: () => void;\r\n  /** Card variant */\r\n  variant?: 'default' | 'grid' | 'transparent';\r\n  /** Enable transition animation */\r\n  transitionIn?: boolean;\r\n  /** Type of transition animation */\r\n  transitionType?: 'expand' | 'fade' | 'slide-up' | 'slide-down' | 'slide-left' | 'slide-right';\r\n  /** Transition speed in milliseconds */\r\n  transitionSpeed?: number;\r\n  /** Delay before transition starts in milliseconds */\r\n  transitionDelay?: number;\r\n  /** Callback when transition completes */\r\n  onTransitionComplete?: () => void;\r\n}\r\n\r\n/** Card component with decorative corner elbows */\r\nexport const Card: React.FC<CardProps> = ({\r\n  children,\r\n  header,\r\n  footer,\r\n  className = '',\r\n  size = 'medium',\r\n  interactive = false,\r\n  onClick,\r\n  variant = 'default',\r\n  transitionIn = false,\r\n  transitionType = 'expand',\r\n  transitionSpeed = 300,\r\n  transitionDelay = 0,\r\n  onTransitionComplete,\r\n}) => {\r\n  const [isVisible, setIsVisible] = useState(!transitionIn);\r\n  const [isAnimating, setIsAnimating] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (transitionIn) {\r\n      const delayTimer = setTimeout(() => {\r\n        setIsVisible(true);\r\n        setIsAnimating(true);\r\n        \r\n        const completeTimer = setTimeout(() => {\r\n          setIsAnimating(false);\r\n          onTransitionComplete?.();\r\n        }, transitionSpeed);\r\n\r\n        return () => clearTimeout(completeTimer);\r\n      }, transitionDelay);\r\n\r\n      return () => clearTimeout(delayTimer);\r\n    }\r\n  }, [transitionIn, transitionDelay, transitionSpeed, onTransitionComplete]);\r\n\r\n  const classes = [\r\n    'snake-card-component',\r\n    `snake-card-component--${size}`,\r\n    `snake-card-component--${variant}`,\r\n    interactive && 'snake-card-component--interactive',\r\n    transitionIn && 'snake-card-component--transition',\r\n    transitionIn && `snake-card-component--transition-${transitionType}`,\r\n    isVisible && 'snake-card-component--visible',\r\n    isAnimating && 'snake-card-component--animating',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const Component = interactive ? 'button' : 'div';\r\n\r\n  const transitionStyle = transitionIn ? {\r\n    '--transition-speed': `${transitionSpeed}ms`,\r\n  } as React.CSSProperties : undefined;\r\n\r\n  return (\r\n    <Component\r\n      className={classes}\r\n      onClick={interactive ? onClick : undefined}\r\n      type={interactive ? 'button' : undefined}\r\n      style={transitionStyle}\r\n    >\r\n      {variant === 'grid' && <div className=\"snake-card-component__grid\" />}\r\n\r\n      <div className=\"snake-card-component__elbow snake-card-component__elbow--top-left\" />\r\n      <div className=\"snake-card-component__elbow snake-card-component__elbow--top-right\" />\r\n      <div className=\"snake-card-component__elbow snake-card-component__elbow--bottom-left\" />\r\n      <div className=\"snake-card-component__elbow snake-card-component__elbow--bottom-right\" />\r\n\r\n      {header && <div className=\"snake-card-component__header\">{header}</div>}\r\n\r\n      <div className=\"snake-card-component__content\">{children}</div>\r\n\r\n      {footer && <div className=\"snake-card-component__footer\">{footer}</div>}\r\n    </Component>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport './checkbox.css';\r\n\r\nexport interface CheckboxProps extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'type' | 'size'> {\r\n  /** Checkbox label */\r\n  label?: string;\r\n  /** Size variant */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** Color variant */\r\n  variant?: 'default' | 'success' | 'warning' | 'danger' | 'info';\r\n  /** Indeterminate state */\r\n  indeterminate?: boolean;\r\n  /** Helper text */\r\n  helperText?: string;\r\n  /** Error state */\r\n  error?: boolean;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n}\r\n\r\n/** Checkbox component for boolean selections */\r\nexport const Checkbox: React.FC<CheckboxProps> = ({\r\n  label,\r\n  size = 'medium',\r\n  variant = 'default',\r\n  indeterminate = false,\r\n  helperText,\r\n  error = false,\r\n  disabled = false,\r\n  className = '',\r\n  onChange,\r\n  ...props\r\n}) => {\r\n  const checkboxRef = React.useRef<HTMLInputElement>(null);\r\n\r\n  React.useEffect(() => {\r\n    if (checkboxRef.current) {\r\n      checkboxRef.current.indeterminate = indeterminate;\r\n    }\r\n  }, [indeterminate]);\r\n\r\n  const wrapperClasses = [\r\n    'snake-checkbox-wrapper',\r\n    `snake-checkbox-wrapper--${size}`,\r\n    disabled && 'snake-checkbox-wrapper--disabled',\r\n    error && 'snake-checkbox-wrapper--error',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const checkboxClasses = ['snake-checkbox', `snake-checkbox--${variant}`]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  return (\r\n    <div className={wrapperClasses}>\r\n      <label className=\"snake-checkbox__label\">\r\n        <input\r\n          ref={checkboxRef}\r\n          type=\"checkbox\"\r\n          className={checkboxClasses}\r\n          disabled={disabled}\r\n          onChange={onChange}\r\n          {...props}\r\n        />\r\n        <span className=\"snake-checkbox__box\">\r\n          <span className=\"snake-checkbox__check\" />\r\n          <span className=\"snake-checkbox__indeterminate\" />\r\n        </span>\r\n        {label && <span className=\"snake-checkbox__text\">{label}</span>}\r\n      </label>\r\n      {helperText && <div className=\"snake-checkbox__helper\">{helperText}</div>}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport './divider.css';\r\n\r\nexport interface DividerProps {\r\n  /** Orientation of the divider */\r\n  orientation?: 'horizontal' | 'vertical';\r\n  /** Style variant */\r\n  variant?: 'solid' | 'dashed' | 'dotted' | 'double' | 'accent';\r\n  /** Thickness of the divider */\r\n  thickness?: 'thin' | 'medium' | 'thick';\r\n  /** Color variant */\r\n  color?: 'default' | 'muted' | 'primary' | 'secondary';\r\n  /** Text or element to display in the center */\r\n  children?: React.ReactNode;\r\n  /** Spacing around the divider */\r\n  spacing?: 'small' | 'medium' | 'large';\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n  /** Additional styles */\r\n  style?: React.CSSProperties;\r\n}\r\n\r\n/** Divider component for visual separation */\r\nexport const Divider: React.FC<DividerProps> = ({\r\n  orientation = 'horizontal',\r\n  variant = 'solid',\r\n  thickness = 'thin',\r\n  color = 'default',\r\n  children,\r\n  spacing = 'medium',\r\n  className = '',\r\n  style,\r\n}) => {\r\n  const dividerClasses = [\r\n    'snake-divider',\r\n    `snake-divider--${orientation}`,\r\n    `snake-divider--${variant}`,\r\n    `snake-divider--${thickness}`,\r\n    `snake-divider--${color}`,\r\n    `snake-divider--spacing-${spacing}`,\r\n    children && 'snake-divider--with-content',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  return (\r\n    <div className={dividerClasses} style={style} role=\"separator\" aria-orientation={orientation}>\r\n      {children && (\r\n        <>\r\n          <div className=\"snake-divider__line snake-divider__line--start\" />\r\n          <div className=\"snake-divider__content\">{children}</div>\r\n          <div className=\"snake-divider__line snake-divider__line--end\" />\r\n        </>\r\n      )}\r\n      {!children && <div className=\"snake-divider__line\" />}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useMemo, useState } from 'react';\r\nimport './donutgraph.css';\r\n\r\ninterface DataSegment {\r\n  label: string;\r\n  value: number;\r\n  color?: string;\r\n}\r\n\r\nexport interface DonutGraphProps {\r\n  /** Array of data segments */\r\n  data: DataSegment[];\r\n  /** Size of the graph (defaults to 100% to fill parent, maintains aspect ratio) */\r\n  size?: number | string;\r\n  /** Thickness of the donut ring */\r\n  thickness?: number;\r\n  /** Inner radius percentage (0-80) */\r\n  innerRadius?: number;\r\n  /** Colors for segments */\r\n  colors?: string[];\r\n  /** Show center value */\r\n  showCenterValue?: boolean;\r\n  /** Center value text */\r\n  centerValue?: string;\r\n  /** Center label text */\r\n  centerLabel?: string;\r\n  /** Show legend */\r\n  showLegend?: boolean;\r\n  /** Show values on segments */\r\n  showValues?: boolean;\r\n  /** Show labels on segments */\r\n  showLabels?: boolean;\r\n  /** Animation on mount */\r\n  animate?: boolean;\r\n  /** Animate legend */\r\n  animateLegend?: boolean;\r\n  /** Gap between segments in pixels (at middle radius) */\r\n  segmentGap?: number;\r\n  /** Size variant */\r\n  variant?: 'default' | 'minimal' | 'detailed' | 'interactive';\r\n  /** Format value function */\r\n  formatValue?: (value: number, total: number) => string;\r\n  /** Callback when a segment is clicked (for interactive variant) */\r\n  onSegmentClick?: (segment: DataSegment, index: number) => void;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n}\r\n\r\n/** DonutGraph component for circular data visualization */\r\nexport const DonutGraph: React.FC<DonutGraphProps> = ({\r\n  data,\r\n  size = '100%',\r\n  thickness = 60,\r\n  innerRadius = 40,\r\n  colors = ['#8b2c2c', '#4a4a4a', '#d4d4d4', '#6b3030', '#7a7a7a'],\r\n  showCenterValue = true,\r\n  centerValue,\r\n  centerLabel,\r\n  showLegend = true,\r\n  showValues = false,\r\n  showLabels = false,\r\n  animate = true,\r\n  animateLegend = true,\r\n  segmentGap = 6,\r\n  variant = 'default',\r\n  formatValue = (value, total) => `${Math.round((value / total) * 100)}%`,\r\n  onSegmentClick,\r\n  className = '',\r\n}) => {\r\n  // State for interactive variant\r\n  const [activeSegment, setActiveSegment] = useState<string | null>(null);\r\n  const [hoveredSegment, setHoveredSegment] = useState<string | null>(null);\r\n\r\n  // Calculate total and angles\r\n  const { segments, total } = useMemo(() => {\r\n    const sum = data.reduce((acc, d) => acc + d.value, 0);\r\n    const angleMultiplier = 360;\r\n    \r\n    let currentAngle = 0;\r\n    \r\n    const segs = data.map((segment, i) => {\r\n      const percentage = segment.value / sum;\r\n      const angle = percentage * angleMultiplier;\r\n      const startAngle = currentAngle;\r\n      const endAngle = currentAngle + angle;\r\n      currentAngle = endAngle;\r\n      \r\n      return {\r\n        ...segment,\r\n        percentage,\r\n        startAngle,\r\n        endAngle,\r\n        angle,\r\n        color: segment.color || colors[i % colors.length],\r\n      };\r\n    });\r\n    \r\n    return { segments: segs, total: sum };\r\n  }, [data, colors]);\r\n\r\n  // SVG dimensions - use a default viewBox size\r\n  const svgSize = 300; // Base size for calculations\r\n  const viewBox = `0 0 ${svgSize} ${svgSize}`;\r\n  \r\n  const center = { x: svgSize / 2, y: svgSize / 2 };\r\n  const outerR = svgSize / 2 - 10;\r\n  const innerR = (outerR * innerRadius) / 100;\r\n\r\n  // Generate path for each segment with uniform gaps\r\n  const generateSegmentPath = (segment: any) => {\r\n    if (segmentGap === 0 || finalSegmentGap === 0) {\r\n      // No gaps - use simple arc paths\r\n      const startAngleRad = (segment.startAngle * Math.PI) / 180;\r\n      const endAngleRad = (segment.endAngle * Math.PI) / 180;\r\n      \r\n      const x1 = center.x + outerR * Math.cos(startAngleRad);\r\n      const y1 = center.y + outerR * Math.sin(startAngleRad);\r\n      const x2 = center.x + outerR * Math.cos(endAngleRad);\r\n      const y2 = center.y + outerR * Math.sin(endAngleRad);\r\n      \r\n      const x3 = center.x + innerR * Math.cos(endAngleRad);\r\n      const y3 = center.y + innerR * Math.sin(endAngleRad);\r\n      const x4 = center.x + innerR * Math.cos(startAngleRad);\r\n      const y4 = center.y + innerR * Math.sin(startAngleRad);\r\n      \r\n      const largeArc = segment.angle > 180 ? 1 : 0;\r\n      \r\n      return `\r\n        M ${x1} ${y1}\r\n        A ${outerR} ${outerR} 0 ${largeArc} 1 ${x2} ${y2}\r\n        L ${x3} ${y3}\r\n        A ${innerR} ${innerR} 0 ${largeArc} 0 ${x4} ${y4}\r\n        Z\r\n      `;\r\n    }\r\n    \r\n    // With gaps - offset the endpoints perpendicular to create uniform gaps\r\n    const halfGap = (finalSegmentGap || segmentGap) / 2;\r\n    \r\n    // Calculate the angle offset needed for uniform gap at both radii\r\n    const outerGapAngle = (halfGap / outerR) * (180 / Math.PI);\r\n    const innerGapAngle = (halfGap / innerR) * (180 / Math.PI);\r\n    \r\n    // Adjust angles for uniform gaps\r\n    const startAngleOuterRad = ((segment.startAngle + outerGapAngle) * Math.PI) / 180;\r\n    const endAngleOuterRad = ((segment.endAngle - outerGapAngle) * Math.PI) / 180;\r\n    const startAngleInnerRad = ((segment.startAngle + innerGapAngle) * Math.PI) / 180;\r\n    const endAngleInnerRad = ((segment.endAngle - innerGapAngle) * Math.PI) / 180;\r\n    \r\n    // Outer arc points\r\n    const x1 = center.x + outerR * Math.cos(startAngleOuterRad);\r\n    const y1 = center.y + outerR * Math.sin(startAngleOuterRad);\r\n    const x2 = center.x + outerR * Math.cos(endAngleOuterRad);\r\n    const y2 = center.y + outerR * Math.sin(endAngleOuterRad);\r\n    \r\n    // Inner arc points\r\n    const x3 = center.x + innerR * Math.cos(endAngleInnerRad);\r\n    const y3 = center.y + innerR * Math.sin(endAngleInnerRad);\r\n    const x4 = center.x + innerR * Math.cos(startAngleInnerRad);\r\n    const y4 = center.y + innerR * Math.sin(startAngleInnerRad);\r\n    \r\n    const largeArc = (segment.angle - outerGapAngle * 2) > 180 ? 1 : 0;\r\n    \r\n    return `\r\n      M ${x1} ${y1}\r\n      A ${outerR} ${outerR} 0 ${largeArc} 1 ${x2} ${y2}\r\n      L ${x3} ${y3}\r\n      A ${innerR} ${innerR} 0 ${largeArc} 0 ${x4} ${y4}\r\n      Z\r\n    `;\r\n  };\r\n\r\n  // Calculate label position\r\n  const getLabelPosition = (segment: any) => {\r\n    const midAngle = (segment.startAngle + segment.endAngle) / 2;\r\n    const midAngleRad = (midAngle * Math.PI) / 180;\r\n    const labelR = (outerR + innerR) / 2;\r\n    \r\n    return {\r\n      x: center.x + labelR * Math.cos(midAngleRad),\r\n      y: center.y + labelR * Math.sin(midAngleRad),\r\n    };\r\n  };\r\n\r\n  const classes = [\r\n    'snake-donut-graph',\r\n    `snake-donut-graph--${variant}`,\r\n    animate && 'snake-donut-graph--animated',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const variantStyles = {\r\n    minimal: {\r\n      showLegend: false,\r\n      showCenterValue: false,\r\n      segmentGap: 0,\r\n    },\r\n    detailed: {\r\n      showLegend: true,\r\n      showCenterValue: true,\r\n      showValues: true,\r\n      segmentGap: 8,\r\n    },\r\n    interactive: {\r\n      showLegend: true,\r\n      showCenterValue: true,\r\n    },\r\n  };\r\n\r\n  const variantProps = variant !== 'default' ? variantStyles[variant] || {} : {};\r\n  const finalShowLegend = variantProps.showLegend ?? showLegend;\r\n  const finalShowCenterValue = variantProps.showCenterValue ?? showCenterValue;\r\n  const finalShowValues = variantProps.showValues ?? showValues;\r\n  const finalSegmentGap = variantProps.segmentGap ?? segmentGap;\r\n\r\n  const isInteractive = variant === 'interactive';\r\n\r\n  // Calculate center value\r\n  const centerText = centerValue || `${Math.round(total)}`;\r\n\r\n  return (\r\n    <div className={classes}>\r\n      <div className=\"snake-donut-graph__corner snake-donut-graph__corner--top-left\" />\r\n      <div className=\"snake-donut-graph__corner snake-donut-graph__corner--top-right\" />\r\n      \r\n      <div className=\"snake-donut-graph__container\">\r\n        <svg\r\n          width={typeof size === 'number' ? size : '100%'}\r\n          height={typeof size === 'number' ? size : '100%'}\r\n          viewBox={viewBox}\r\n          className=\"snake-donut-graph__svg\"\r\n          preserveAspectRatio=\"xMidYMid meet\"\r\n        >\r\n          {/* Segments */}\r\n          <g className=\"snake-donut-graph__segments\">\r\n            {segments.map((segment, i) => {\r\n              const isActive = activeSegment === segment.label;\r\n              const isHovered = hoveredSegment === segment.label;\r\n              const isDimmed = isInteractive && activeSegment && !isActive;\r\n              \r\n              return (\r\n                <path\r\n                  key={`segment-${i}`}\r\n                  d={generateSegmentPath(segment)}\r\n                  fill={segment.color}\r\n                  fillOpacity={\r\n                    isDimmed ? 0.2 : \r\n                    isActive ? 1 : \r\n                    isHovered ? 0.9 : \r\n                    0.8\r\n                  }\r\n                  stroke={segment.color}\r\n                  strokeWidth={isActive || isHovered ? 2 : 1}\r\n                  strokeOpacity={\r\n                    isDimmed ? 0.3 : \r\n                    isActive ? 1 : \r\n                    isHovered ? 1 : \r\n                    0.9\r\n                  }\r\n                  className={`snake-donut-graph__segment ${isActive ? 'snake-donut-graph__segment--active' : ''}`}\r\n                  style={{\r\n                    cursor: isInteractive ? 'pointer' : 'default',\r\n                    transition: 'all 0.3s ease',\r\n                    transformOrigin: `${center.x}px ${center.y}px`,\r\n                    transform: isActive ? 'scale(1.05)' : 'scale(1)',\r\n                  }}\r\n                  onClick={() => {\r\n                    if (isInteractive) {\r\n                      const newActive = isActive ? null : segment.label;\r\n                      setActiveSegment(newActive);\r\n                      onSegmentClick?.(segment, i);\r\n                    }\r\n                  }}\r\n                  onMouseEnter={() => isInteractive && setHoveredSegment(segment.label)}\r\n                  onMouseLeave={() => isInteractive && setHoveredSegment(null)}\r\n                >\r\n                  {animate && (\r\n                    <animateTransform\r\n                      attributeName=\"transform\"\r\n                      type=\"rotate\"\r\n                      from={`0 ${center.x} ${center.y}`}\r\n                      to={`360 ${center.x} ${center.y}`}\r\n                      dur=\"1s\"\r\n                      repeatCount=\"1\"\r\n                    />\r\n                  )}\r\n                </path>\r\n              );\r\n            })}\r\n          </g>\r\n\r\n          {/* Labels on segments */}\r\n          {(showLabels || finalShowValues) && (\r\n            <g className=\"snake-donut-graph__labels\">\r\n              {segments.map((segment, i) => {\r\n                const pos = getLabelPosition(segment);\r\n                return (\r\n                  <text\r\n                    key={`label-${i}`}\r\n                    x={pos.x}\r\n                    y={pos.y}\r\n                    textAnchor=\"middle\"\r\n                    dominantBaseline=\"middle\"\r\n                    fill=\"#bdbdbd\"\r\n                    fontSize=\"11\"\r\n                    fontFamily=\"var(--font-family-mono)\"\r\n                    className=\"snake-donut-graph__label\"\r\n                    style={{\r\n                      pointerEvents: 'none',\r\n                    }}\r\n                  >\r\n                    {showLabels && !finalShowValues && segment.label}\r\n                    {finalShowValues && !showLabels && formatValue(segment.value, total)}\r\n                    {showLabels && finalShowValues && (\r\n                      <>\r\n                        <tspan x={pos.x} dy=\"-0.3em\">{segment.label}</tspan>\r\n                        <tspan x={pos.x} dy=\"1em\">{formatValue(segment.value, total)}</tspan>\r\n                      </>\r\n                    )}\r\n                  </text>\r\n                );\r\n              })}\r\n            </g>\r\n          )}\r\n\r\n          {/* Center value */}\r\n          {finalShowCenterValue && (\r\n            <g className=\"snake-donut-graph__center\">\r\n              <text\r\n                x={center.x}\r\n                y={center.y - (centerLabel ? 8 : 0)}\r\n                textAnchor=\"middle\"\r\n                dominantBaseline=\"middle\"\r\n                fill=\"#bdbdbd\"\r\n                fontSize=\"24\"\r\n                fontWeight=\"bold\"\r\n                fontFamily=\"var(--font-family-mono)\"\r\n                className=\"snake-donut-graph__center-value\"\r\n              >\r\n                {centerText}\r\n              </text>\r\n              {centerLabel && (\r\n                <text\r\n                  x={center.x}\r\n                  y={center.y + 12}\r\n                  textAnchor=\"middle\"\r\n                  dominantBaseline=\"middle\"\r\n                  fill=\"#8a8a8a\"\r\n                  fontSize=\"12\"\r\n                  fontFamily=\"var(--font-family)\"\r\n                  className=\"snake-donut-graph__center-label\"\r\n                >\r\n                  {centerLabel}\r\n                </text>\r\n              )}\r\n            </g>\r\n          )}\r\n\r\n          {/* Border rings */}\r\n          <g className=\"snake-donut-graph__borders\">\r\n            <circle\r\n              cx={center.x}\r\n              cy={center.y}\r\n              r={outerR}\r\n              fill=\"none\"\r\n              stroke=\"#3a3a3a\"\r\n              strokeWidth=\"1\"\r\n              opacity=\"0.5\"\r\n            />\r\n            <circle\r\n              cx={center.x}\r\n              cy={center.y}\r\n              r={innerR}\r\n              fill=\"none\"\r\n              stroke=\"#3a3a3a\"\r\n              strokeWidth=\"1\"\r\n              opacity=\"0.5\"\r\n            />\r\n          </g>\r\n        </svg>\r\n\r\n        {/* Legend */}\r\n        {finalShowLegend && (\r\n          <div className={`snake-donut-graph__legend ${animateLegend ? 'snake-donut-graph__legend--animated' : ''}`}>\r\n            {segments.map((segment, i) => {\r\n              const isActive = activeSegment === segment.label;\r\n              const isDimmed = isInteractive && activeSegment && !isActive;\r\n              \r\n              return (\r\n                <div\r\n                  key={`legend-${i}`}\r\n                  className={`snake-donut-graph__legend-item ${isActive ? 'snake-donut-graph__legend-item--active' : ''}`}\r\n                  style={{\r\n                    opacity: isDimmed ? 0.3 : 1,\r\n                    cursor: isInteractive ? 'pointer' : 'default',\r\n                  }}\r\n                  onClick={() => {\r\n                    if (isInteractive) {\r\n                      const newActive = isActive ? null : segment.label;\r\n                      setActiveSegment(newActive);\r\n                      onSegmentClick?.(segment, i);\r\n                    }\r\n                  }}\r\n                  onMouseEnter={() => isInteractive && setHoveredSegment(segment.label)}\r\n                  onMouseLeave={() => isInteractive && setHoveredSegment(null)}\r\n                >\r\n                  <span\r\n                    className=\"snake-donut-graph__legend-color\"\r\n                    style={{\r\n                      backgroundColor: segment.color,\r\n                      borderWidth: isActive ? '2px' : '1px',\r\n                      borderColor: isActive ? '#bdbdbd' : '#3a3a3a',\r\n                    }}\r\n                  />\r\n                  <span className=\"snake-donut-graph__legend-label\">\r\n                    {segment.label}\r\n                  </span>\r\n                  <span className=\"snake-donut-graph__legend-value\">\r\n                    {formatValue(segment.value, total)}\r\n                  </span>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"snake-donut-graph__corner snake-donut-graph__corner--bottom-left\" />\r\n      <div className=\"snake-donut-graph__corner snake-donut-graph__corner--bottom-right\" />\r\n    </div>\r\n  );\r\n};","import React, { useEffect, useRef } from 'react';\r\nimport './drawer.css';\r\n\r\nexport interface DrawerProps {\r\n  /** Whether the drawer is open */\r\n  open: boolean;\r\n  /** Callback when the drawer should close */\r\n  onClose: () => void;\r\n  /** Position of the drawer */\r\n  position?: 'left' | 'right' | 'top' | 'bottom';\r\n  /** Size of the drawer */\r\n  size?: 'small' | 'medium' | 'large' | 'full';\r\n  /** Content of the drawer */\r\n  children: React.ReactNode;\r\n  /** Whether to show overlay */\r\n  overlay?: boolean;\r\n  /** Whether clicking overlay closes drawer */\r\n  closeOnOverlayClick?: boolean;\r\n  /** Header content */\r\n  header?: React.ReactNode;\r\n  /** Footer content */\r\n  footer?: React.ReactNode;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n  /** Whether to lock body scroll when open */\r\n  lockScroll?: boolean;\r\n}\r\n\r\n/** Drawer component for slide-in panels */\r\nexport const Drawer: React.FC<DrawerProps> = ({\r\n  open,\r\n  onClose,\r\n  position = 'right',\r\n  size = 'medium',\r\n  children,\r\n  overlay = true,\r\n  closeOnOverlayClick = true,\r\n  header,\r\n  footer,\r\n  className = '',\r\n  lockScroll = true,\r\n}) => {\r\n  const drawerRef = useRef<HTMLDivElement>(null);\r\n\r\n  // Handle escape key\r\n  useEffect(() => {\r\n    const handleEscape = (e: KeyboardEvent) => {\r\n      if (e.key === 'Escape' && open) {\r\n        onClose();\r\n      }\r\n    };\r\n\r\n    if (open) {\r\n      document.addEventListener('keydown', handleEscape);\r\n    }\r\n\r\n    return () => {\r\n      document.removeEventListener('keydown', handleEscape);\r\n    };\r\n  }, [open, onClose]);\r\n\r\n  // Lock body scroll\r\n  useEffect(() => {\r\n    if (lockScroll && open) {\r\n      document.body.style.overflow = 'hidden';\r\n      return () => {\r\n        document.body.style.overflow = '';\r\n      };\r\n    }\r\n  }, [lockScroll, open]);\r\n\r\n  // Focus trap\r\n  useEffect(() => {\r\n    if (open && drawerRef.current) {\r\n      const focusableElements = drawerRef.current.querySelectorAll(\r\n        'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\r\n      );\r\n      const firstElement = focusableElements[0] as HTMLElement;\r\n      const lastElement = focusableElements[focusableElements.length - 1] as HTMLElement;\r\n\r\n      const handleTab = (e: KeyboardEvent) => {\r\n        if (e.key === 'Tab') {\r\n          if (e.shiftKey) {\r\n            if (document.activeElement === firstElement) {\r\n              e.preventDefault();\r\n              lastElement?.focus();\r\n            }\r\n          } else {\r\n            if (document.activeElement === lastElement) {\r\n              e.preventDefault();\r\n              firstElement?.focus();\r\n            }\r\n          }\r\n        }\r\n      };\r\n\r\n      document.addEventListener('keydown', handleTab);\r\n      firstElement?.focus();\r\n\r\n      return () => {\r\n        document.removeEventListener('keydown', handleTab);\r\n      };\r\n    }\r\n  }, [open]);\r\n\r\n  const drawerClasses = [\r\n    'snake-drawer',\r\n    `snake-drawer--${position}`,\r\n    `snake-drawer--${size}`,\r\n    open && 'snake-drawer--open',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  return (\r\n    <>\r\n      {overlay && (\r\n        <div\r\n          className={`snake-drawer__overlay ${open ? 'snake-drawer__overlay--visible' : ''}`}\r\n          onClick={closeOnOverlayClick ? onClose : undefined}\r\n          aria-hidden=\"true\"\r\n        />\r\n      )}\r\n      <div\r\n        ref={drawerRef}\r\n        className={drawerClasses}\r\n        role=\"dialog\"\r\n        aria-modal=\"true\"\r\n        aria-hidden={!open}\r\n      >\r\n        <button\r\n          className=\"snake-drawer__close\"\r\n          onClick={onClose}\r\n          aria-label=\"Close drawer\"\r\n        >\r\n          ×\r\n        </button>\r\n\r\n        {header && <div className=\"snake-drawer__header\">{header}</div>}\r\n\r\n        <div className=\"snake-drawer__content\">{children}</div>\r\n\r\n        {footer && <div className=\"snake-drawer__footer\">{footer}</div>}\r\n      </div>\r\n    </>\r\n  );\r\n};","import React from 'react';\r\nimport './filter.css';\r\n\r\nexport interface FilterProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\r\n  /** Filter label */\r\n  children: React.ReactNode;\r\n  /** Visual state variant */\r\n  variant?: 'default' | 'success' | 'warning' | 'danger' | 'info';\r\n  /** Whether the filter is currently active */\r\n  active?: boolean;\r\n  /** Size of the filter */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** Optional icon to display before the label */\r\n  icon?: React.ReactNode;\r\n  /** Optional count/badge to display */\r\n  count?: number | string;\r\n}\r\n\r\n/** Filter component with bracket styling */\r\nexport const Filter: React.FC<FilterProps> = ({\r\n  children,\r\n  variant = 'default',\r\n  active = false,\r\n  size = 'medium',\r\n  disabled = false,\r\n  icon,\r\n  count,\r\n  className = '',\r\n  ...props\r\n}) => {\r\n  const classes = [\r\n    'snake-filter',\r\n    `snake-filter--${variant}`,\r\n    `snake-filter--${size}`,\r\n    active && 'snake-filter--active',\r\n    disabled && 'snake-filter--disabled',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  return (\r\n    <button type=\"button\" className={classes} disabled={disabled} aria-pressed={active} {...props}>\r\n      <span className=\"snake-filter__bracket snake-filter__bracket--left\" />\r\n\r\n      <span className=\"snake-filter__content\">\r\n        {icon && <span className=\"snake-filter__icon\">{icon}</span>}\r\n        <span className=\"snake-filter__label\">{children}</span>\r\n        {count !== undefined && <span className=\"snake-filter__count\">{count}</span>}\r\n      </span>\r\n\r\n      <span className=\"snake-filter__bracket snake-filter__bracket--right\" />\r\n    </button>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport './grid.css';\r\n\r\nexport interface GridProps extends React.HTMLAttributes<HTMLDivElement> {\r\n  /** Number of columns in the grid */\r\n  columns?: number | string;\r\n  /** Number of rows in the grid */\r\n  rows?: number | string;\r\n  /** Gap between grid items */\r\n  gap?: 'none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl';\r\n  /** Column gap (overrides gap for columns) */\r\n  columnGap?: 'none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl';\r\n  /** Row gap (overrides gap for rows) */\r\n  rowGap?: 'none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl';\r\n  /** Align items within grid cells */\r\n  alignItems?: 'start' | 'center' | 'end' | 'stretch';\r\n  /** Justify items within grid cells */\r\n  justifyItems?: 'start' | 'center' | 'end' | 'stretch';\r\n  /** Align content within the grid container */\r\n  alignContent?:\r\n    | 'start'\r\n    | 'center'\r\n    | 'end'\r\n    | 'stretch'\r\n    | 'space-between'\r\n    | 'space-around'\r\n    | 'space-evenly';\r\n  /** Justify content within the grid container */\r\n  justifyContent?:\r\n    | 'start'\r\n    | 'center'\r\n    | 'end'\r\n    | 'stretch'\r\n    | 'space-between'\r\n    | 'space-around'\r\n    | 'space-evenly';\r\n  /** Auto flow direction */\r\n  autoFlow?: 'row' | 'column' | 'row dense' | 'column dense';\r\n  /** Template areas for named grid areas */\r\n  areas?: string[];\r\n  /** Minimum column width for auto-fit/auto-fill */\r\n  minColumnWidth?: string;\r\n  /** Make grid full width */\r\n  fullWidth?: boolean;\r\n  /** Make grid full height */\r\n  fullHeight?: boolean;\r\n  children: React.ReactNode;\r\n}\r\n\r\ninterface GridItemProps extends React.HTMLAttributes<HTMLDivElement> {\r\n  /** Column span */\r\n  colSpan?: number | 'full';\r\n  /** Row span */\r\n  rowSpan?: number;\r\n  /** Column start position */\r\n  colStart?: number | 'auto';\r\n  /** Column end position */\r\n  colEnd?: number | 'auto';\r\n  /** Row start position */\r\n  rowStart?: number | 'auto';\r\n  /** Row end position */\r\n  rowEnd?: number | 'auto';\r\n  /** Grid area name */\r\n  area?: string;\r\n  /** Align self within grid cell */\r\n  alignSelf?: 'start' | 'center' | 'end' | 'stretch';\r\n  /** Justify self within grid cell */\r\n  justifySelf?: 'start' | 'center' | 'end' | 'stretch';\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport const Grid: React.FC<GridProps> = ({\r\n  columns = 12,\r\n  rows,\r\n  gap = 'md',\r\n  columnGap,\r\n  rowGap,\r\n  alignItems = 'stretch',\r\n  justifyItems = 'stretch',\r\n  alignContent = 'start',\r\n  justifyContent = 'start',\r\n  autoFlow = 'row',\r\n  areas,\r\n  minColumnWidth,\r\n  fullWidth = false,\r\n  fullHeight = false,\r\n  className = '',\r\n  style,\r\n  children,\r\n  ...props\r\n}) => {\r\n  const classes = [\r\n    'snake-grid',\r\n    gap !== 'none' && !columnGap && !rowGap && `snake-grid--gap-${gap}`,\r\n    columnGap && `snake-grid--column-gap-${columnGap}`,\r\n    rowGap && `snake-grid--row-gap-${rowGap}`,\r\n    `snake-grid--align-items-${alignItems}`,\r\n    `snake-grid--justify-items-${justifyItems}`,\r\n    `snake-grid--align-content-${alignContent}`,\r\n    `snake-grid--justify-content-${justifyContent}`,\r\n    autoFlow !== 'row' && `snake-grid--auto-flow-${autoFlow.replace(' ', '-')}`,\r\n    fullWidth && 'snake-grid--full-width',\r\n    fullHeight && 'snake-grid--full-height',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const gridStyle: React.CSSProperties = {\r\n    ...style,\r\n    '--grid-columns': minColumnWidth\r\n      ? `repeat(auto-fit, minmax(${minColumnWidth}, 1fr))`\r\n      : typeof columns === 'string'\r\n        ? columns\r\n        : `repeat(${columns}, 1fr)`,\r\n    '--grid-rows': typeof rows === 'string' ? rows : rows ? `repeat(${rows}, 1fr)` : undefined,\r\n    '--grid-areas': areas ? `\"${areas.join('\" \"')}\"` : undefined,\r\n  } as React.CSSProperties;\r\n\r\n  return (\r\n    <div className={classes} style={gridStyle} {...props}>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const GridItem: React.FC<GridItemProps> = ({\r\n  colSpan,\r\n  rowSpan,\r\n  colStart,\r\n  colEnd,\r\n  rowStart,\r\n  rowEnd,\r\n  area,\r\n  alignSelf,\r\n  justifySelf,\r\n  className = '',\r\n  style,\r\n  children,\r\n  ...props\r\n}) => {\r\n  const classes = [\r\n    'snake-grid-item',\r\n    alignSelf && `snake-grid-item--align-self-${alignSelf}`,\r\n    justifySelf && `snake-grid-item--justify-self-${justifySelf}`,\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const itemStyle: React.CSSProperties = {\r\n    ...style,\r\n    '--grid-column-span': colSpan === 'full' ? '-1' : colSpan,\r\n    '--grid-row-span': rowSpan,\r\n    '--grid-column-start': colStart,\r\n    '--grid-column-end': colEnd === 'auto' ? 'auto' : colEnd,\r\n    '--grid-row-start': rowStart,\r\n    '--grid-row-end': rowEnd === 'auto' ? 'auto' : rowEnd,\r\n    '--grid-area': area,\r\n  } as React.CSSProperties;\r\n\r\n  return (\r\n    <div className={classes} style={itemStyle} {...props}>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport './heading.css';\r\n\r\nexport interface HeadingProps {\r\n  /** Heading level */\r\n  as?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';\r\n  /** Visual size (overrides semantic level) */\r\n  size?: '2xl' | 'xl' | 'lg' | 'md' | 'sm' | 'xs';\r\n  /** Text alignment */\r\n  align?: 'left' | 'center' | 'right';\r\n  /** Color variant */\r\n  variant?: 'default' | 'primary' | 'secondary' | 'muted';\r\n  /** Font weight */\r\n  weight?: 'normal' | 'medium' | 'bold';\r\n  /** Add decorative line */\r\n  decorated?: boolean;\r\n  /** Decoration position */\r\n  decorationPosition?: 'left' | 'bottom' | 'both';\r\n  /** Text transform */\r\n  transform?: 'none' | 'uppercase' | 'lowercase' | 'capitalize';\r\n  /** Truncate with ellipsis */\r\n  truncate?: boolean;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n  /** Children content */\r\n  children: React.ReactNode;\r\n}\r\n\r\n/** Heading component for titles and headers */\r\nexport const Heading: React.FC<HeadingProps> = ({\r\n  as = 'h2',\r\n  size,\r\n  align = 'left',\r\n  variant = 'default',\r\n  weight = 'bold',\r\n  decorated = false,\r\n  decorationPosition = 'left',\r\n  transform = 'none',\r\n  truncate = false,\r\n  className = '',\r\n  children,\r\n}) => {\r\n  const Component = as;\r\n\r\n  const headingClasses = [\r\n    'snake-heading',\r\n    size ? `snake-heading--${size}` : `snake-heading--${as}`,\r\n    `snake-heading--${variant}`,\r\n    `snake-heading--${align}`,\r\n    `snake-heading--weight-${weight}`,\r\n    transform !== 'none' && `snake-heading--${transform}`,\r\n    truncate && 'snake-heading--truncate',\r\n    decorated && 'snake-heading--decorated',\r\n    decorated && `snake-heading--decorated-${decorationPosition}`,\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  return (\r\n    <Component className={headingClasses}>\r\n      {decorated && decorationPosition === 'left' && (\r\n        <span className=\"snake-heading__decoration snake-heading__decoration--left\" />\r\n      )}\r\n      <span className=\"snake-heading__text\">{children}</span>\r\n      {decorated && decorationPosition === 'bottom' && (\r\n        <span className=\"snake-heading__decoration snake-heading__decoration--bottom\" />\r\n      )}\r\n      {decorated && decorationPosition === 'both' && (\r\n        <>\r\n          <span className=\"snake-heading__decoration snake-heading__decoration--left\" />\r\n          <span className=\"snake-heading__decoration snake-heading__decoration--bottom\" />\r\n        </>\r\n      )}\r\n    </Component>\r\n  );\r\n};\r\n","import React, { useMemo, useState } from 'react';\r\nimport './hexagonalbinninggraph.css';\r\n\r\ninterface DataPoint {\r\n  x: number;\r\n  y: number;\r\n  value?: number;\r\n}\r\n\r\ninterface HexBin {\r\n  x: number;\r\n  y: number;\r\n  count: number;\r\n  points: DataPoint[];\r\n}\r\n\r\nexport interface HexagonalBinningGraphProps {\r\n  /** Array of data points */\r\n  data: DataPoint[];\r\n  /** Width of the graph (defaults to 100% to fill parent) */\r\n  width?: number | string;\r\n  /** Height of the graph (defaults to 100% to fill parent) */\r\n  height?: number | string;\r\n  /** Hexagon radius in pixels */\r\n  hexRadius?: number;\r\n  /** X-axis range [min, max] */\r\n  xDomain?: [number, number];\r\n  /** Y-axis range [min, max] */\r\n  yDomain?: [number, number];\r\n  /** Color scale function or array of colors */\r\n  colors?: string[];\r\n  /** Show axes */\r\n  showAxes?: boolean;\r\n  /** Show grid */\r\n  showGrid?: boolean;\r\n  /** Show values in hexagons */\r\n  showValues?: boolean;\r\n  /** Show legend */\r\n  showLegend?: boolean;\r\n  /** Animation on mount */\r\n  animate?: boolean;\r\n  /** Animate legend */\r\n  animateLegend?: boolean;\r\n  /** Grid color */\r\n  gridColor?: string;\r\n  /** Axis color */\r\n  axisColor?: string;\r\n  /** Size variant */\r\n  variant?: 'default' | 'minimal' | 'detailed' | 'interactive';\r\n  /** Format value function */\r\n  formatValue?: (count: number) => string;\r\n  /** X-axis label */\r\n  xLabel?: string;\r\n  /** Y-axis label */\r\n  yLabel?: string;\r\n  /** Title */\r\n  title?: string;\r\n  /** Callback when a hexagon is clicked (for interactive variant) */\r\n  onHexClick?: (bin: HexBin, index: number) => void;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n}\r\n\r\n/** HexagonalBinningGraph component for 2D density visualization */\r\nexport const HexagonalBinningGraph: React.FC<HexagonalBinningGraphProps> = ({\r\n  data,\r\n  width = '100%',\r\n  height = '100%',\r\n  hexRadius = 12,\r\n  xDomain,\r\n  yDomain,\r\n  colors = ['#1a1a1a', '#2a2a2a', '#3a2828', '#4a2525', '#6b3030', '#8b2c2c'],\r\n  showAxes = true,\r\n  showGrid = false,\r\n  showValues = false,\r\n  showLegend = true,\r\n  animate = true,\r\n  animateLegend = true,\r\n  gridColor = '#3a3a3a',\r\n  axisColor = '#5a5a5a',\r\n  variant = 'default',\r\n  formatValue = (count) => count.toString(),\r\n  xLabel,\r\n  yLabel,\r\n  title,\r\n  onHexClick,\r\n  className = '',\r\n}) => {\r\n  // State for interactive variant\r\n  const [activeHex, setActiveHex] = useState<string | null>(null);\r\n  const [hoveredHex, setHoveredHex] = useState<string | null>(null);\r\n\r\n  // Calculate domains\r\n  const { xMin, xMax, yMin, yMax } = useMemo(() => {\r\n    const xValues = data.map(d => d.x);\r\n    const yValues = data.map(d => d.y);\r\n    return {\r\n      xMin: xDomain ? xDomain[0] : Math.min(...xValues),\r\n      xMax: xDomain ? xDomain[1] : Math.max(...xValues),\r\n      yMin: yDomain ? yDomain[0] : Math.min(...yValues),\r\n      yMax: yDomain ? yDomain[1] : Math.max(...yValues),\r\n    };\r\n  }, [data, xDomain, yDomain]);\r\n\r\n  // Calculate hexagon dimensions\r\n  const hexHeight = Math.sqrt(3) * hexRadius;\r\n  const hexWidth = 2 * hexRadius;\r\n  const vertDist = hexHeight;\r\n  const horizDist = hexWidth * 0.75;\r\n\r\n  // SVG dimensions - use a default viewBox size\r\n  const svgWidth = 600;\r\n  const svgHeight = 400;\r\n  \r\n  // Margins for axes and labels\r\n  const margin = { top: 40, right: 40, bottom: 60, left: 60 };\r\n  const plotWidth = svgWidth - margin.left - margin.right;\r\n  const plotHeight = svgHeight - margin.top - margin.bottom;\r\n\r\n  // Create hexagonal bins\r\n  const hexBins = useMemo(() => {\r\n    const bins: Map<string, HexBin> = new Map();\r\n    \r\n    // Add padding equal to hexagon radius to keep hexagons within bounds\r\n    const padding = hexRadius;\r\n    const effectiveWidth = plotWidth - (2 * padding);\r\n    const effectiveHeight = plotHeight - (2 * padding);\r\n    \r\n    const cols = Math.ceil(effectiveWidth / horizDist);\r\n    const rows = Math.ceil(effectiveHeight / vertDist);\r\n\r\n    // Scale functions with padding offset\r\n    const xScale = (x: number) => padding + ((x - xMin) / (xMax - xMin)) * effectiveWidth;\r\n    const yScale = (y: number) => padding + (effectiveHeight - ((y - yMin) / (yMax - yMin)) * effectiveHeight);\r\n\r\n    // Bin the data points\r\n    data.forEach(point => {\r\n      const scaledX = xScale(point.x);\r\n      const scaledY = yScale(point.y);\r\n\r\n      // Find nearest hexagon center within padded area\r\n      const col = Math.round((scaledX - padding) / horizDist);\r\n      const row = Math.round((scaledY - padding) / vertDist);\r\n      \r\n      // Calculate hexagon center position with padding\r\n      const hexX = padding + col * horizDist;\r\n      const hexY = padding + row * vertDist + (col % 2) * (vertDist / 2);\r\n      \r\n      // Only create bins that are fully within the plot area\r\n      if (hexX >= padding && hexX <= plotWidth - padding && \r\n          hexY >= padding && hexY <= plotHeight - padding) {\r\n        const key = `${col},${row}`;\r\n        \r\n        if (!bins.has(key)) {\r\n          bins.set(key, {\r\n            x: hexX,\r\n            y: hexY,\r\n            count: 0,\r\n            points: [],\r\n          });\r\n        }\r\n        \r\n        const bin = bins.get(key)!;\r\n        bin.count++;\r\n        bin.points.push(point);\r\n      }\r\n    });\r\n\r\n    return Array.from(bins.values());\r\n  }, [data, xMin, xMax, yMin, yMax, plotWidth, plotHeight, horizDist, vertDist, hexRadius]);\r\n\r\n  // Calculate max count for color scaling\r\n  const maxCount = useMemo(() => {\r\n    return Math.max(...hexBins.map(bin => bin.count));\r\n  }, [hexBins]);\r\n\r\n  // Generate hexagon path\r\n  const generateHexPath = (centerX: number, centerY: number, radius: number) => {\r\n    const angles = [0, 60, 120, 180, 240, 300];\r\n    const points = angles.map(angle => {\r\n      const radian = (angle * Math.PI) / 180;\r\n      return {\r\n        x: centerX + radius * Math.cos(radian),\r\n        y: centerY + radius * Math.sin(radian),\r\n      };\r\n    });\r\n    \r\n    return points.map((p, i) => `${i === 0 ? 'M' : 'L'} ${p.x} ${p.y}`).join(' ') + ' Z';\r\n  };\r\n\r\n  // Get color for bin based on count\r\n  const getColor = (count: number) => {\r\n    const index = Math.floor((count / maxCount) * (colors.length - 1));\r\n    return colors[Math.min(index, colors.length - 1)];\r\n  };\r\n\r\n  const classes = [\r\n    'snake-hexagonal-binning-graph',\r\n    `snake-hexagonal-binning-graph--${variant}`,\r\n    animate && 'snake-hexagonal-binning-graph--animated',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const variantStyles = {\r\n    minimal: {\r\n      showAxes: false,\r\n      showGrid: false,\r\n      showLegend: false,\r\n    },\r\n    detailed: {\r\n      showAxes: true,\r\n      showGrid: true,\r\n      showLegend: true,\r\n      showValues: true,\r\n    },\r\n    interactive: {\r\n      showAxes: true,\r\n      showLegend: true,\r\n    },\r\n  };\r\n\r\n  const variantProps = variant !== 'default' ? variantStyles[variant] || {} : {};\r\n  const finalShowAxes = variantProps.showAxes ?? showAxes;\r\n  const finalShowGrid = variantProps.showGrid ?? showGrid;\r\n  const finalShowLegend = variantProps.showLegend ?? showLegend;\r\n  const finalShowValues = variantProps.showValues ?? showValues;\r\n\r\n  const isInteractive = variant === 'interactive';\r\n\r\n  // Generate axis ticks\r\n  const xTicks = useMemo(() => {\r\n    const tickCount = 10;\r\n    const step = (xMax - xMin) / tickCount;\r\n    return Array.from({ length: tickCount + 1 }, (_, i) => xMin + i * step);\r\n  }, [xMin, xMax]);\r\n\r\n  const yTicks = useMemo(() => {\r\n    const tickCount = 8;\r\n    const step = (yMax - yMin) / tickCount;\r\n    return Array.from({ length: tickCount + 1 }, (_, i) => yMin + i * step);\r\n  }, [yMin, yMax]);\r\n\r\n  return (\r\n    <div className={classes}>\r\n      <div className=\"snake-hexagonal-binning-graph__corner snake-hexagonal-binning-graph__corner--top-left\" />\r\n      <div className=\"snake-hexagonal-binning-graph__corner snake-hexagonal-binning-graph__corner--top-right\" />\r\n      \r\n      <div className=\"snake-hexagonal-binning-graph__container\">\r\n        {title && (\r\n          <div className=\"snake-hexagonal-binning-graph__title\">{title}</div>\r\n        )}\r\n        \r\n        <svg\r\n          width={typeof width === 'number' ? width : '100%'}\r\n          height={typeof height === 'number' ? height : '100%'}\r\n          viewBox={`0 0 ${svgWidth} ${svgHeight}`}\r\n          className=\"snake-hexagonal-binning-graph__svg\"\r\n          preserveAspectRatio=\"xMidYMid meet\"\r\n        >\r\n          <g transform={`translate(${margin.left}, ${margin.top})`}>\r\n            {/* Grid */}\r\n            {finalShowGrid && (\r\n              <g className=\"snake-hexagonal-binning-graph__grid\">\r\n                {xTicks.map((tick, i) => {\r\n                  const x = ((tick - xMin) / (xMax - xMin)) * plotWidth;\r\n                  return (\r\n                    <line\r\n                      key={`grid-x-${i}`}\r\n                      x1={x}\r\n                      y1={0}\r\n                      x2={x}\r\n                      y2={plotHeight}\r\n                      stroke={gridColor}\r\n                      strokeWidth=\"1\"\r\n                      strokeOpacity=\"0.3\"\r\n                      strokeDasharray=\"2 4\"\r\n                    />\r\n                  );\r\n                })}\r\n                {yTicks.map((tick, i) => {\r\n                  const y = plotHeight - ((tick - yMin) / (yMax - yMin)) * plotHeight;\r\n                  return (\r\n                    <line\r\n                      key={`grid-y-${i}`}\r\n                      x1={0}\r\n                      y1={y}\r\n                      x2={plotWidth}\r\n                      y2={y}\r\n                      stroke={gridColor}\r\n                      strokeWidth=\"1\"\r\n                      strokeOpacity=\"0.3\"\r\n                      strokeDasharray=\"2 4\"\r\n                    />\r\n                  );\r\n                })}\r\n              </g>\r\n            )}\r\n\r\n            {/* Hexagonal bins */}\r\n            <g className=\"snake-hexagonal-binning-graph__hexagons\">\r\n              {hexBins.map((bin, i) => {\r\n                const hexKey = `${bin.x},${bin.y}`;\r\n                const isActive = activeHex === hexKey;\r\n                const isHovered = hoveredHex === hexKey;\r\n                const isDimmed = isInteractive && activeHex && !isActive;\r\n                const color = getColor(bin.count);\r\n                \r\n                return (\r\n                  <g key={`hex-${i}`}>\r\n                    <path\r\n                      d={generateHexPath(bin.x, bin.y, hexRadius - 1)}\r\n                      fill={color}\r\n                      fillOpacity={\r\n                        isDimmed ? 0.2 : \r\n                        isActive ? 1 : \r\n                        isHovered ? 0.9 : \r\n                        0.8\r\n                      }\r\n                      stroke={color}\r\n                      strokeWidth={isActive || isHovered ? 2 : 1}\r\n                      strokeOpacity={\r\n                        isDimmed ? 0.3 : \r\n                        isActive ? 1 : \r\n                        isHovered ? 1 : \r\n                        0.9\r\n                      }\r\n                      className={`snake-hexagonal-binning-graph__hexagon ${isActive ? 'snake-hexagonal-binning-graph__hexagon--active' : ''}`}\r\n                      style={{\r\n                        cursor: isInteractive ? 'pointer' : 'default',\r\n                        transition: 'all 0.3s ease',\r\n                        transform: isActive ? 'scale(1.1)' : 'scale(1)',\r\n                        transformOrigin: `${bin.x}px ${bin.y}px`,\r\n                      }}\r\n                      onClick={() => {\r\n                        if (isInteractive) {\r\n                          const newActive = isActive ? null : hexKey;\r\n                          setActiveHex(newActive);\r\n                          onHexClick?.(bin, i);\r\n                        }\r\n                      }}\r\n                      onMouseEnter={() => isInteractive && setHoveredHex(hexKey)}\r\n                      onMouseLeave={() => isInteractive && setHoveredHex(null)}\r\n                    />\r\n                    {finalShowValues && bin.count > 0 && (\r\n                      <text\r\n                        x={bin.x}\r\n                        y={bin.y}\r\n                        textAnchor=\"middle\"\r\n                        dominantBaseline=\"middle\"\r\n                        fill=\"#ffffff\"\r\n                        fontSize=\"10\"\r\n                        fontFamily=\"var(--font-family-mono)\"\r\n                        className=\"snake-hexagonal-binning-graph__value\"\r\n                        pointerEvents=\"none\"\r\n                      >\r\n                        {formatValue(bin.count)}\r\n                      </text>\r\n                    )}\r\n                  </g>\r\n                );\r\n              })}\r\n            </g>\r\n\r\n            {/* Axes */}\r\n            {finalShowAxes && (\r\n              <g className=\"snake-hexagonal-binning-graph__axes\">\r\n                {/* X-axis */}\r\n                <line\r\n                  x1={0}\r\n                  y1={plotHeight}\r\n                  x2={plotWidth}\r\n                  y2={plotHeight}\r\n                  stroke={axisColor}\r\n                  strokeWidth=\"2\"\r\n                />\r\n                {xTicks.map((tick, i) => {\r\n                  const x = ((tick - xMin) / (xMax - xMin)) * plotWidth;\r\n                  return (\r\n                    <g key={`x-tick-${i}`}>\r\n                      <line\r\n                        x1={x}\r\n                        y1={plotHeight}\r\n                        x2={x}\r\n                        y2={plotHeight + 5}\r\n                        stroke={axisColor}\r\n                        strokeWidth=\"1\"\r\n                      />\r\n                      <text\r\n                        x={x}\r\n                        y={plotHeight + 20}\r\n                        textAnchor=\"middle\"\r\n                        fill=\"#8a8a8a\"\r\n                        fontSize=\"10\"\r\n                        fontFamily=\"var(--font-family-mono)\"\r\n                      >\r\n                        {tick.toFixed(1)}\r\n                      </text>\r\n                    </g>\r\n                  );\r\n                })}\r\n                \r\n                {/* Y-axis */}\r\n                <line\r\n                  x1={0}\r\n                  y1={0}\r\n                  x2={0}\r\n                  y2={plotHeight}\r\n                  stroke={axisColor}\r\n                  strokeWidth=\"2\"\r\n                />\r\n                {yTicks.map((tick, i) => {\r\n                  const y = plotHeight - ((tick - yMin) / (yMax - yMin)) * plotHeight;\r\n                  return (\r\n                    <g key={`y-tick-${i}`}>\r\n                      <line\r\n                        x1={0}\r\n                        y1={y}\r\n                        x2={-5}\r\n                        y2={y}\r\n                        stroke={axisColor}\r\n                        strokeWidth=\"1\"\r\n                      />\r\n                      <text\r\n                        x={-10}\r\n                        y={y}\r\n                        textAnchor=\"end\"\r\n                        dominantBaseline=\"middle\"\r\n                        fill=\"#8a8a8a\"\r\n                        fontSize=\"10\"\r\n                        fontFamily=\"var(--font-family-mono)\"\r\n                      >\r\n                        {tick.toFixed(1)}\r\n                      </text>\r\n                    </g>\r\n                  );\r\n                })}\r\n              </g>\r\n            )}\r\n\r\n            {/* Axis labels */}\r\n            {finalShowAxes && (\r\n              <>\r\n                {xLabel && (\r\n                  <text\r\n                    x={plotWidth / 2}\r\n                    y={plotHeight + 45}\r\n                    textAnchor=\"middle\"\r\n                    fill=\"#bdbdbd\"\r\n                    fontSize=\"12\"\r\n                    fontFamily=\"var(--font-family)\"\r\n                    className=\"snake-hexagonal-binning-graph__axis-label\"\r\n                  >\r\n                    {xLabel}\r\n                  </text>\r\n                )}\r\n                {yLabel && (\r\n                  <text\r\n                    x={-plotHeight / 2}\r\n                    y={-40}\r\n                    textAnchor=\"middle\"\r\n                    fill=\"#bdbdbd\"\r\n                    fontSize=\"12\"\r\n                    fontFamily=\"var(--font-family)\"\r\n                    transform=\"rotate(-90)\"\r\n                    className=\"snake-hexagonal-binning-graph__axis-label\"\r\n                  >\r\n                    {yLabel}\r\n                  </text>\r\n                )}\r\n              </>\r\n            )}\r\n          </g>\r\n        </svg>\r\n\r\n        {/* Legend */}\r\n        {finalShowLegend && (\r\n          <div className={`snake-hexagonal-binning-graph__legend ${animateLegend ? 'snake-hexagonal-binning-graph__legend--animated' : ''}`}>\r\n            <div className=\"snake-hexagonal-binning-graph__legend-title\">Density</div>\r\n            <div className=\"snake-hexagonal-binning-graph__legend-scale\">\r\n              <div className=\"snake-hexagonal-binning-graph__legend-gradient\">\r\n                {colors.map((color, i) => (\r\n                  <div\r\n                    key={`legend-color-${i}`}\r\n                    className=\"snake-hexagonal-binning-graph__legend-color\"\r\n                    style={{ backgroundColor: color }}\r\n                  />\r\n                ))}\r\n              </div>\r\n              <div className=\"snake-hexagonal-binning-graph__legend-labels\">\r\n                <span>Low</span>\r\n                <span>High</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"snake-hexagonal-binning-graph__corner snake-hexagonal-binning-graph__corner--bottom-left\" />\r\n      <div className=\"snake-hexagonal-binning-graph__corner snake-hexagonal-binning-graph__corner--bottom-right\" />\r\n    </div>\r\n  );\r\n};","import React from 'react';\r\nimport './iconbutton.css';\r\n\r\nexport interface IconButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\r\n  /** Icon content */\r\n  icon: React.ReactNode;\r\n  /** Button variant */\r\n  variant?: 'default' | 'primary' | 'secondary' | 'ghost' | 'danger';\r\n  /** Size variant */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** Shape variant */\r\n  shape?: 'square' | 'circle';\r\n  /** Loading state */\r\n  loading?: boolean;\r\n  /** Tooltip text */\r\n  tooltip?: string;\r\n  /** Badge content */\r\n  badge?: string | number;\r\n  /** Badge variant */\r\n  badgeVariant?: 'default' | 'success' | 'warning' | 'danger' | 'info';\r\n}\r\n\r\n/** IconButton component for icon-only actions */\r\nexport const IconButton: React.FC<IconButtonProps> = ({\r\n  icon,\r\n  variant = 'default',\r\n  size = 'medium',\r\n  shape = 'square',\r\n  loading = false,\r\n  tooltip,\r\n  badge,\r\n  badgeVariant = 'danger',\r\n  disabled = false,\r\n  className = '',\r\n  ...props\r\n}) => {\r\n  const buttonClasses = [\r\n    'snake-icon-button',\r\n    `snake-icon-button--${variant}`,\r\n    `snake-icon-button--${size}`,\r\n    `snake-icon-button--${shape}`,\r\n    loading && 'snake-icon-button--loading',\r\n    disabled && 'snake-icon-button--disabled',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      className={buttonClasses}\r\n      disabled={disabled || loading}\r\n      title={tooltip}\r\n      aria-label={tooltip}\r\n      {...props}\r\n    >\r\n      <span className=\"snake-icon-button__content\">\r\n        {loading ? <span className=\"snake-icon-button__loader\" /> : icon}\r\n      </span>\r\n\r\n      {badge !== undefined && !loading && (\r\n        <span className={`snake-icon-button__badge snake-icon-button__badge--${badgeVariant}`}>\r\n          {badge}\r\n        </span>\r\n      )}\r\n\r\n      {shape === 'square' && (\r\n        <>\r\n          <span className=\"snake-icon-button__corner snake-icon-button__corner--top-left\" />\r\n          <span className=\"snake-icon-button__corner snake-icon-button__corner--top-right\" />\r\n          <span className=\"snake-icon-button__corner snake-icon-button__corner--bottom-left\" />\r\n          <span className=\"snake-icon-button__corner snake-icon-button__corner--bottom-right\" />\r\n        </>\r\n      )}\r\n    </button>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport './input.css';\r\n\r\nexport interface InputProps extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'size'> {\r\n  /** Input label */\r\n  label?: string;\r\n  /** Helper text below input */\r\n  helperText?: string;\r\n  /** Error message */\r\n  error?: string;\r\n  /** Size variant */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** Visual variant */\r\n  variant?: 'default' | 'success' | 'warning' | 'danger' | 'info';\r\n  /** Full width */\r\n  fullWidth?: boolean;\r\n  /** Icon to display on the left */\r\n  leftIcon?: React.ReactNode;\r\n  /** Icon to display on the right */\r\n  rightIcon?: React.ReactNode;\r\n}\r\n\r\n/** Input component with dark theme styling */\r\nexport const Input: React.FC<InputProps> = ({\r\n  label,\r\n  helperText,\r\n  error,\r\n  size = 'medium',\r\n  variant = 'default',\r\n  fullWidth = false,\r\n  leftIcon,\r\n  rightIcon,\r\n  className = '',\r\n  disabled = false,\r\n  ...props\r\n}) => {\r\n  const inputClasses = [\r\n    'snake-input',\r\n    `snake-input--${size}`,\r\n    `snake-input--${variant}`,\r\n    error && 'snake-input--error',\r\n    fullWidth && 'snake-input--full-width',\r\n    disabled && 'snake-input--disabled',\r\n    leftIcon && 'snake-input--has-left-icon',\r\n    rightIcon && 'snake-input--has-right-icon',\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const wrapperClasses = [\r\n    'snake-input-wrapper',\r\n    fullWidth && 'snake-input-wrapper--full-width',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  return (\r\n    <div className={wrapperClasses}>\r\n      {label && <label className=\"snake-input__label\">{label}</label>}\r\n      <div className=\"snake-input__container\">\r\n        {leftIcon && <span className=\"snake-input__icon snake-input__icon--left\">{leftIcon}</span>}\r\n        <input className={inputClasses} disabled={disabled} {...props} />\r\n        {rightIcon && (\r\n          <span className=\"snake-input__icon snake-input__icon--right\">{rightIcon}</span>\r\n        )}\r\n      </div>\r\n      {(error || helperText) && (\r\n        <span\r\n          className={`snake-input__helper-text ${error ? 'snake-input__helper-text--error' : ''}`}\r\n        >\r\n          {error || helperText}\r\n        </span>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport './keyboardkey.css';\r\n\r\nexport interface KeyboardKeyProps {\r\n  /** The key label to display */\r\n  children: React.ReactNode;\r\n  /** Size variant */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** Key variant */\r\n  variant?: 'default' | 'modifier' | 'action' | 'danger' | 'space';\r\n  /** Whether the key is pressed */\r\n  pressed?: boolean;\r\n  /** Whether the key is disabled */\r\n  disabled?: boolean;\r\n  /** Click handler */\r\n  onClick?: () => void;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n  /** Width multiplier for special keys */\r\n  width?: number;\r\n  /** Icon to display alongside text */\r\n  icon?: React.ReactNode;\r\n  /** Position of icon */\r\n  iconPosition?: 'left' | 'right' | 'top' | 'bottom';\r\n}\r\n\r\n/** Keyboard Key component for displaying keyboard shortcuts or virtual keyboards */\r\nexport const KeyboardKey: React.FC<KeyboardKeyProps> = ({\r\n  children,\r\n  size = 'medium',\r\n  variant = 'default',\r\n  pressed = false,\r\n  disabled = false,\r\n  onClick,\r\n  className = '',\r\n  width = 1,\r\n  icon,\r\n  iconPosition = 'left',\r\n}) => {\r\n  const classes = [\r\n    'snake-keyboard-key',\r\n    `snake-keyboard-key--${size}`,\r\n    `snake-keyboard-key--${variant}`,\r\n    pressed && 'snake-keyboard-key--pressed',\r\n    disabled && 'snake-keyboard-key--disabled',\r\n    onClick && 'snake-keyboard-key--clickable',\r\n    icon && `snake-keyboard-key--with-icon`,\r\n    icon && `snake-keyboard-key--icon-${iconPosition}`,\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const style = width !== 1 ? { '--key-width': width } as React.CSSProperties : undefined;\r\n\r\n  const Component = onClick ? 'button' : 'kbd';\r\n\r\n  return (\r\n    <Component\r\n      className={classes}\r\n      onClick={onClick}\r\n      disabled={onClick ? disabled : undefined}\r\n      style={style}\r\n    >\r\n      {icon && <span className=\"snake-keyboard-key__icon\">{icon}</span>}\r\n      <span className=\"snake-keyboard-key__label\">{children}</span>\r\n    </Component>\r\n  );\r\n};","import React, { useMemo, useState, useEffect } from 'react';\r\nimport './linegraph.css';\r\n\r\ninterface DataPoint {\r\n  x: number;\r\n  y: number;\r\n  label?: string;\r\n}\r\n\r\ninterface DataSeries {\r\n  name: string;\r\n  data: DataPoint[];\r\n  color?: string;\r\n}\r\n\r\nexport interface LineGraphProps {\r\n  /** Data series to display */\r\n  data: DataSeries | DataSeries[];\r\n  /** Width of the graph (defaults to 100% to fill parent) */\r\n  width?: number | string;\r\n  /** Height of the graph (defaults to 100% to fill parent) */\r\n  height?: number | string;\r\n  /** Show axes */\r\n  showAxes?: boolean;\r\n  /** Show grid */\r\n  showGrid?: boolean;\r\n  /** Show legend */\r\n  showLegend?: boolean;\r\n  /** Show data points */\r\n  showPoints?: boolean;\r\n  /** Show values on hover */\r\n  showValues?: boolean;\r\n  /** Animate on mount */\r\n  animate?: boolean;\r\n  /** Animate legend */\r\n  animateLegend?: boolean;\r\n  /** Line width */\r\n  strokeWidth?: number;\r\n  /** Point radius */\r\n  pointRadius?: number;\r\n  /** Curve type */\r\n  curve?: 'linear' | 'smooth' | 'step';\r\n  /** Fill area under line */\r\n  fill?: boolean;\r\n  /** Fill opacity */\r\n  fillOpacity?: number;\r\n  /** Grid color */\r\n  gridColor?: string;\r\n  /** Axis color */\r\n  axisColor?: string;\r\n  /** Size variant */\r\n  variant?: 'default' | 'minimal' | 'detailed' | 'interactive';\r\n  /** X-axis label */\r\n  xLabel?: string;\r\n  /** Y-axis label */\r\n  yLabel?: string;\r\n  /** Title */\r\n  title?: string;\r\n  /** X-axis domain [min, max] */\r\n  xDomain?: [number, number];\r\n  /** Y-axis domain [min, max] */\r\n  yDomain?: [number, number];\r\n  /** Format x-axis value */\r\n  formatX?: (value: number) => string;\r\n  /** Format y-axis value */\r\n  formatY?: (value: number) => string;\r\n  /** Callback when a point is clicked (for interactive variant) */\r\n  onPointClick?: (point: DataPoint, seriesName: string) => void;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n}\r\n\r\n/** LineGraph component for time series and continuous data visualization */\r\nexport const LineGraph: React.FC<LineGraphProps> = ({\r\n  data,\r\n  width = '100%',\r\n  height = '100%',\r\n  showAxes = true,\r\n  showGrid = false,\r\n  showLegend = true,\r\n  showPoints = true,\r\n  showValues = false,\r\n  animate = true,\r\n  animateLegend = true,\r\n  strokeWidth = 2,\r\n  pointRadius = 4,\r\n  curve = 'linear',\r\n  fill = false,\r\n  fillOpacity = 0.2,\r\n  gridColor = '#3a3a3a',\r\n  axisColor = '#5a5a5a',\r\n  variant = 'default',\r\n  xLabel,\r\n  yLabel,\r\n  title,\r\n  xDomain,\r\n  yDomain,\r\n  formatX = (v) => v.toFixed(1),\r\n  formatY = (v) => v.toFixed(1),\r\n  onPointClick,\r\n  className = '',\r\n}) => {\r\n  // Normalize data to array\r\n  const series = Array.isArray(data) ? data : [data];\r\n  \r\n  // SVG dimensions - use a default viewBox size\r\n  const svgWidth = 600;\r\n  const svgHeight = 400;\r\n  \r\n  // State for interactive variant\r\n  const [activeSeries, setActiveSeries] = useState<string | null>(null);\r\n  const [hoveredPoint, setHoveredPoint] = useState<{\r\n    x: number;\r\n    y: number;\r\n    value: DataPoint;\r\n    series: string;\r\n  } | null>(null);\r\n\r\n  // Default colors\r\n  const defaultColors = ['#8b2c2c', '#6b3030', '#4a4a4a', '#7a7a7a', '#d4d4d4'];\r\n\r\n  // Calculate domains\r\n  const { xMin, xMax, yMin, yMax } = useMemo(() => {\r\n    const allPoints = series.flatMap(s => s.data);\r\n    const xValues = allPoints.map(p => p.x);\r\n    const yValues = allPoints.map(p => p.y);\r\n    \r\n    return {\r\n      xMin: xDomain ? xDomain[0] : Math.min(...xValues),\r\n      xMax: xDomain ? xDomain[1] : Math.max(...xValues),\r\n      yMin: yDomain ? yDomain[0] : Math.min(0, ...yValues),\r\n      yMax: yDomain ? yDomain[1] : Math.max(...yValues),\r\n    };\r\n  }, [series, xDomain, yDomain]);\r\n\r\n  // Margins for axes and labels\r\n  const margin = { top: 40, right: 40, bottom: 80, left: 80 };\r\n  const plotWidth = svgWidth - margin.left - margin.right;\r\n  const plotHeight = svgHeight - margin.top - margin.bottom;\r\n\r\n  // Scale functions\r\n  const xScale = (x: number) => ((x - xMin) / (xMax - xMin)) * plotWidth;\r\n  const yScale = (y: number) => plotHeight - ((y - yMin) / (yMax - yMin)) * plotHeight;\r\n\r\n  // Generate path for line\r\n  const generatePath = (points: DataPoint[]) => {\r\n    if (points.length === 0) return '';\r\n    \r\n    const scaledPoints = points.map(p => ({\r\n      x: xScale(p.x),\r\n      y: yScale(p.y),\r\n    }));\r\n    \r\n    let path = '';\r\n    \r\n    if (curve === 'smooth') {\r\n      // Cubic bezier curve\r\n      path = scaledPoints.map((point, i) => {\r\n        if (i === 0) return `M ${point.x} ${point.y}`;\r\n        \r\n        const prev = scaledPoints[i - 1];\r\n        const cpx1 = prev.x + (point.x - prev.x) / 3;\r\n        const cpy1 = prev.y;\r\n        const cpx2 = prev.x + 2 * (point.x - prev.x) / 3;\r\n        const cpy2 = point.y;\r\n        \r\n        return `C ${cpx1} ${cpy1}, ${cpx2} ${cpy2}, ${point.x} ${point.y}`;\r\n      }).join(' ');\r\n    } else if (curve === 'step') {\r\n      path = scaledPoints.map((point, i) => {\r\n        if (i === 0) return `M ${point.x} ${point.y}`;\r\n        const prev = scaledPoints[i - 1];\r\n        return `L ${point.x} ${prev.y} L ${point.x} ${point.y}`;\r\n      }).join(' ');\r\n    } else {\r\n      // Linear\r\n      path = scaledPoints.map((point, i) => \r\n        `${i === 0 ? 'M' : 'L'} ${point.x} ${point.y}`\r\n      ).join(' ');\r\n    }\r\n    \r\n    return path;\r\n  };\r\n\r\n  // Generate fill path\r\n  const generateFillPath = (points: DataPoint[]) => {\r\n    if (points.length === 0) return '';\r\n    \r\n    const linePath = generatePath(points);\r\n    const lastPoint = points[points.length - 1];\r\n    const firstPoint = points[0];\r\n    \r\n    return `${linePath} L ${xScale(lastPoint.x)} ${yScale(0)} L ${xScale(firstPoint.x)} ${yScale(0)} Z`;\r\n  };\r\n\r\n  const classes = [\r\n    'snake-line-graph',\r\n    `snake-line-graph--${variant}`,\r\n    animate && 'snake-line-graph--animated',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const variantStyles = {\r\n    minimal: {\r\n      showAxes: false,\r\n      showGrid: false,\r\n      showLegend: false,\r\n      showPoints: false,\r\n      strokeWidth: 1,\r\n    },\r\n    detailed: {\r\n      showAxes: true,\r\n      showGrid: true,\r\n      showLegend: true,\r\n      showPoints: true,\r\n      showValues: true,\r\n      strokeWidth: 2,\r\n    },\r\n    interactive: {\r\n      showAxes: true,\r\n      showLegend: true,\r\n      showPoints: true,\r\n      showValues: true,\r\n    },\r\n  };\r\n\r\n  const variantProps = variant !== 'default' ? variantStyles[variant] || {} : {};\r\n  const finalShowAxes = variantProps.showAxes ?? showAxes;\r\n  const finalShowGrid = variantProps.showGrid ?? showGrid;\r\n  const finalShowLegend = variantProps.showLegend ?? showLegend;\r\n  const finalShowPoints = variantProps.showPoints ?? showPoints;\r\n  const finalShowValues = variantProps.showValues ?? showValues;\r\n  const finalStrokeWidth = variantProps.strokeWidth ?? strokeWidth;\r\n\r\n  const isInteractive = variant === 'interactive';\r\n\r\n  // Generate axis ticks\r\n  const xTicks = useMemo(() => {\r\n    const tickCount = 10;\r\n    const step = (xMax - xMin) / tickCount;\r\n    return Array.from({ length: tickCount + 1 }, (_, i) => xMin + i * step);\r\n  }, [xMin, xMax]);\r\n\r\n  const yTicks = useMemo(() => {\r\n    const tickCount = 8;\r\n    const step = (yMax - yMin) / tickCount;\r\n    return Array.from({ length: tickCount + 1 }, (_, i) => yMin + i * step);\r\n  }, [yMin, yMax]);\r\n\r\n  return (\r\n    <div className={classes}>\r\n      <div className=\"snake-line-graph__corner snake-line-graph__corner--top-left\" />\r\n      <div className=\"snake-line-graph__corner snake-line-graph__corner--top-right\" />\r\n      \r\n      <div className=\"snake-line-graph__container\">\r\n        {title && (\r\n          <div className=\"snake-line-graph__title\">{title}</div>\r\n        )}\r\n        \r\n        <svg\r\n          width={typeof width === 'number' ? width : '100%'}\r\n          height={typeof height === 'number' ? height : '100%'}\r\n          viewBox={`0 0 ${svgWidth} ${svgHeight}`}\r\n          className=\"snake-line-graph__svg\"\r\n          preserveAspectRatio=\"xMidYMid meet\"\r\n        >\r\n          <defs>\r\n            {/* Gradient definitions for fill */}\r\n            {series.map((s, i) => {\r\n              const color = s.color || defaultColors[i % defaultColors.length];\r\n              return (\r\n                <linearGradient key={`gradient-${i}`} id={`line-gradient-${i}`} x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\r\n                  <stop offset=\"0%\" stopColor={color} stopOpacity={fillOpacity} />\r\n                  <stop offset=\"100%\" stopColor={color} stopOpacity={0} />\r\n                </linearGradient>\r\n              );\r\n            })}\r\n          </defs>\r\n          \r\n          <g transform={`translate(${margin.left}, ${margin.top})`}>\r\n            {/* Grid */}\r\n            {finalShowGrid && (\r\n              <g className=\"snake-line-graph__grid\">\r\n                {xTicks.map((tick, i) => (\r\n                  <line\r\n                    key={`grid-x-${i}`}\r\n                    x1={xScale(tick)}\r\n                    y1={0}\r\n                    x2={xScale(tick)}\r\n                    y2={plotHeight}\r\n                    stroke={gridColor}\r\n                    strokeWidth=\"1\"\r\n                    strokeOpacity=\"0.3\"\r\n                    strokeDasharray=\"2 4\"\r\n                  />\r\n                ))}\r\n                {yTicks.map((tick, i) => (\r\n                  <line\r\n                    key={`grid-y-${i}`}\r\n                    x1={0}\r\n                    y1={yScale(tick)}\r\n                    x2={plotWidth}\r\n                    y2={yScale(tick)}\r\n                    stroke={gridColor}\r\n                    strokeWidth=\"1\"\r\n                    strokeOpacity=\"0.3\"\r\n                    strokeDasharray=\"2 4\"\r\n                  />\r\n                ))}\r\n              </g>\r\n            )}\r\n\r\n            {/* Lines and areas */}\r\n            <g className=\"snake-line-graph__lines\">\r\n              {series.map((s, i) => {\r\n                const color = s.color || defaultColors[i % defaultColors.length];\r\n                const isActive = activeSeries === s.name;\r\n                const isDimmed = isInteractive && activeSeries && !isActive;\r\n                \r\n                return (\r\n                  <g \r\n                    key={`series-${i}`}\r\n                    className={`snake-line-graph__series ${isActive ? 'snake-line-graph__series--active' : ''}`}\r\n                    style={{\r\n                      opacity: isDimmed ? 0.3 : 1,\r\n                    }}\r\n                  >\r\n                    {/* Fill area */}\r\n                    {fill && (\r\n                      <path\r\n                        d={generateFillPath(s.data)}\r\n                        fill={`url(#line-gradient-${i})`}\r\n                        className=\"snake-line-graph__area\"\r\n                      />\r\n                    )}\r\n                    \r\n                    {/* Line */}\r\n                    <path\r\n                      d={generatePath(s.data)}\r\n                      fill=\"none\"\r\n                      stroke={color}\r\n                      strokeWidth={isActive ? finalStrokeWidth + 1 : finalStrokeWidth}\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                      className=\"snake-line-graph__line\"\r\n                      onClick={() => {\r\n                        if (isInteractive) {\r\n                          setActiveSeries(isActive ? null : s.name);\r\n                        }\r\n                      }}\r\n                      style={{\r\n                        cursor: isInteractive ? 'pointer' : 'default',\r\n                      }}\r\n                    />\r\n                    \r\n                    {/* Points */}\r\n                    {finalShowPoints && s.data.map((point, j) => (\r\n                      <circle\r\n                        key={`point-${j}`}\r\n                        cx={xScale(point.x)}\r\n                        cy={yScale(point.y)}\r\n                        r={isActive ? pointRadius + 1 : pointRadius}\r\n                        fill={color}\r\n                        stroke=\"#0b0b0d\"\r\n                        strokeWidth=\"1\"\r\n                        className=\"snake-line-graph__point\"\r\n                        onClick={() => {\r\n                          if (isInteractive) {\r\n                            onPointClick?.(point, s.name);\r\n                          }\r\n                        }}\r\n                        onMouseEnter={() => {\r\n                          if (finalShowValues) {\r\n                            setHoveredPoint({\r\n                              x: xScale(point.x),\r\n                              y: yScale(point.y),\r\n                              value: point,\r\n                              series: s.name,\r\n                            });\r\n                          }\r\n                        }}\r\n                        onMouseLeave={() => setHoveredPoint(null)}\r\n                        style={{\r\n                          cursor: isInteractive ? 'pointer' : 'default',\r\n                        }}\r\n                      />\r\n                    ))}\r\n                  </g>\r\n                );\r\n              })}\r\n            </g>\r\n\r\n            {/* Hover tooltip */}\r\n            {finalShowValues && hoveredPoint && (\r\n              <g className=\"snake-line-graph__tooltip\">\r\n                <rect\r\n                  x={hoveredPoint.x - 40}\r\n                  y={hoveredPoint.y - 30}\r\n                  width=\"80\"\r\n                  height=\"25\"\r\n                  fill=\"#101010\"\r\n                  stroke=\"#3a3a3a\"\r\n                  strokeWidth=\"1\"\r\n                />\r\n                <text\r\n                  x={hoveredPoint.x}\r\n                  y={hoveredPoint.y - 15}\r\n                  textAnchor=\"middle\"\r\n                  dominantBaseline=\"middle\"\r\n                  fill=\"#bdbdbd\"\r\n                  fontSize=\"10\"\r\n                  fontFamily=\"var(--font-family-mono)\"\r\n                >\r\n                  {`${formatX(hoveredPoint.value.x)}, ${formatY(hoveredPoint.value.y)}`}\r\n                </text>\r\n              </g>\r\n            )}\r\n\r\n            {/* Axes */}\r\n            {finalShowAxes && (\r\n              <g className=\"snake-line-graph__axes\">\r\n                {/* X-axis */}\r\n                <line\r\n                  x1={0}\r\n                  y1={plotHeight}\r\n                  x2={plotWidth}\r\n                  y2={plotHeight}\r\n                  stroke={axisColor}\r\n                  strokeWidth=\"2\"\r\n                />\r\n                {xTicks.map((tick, i) => (\r\n                  <g key={`x-tick-${i}`}>\r\n                    <line\r\n                      x1={xScale(tick)}\r\n                      y1={plotHeight}\r\n                      x2={xScale(tick)}\r\n                      y2={plotHeight + 5}\r\n                      stroke={axisColor}\r\n                      strokeWidth=\"1\"\r\n                    />\r\n                    <text\r\n                      x={xScale(tick)}\r\n                      y={plotHeight + 20}\r\n                      textAnchor=\"middle\"\r\n                      fill=\"#8a8a8a\"\r\n                      fontSize=\"10\"\r\n                      fontFamily=\"var(--font-family-mono)\"\r\n                    >\r\n                      {formatX(tick)}\r\n                    </text>\r\n                  </g>\r\n                ))}\r\n                \r\n                {/* Y-axis */}\r\n                <line\r\n                  x1={0}\r\n                  y1={0}\r\n                  x2={0}\r\n                  y2={plotHeight}\r\n                  stroke={axisColor}\r\n                  strokeWidth=\"2\"\r\n                />\r\n                {yTicks.map((tick, i) => (\r\n                  <g key={`y-tick-${i}`}>\r\n                    <line\r\n                      x1={0}\r\n                      y1={yScale(tick)}\r\n                      x2={-5}\r\n                      y2={yScale(tick)}\r\n                      stroke={axisColor}\r\n                      strokeWidth=\"1\"\r\n                    />\r\n                    <text\r\n                      x={-10}\r\n                      y={yScale(tick)}\r\n                      textAnchor=\"end\"\r\n                      dominantBaseline=\"middle\"\r\n                      fill=\"#8a8a8a\"\r\n                      fontSize=\"10\"\r\n                      fontFamily=\"var(--font-family-mono)\"\r\n                    >\r\n                      {formatY(tick)}\r\n                    </text>\r\n                  </g>\r\n                ))}\r\n              </g>\r\n            )}\r\n\r\n            {/* Axis labels */}\r\n            {finalShowAxes && (\r\n              <>\r\n                {xLabel && (\r\n                  <text\r\n                    x={plotWidth / 2}\r\n                    y={plotHeight + 50}\r\n                    textAnchor=\"middle\"\r\n                    fill=\"#bdbdbd\"\r\n                    fontSize=\"12\"\r\n                    fontFamily=\"var(--font-family)\"\r\n                    className=\"snake-line-graph__axis-label\"\r\n                  >\r\n                    {xLabel}\r\n                  </text>\r\n                )}\r\n                {yLabel && (\r\n                  <text\r\n                    x={-plotHeight / 2}\r\n                    y={-50}\r\n                    textAnchor=\"middle\"\r\n                    fill=\"#bdbdbd\"\r\n                    fontSize=\"12\"\r\n                    fontFamily=\"var(--font-family)\"\r\n                    transform=\"rotate(-90)\"\r\n                    className=\"snake-line-graph__axis-label\"\r\n                  >\r\n                    {yLabel}\r\n                  </text>\r\n                )}\r\n              </>\r\n            )}\r\n          </g>\r\n        </svg>\r\n\r\n        {/* Legend */}\r\n        {finalShowLegend && series.length > 1 && (\r\n          <div className={`snake-line-graph__legend ${animateLegend ? 'snake-line-graph__legend--animated' : ''}`}>\r\n            {series.map((s, i) => {\r\n              const color = s.color || defaultColors[i % defaultColors.length];\r\n              const isActive = activeSeries === s.name;\r\n              \r\n              return (\r\n                <div\r\n                  key={`legend-${i}`}\r\n                  className={`snake-line-graph__legend-item ${isActive ? 'snake-line-graph__legend-item--active' : ''}`}\r\n                  onClick={() => {\r\n                    if (isInteractive) {\r\n                      setActiveSeries(isActive ? null : s.name);\r\n                    }\r\n                  }}\r\n                  style={{\r\n                    cursor: isInteractive ? 'pointer' : 'default',\r\n                  }}\r\n                >\r\n                  <div\r\n                    className=\"snake-line-graph__legend-color\"\r\n                    style={{ backgroundColor: color }}\r\n                  />\r\n                  <span className=\"snake-line-graph__legend-label\">{s.name}</span>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"snake-line-graph__corner snake-line-graph__corner--bottom-left\" />\r\n      <div className=\"snake-line-graph__corner snake-line-graph__corner--bottom-right\" />\r\n    </div>\r\n  );\r\n};","import React from 'react';\r\nimport './link.css';\r\n\r\nexport interface LinkProps extends React.AnchorHTMLAttributes<HTMLAnchorElement> {\r\n  /** Link variant */\r\n  variant?: 'default' | 'primary' | 'subtle' | 'underline';\r\n  /** Size variant */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** External link indicator */\r\n  external?: boolean;\r\n  /** Disabled state */\r\n  disabled?: boolean;\r\n  /** Show icon before text */\r\n  startIcon?: React.ReactNode;\r\n  /** Show icon after text */\r\n  endIcon?: React.ReactNode;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n  /** Children content */\r\n  children: React.ReactNode;\r\n}\r\n\r\n/** Link component for navigation */\r\nexport const Link: React.FC<LinkProps> = ({\r\n  variant = 'default',\r\n  size = 'medium',\r\n  external = false,\r\n  disabled = false,\r\n  startIcon,\r\n  endIcon,\r\n  className = '',\r\n  children,\r\n  href,\r\n  target,\r\n  rel,\r\n  ...props\r\n}) => {\r\n  const linkClasses = [\r\n    'snake-link',\r\n    `snake-link--${variant}`,\r\n    `snake-link--${size}`,\r\n    disabled && 'snake-link--disabled',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  // Ensure security for external links\r\n  const linkTarget = external ? '_blank' : target;\r\n  const linkRel = external ? `${rel || ''} noopener noreferrer`.trim() : rel;\r\n\r\n  const handleClick = (e: React.MouseEvent<HTMLAnchorElement>) => {\r\n    if (disabled) {\r\n      e.preventDefault();\r\n      return;\r\n    }\r\n    props.onClick?.(e);\r\n  };\r\n\r\n  return (\r\n    <a\r\n      className={linkClasses}\r\n      href={disabled ? undefined : href}\r\n      target={linkTarget}\r\n      rel={linkRel}\r\n      onClick={handleClick}\r\n      aria-disabled={disabled}\r\n      {...props}\r\n    >\r\n      {startIcon && <span className=\"snake-link__icon snake-link__icon--start\">{startIcon}</span>}\r\n      <span className=\"snake-link__text\">{children}</span>\r\n      {endIcon && <span className=\"snake-link__icon snake-link__icon--end\">{endIcon}</span>}\r\n      {external && !endIcon && <span className=\"snake-link__external\">↗</span>}\r\n    </a>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport './list.css';\r\n\r\ninterface ListItem {\r\n  /** The text content of the list item */\r\n  content: React.ReactNode;\r\n  /** Optional subitems */\r\n  subitems?: ListItem[];\r\n  /** Click handler for interactive items */\r\n  onClick?: () => void;\r\n}\r\n\r\nexport interface ListProps {\r\n  /** Array of list items */\r\n  items: ListItem[];\r\n  /** Starting number for the list */\r\n  startNumber?: number;\r\n  /** Number of digits to pad numbers with zeros */\r\n  numberPadding?: number;\r\n  /** Custom number format function */\r\n  formatNumber?: (num: number) => string;\r\n  /** Color for subitem arrows */\r\n  arrowColor?: string;\r\n  /** Show numbers */\r\n  showNumbers?: boolean;\r\n  /** List type */\r\n  type?: 'ordered' | 'unordered';\r\n  /** Size variant */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** Display text in uppercase */\r\n  uppercase?: boolean;\r\n  /** Make top-level items interactive */\r\n  interactive?: boolean;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n}\r\n\r\n/** List component with customizable numbering and styling */\r\nexport const List: React.FC<ListProps> = ({\r\n  items,\r\n  startNumber = 1,\r\n  numberPadding = 3,\r\n  formatNumber,\r\n  arrowColor = 'var(--color-text-primary)',\r\n  showNumbers = true,\r\n  type = 'ordered',\r\n  size = 'medium',\r\n  uppercase = true,\r\n  interactive = false,\r\n  className = '',\r\n}) => {\r\n  const defaultFormatNumber = (num: number) => {\r\n    return num.toString().padStart(numberPadding, '0');\r\n  };\r\n\r\n  const getFormattedNumber = formatNumber || defaultFormatNumber;\r\n\r\n  const renderListItem = (item: ListItem, index: number, parentNumber?: string) => {\r\n    const currentNumber = parentNumber\r\n      ? `${parentNumber}.${getFormattedNumber(index + 1)}`\r\n      : getFormattedNumber(startNumber + index);\r\n\r\n    const isInteractive = interactive && !parentNumber && item.onClick;\r\n\r\n    return (\r\n      <li\r\n        key={index}\r\n        className={`snake-list__item ${isInteractive ? 'snake-list__item--interactive' : ''}`}\r\n      >\r\n        <div\r\n          className=\"snake-list__content\"\r\n          onClick={isInteractive ? item.onClick : undefined}\r\n          role={isInteractive ? 'button' : undefined}\r\n          tabIndex={isInteractive ? 0 : undefined}\r\n          onKeyDown={\r\n            isInteractive\r\n              ? (e) => {\r\n                if (e.key === 'Enter' || e.key === ' ') {\r\n                  e.preventDefault();\r\n                  item.onClick?.();\r\n                }\r\n              }\r\n              : undefined\r\n          }\r\n        >\r\n          <span className=\"snake-list__bullet\">\r\n            <span className=\"snake-list__square\" />\r\n          </span>\r\n          {showNumbers && <span className=\"snake-list__number\">{currentNumber}</span>}\r\n          <span className=\"snake-list__text\">{item.content}</span>\r\n        </div>\r\n        {item.subitems && item.subitems.length > 0 && (\r\n          <ul className=\"snake-list__subitems\">\r\n            {item.subitems.map((subitem, subIndex) => (\r\n              <li key={subIndex} className=\"snake-list__subitem\">\r\n                <div className=\"snake-list__content\">\r\n                  <span className=\"snake-list__arrow\" style={{ color: arrowColor }}>\r\n                    ▶\r\n                  </span>\r\n                  {showNumbers && (\r\n                    <span className=\"snake-list__number\">\r\n                      {currentNumber}.{getFormattedNumber(subIndex + 1)}\r\n                    </span>\r\n                  )}\r\n                  <span className=\"snake-list__text\">{subitem.content}</span>\r\n                </div>\r\n                {subitem.subitems && subitem.subitems.length > 0 && (\r\n                  <ul className=\"snake-list__subitems\">\r\n                    {subitem.subitems.map((subSubitem, subSubIndex) => (\r\n                      <li\r\n                        key={subSubIndex}\r\n                        className=\"snake-list__subitem snake-list__subitem--nested\"\r\n                      >\r\n                        <div className=\"snake-list__content\">\r\n                          <span\r\n                            className=\"snake-list__arrow\"\r\n                            style={{ color: arrowColor, opacity: 0.7 }}\r\n                          >\r\n                            ▶\r\n                          </span>\r\n                          {showNumbers && (\r\n                            <span className=\"snake-list__number\">\r\n                              {currentNumber}.{getFormattedNumber(subIndex + 1)}.\r\n                              {getFormattedNumber(subSubIndex + 1)}\r\n                            </span>\r\n                          )}\r\n                          <span className=\"snake-list__text\">{subSubitem.content}</span>\r\n                        </div>\r\n                      </li>\r\n                    ))}\r\n                  </ul>\r\n                )}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        )}\r\n      </li>\r\n    );\r\n  };\r\n\r\n  const listClasses = [\r\n    'snake-list',\r\n    `snake-list--${type}`,\r\n    `snake-list--${size}`,\r\n    !showNumbers && 'snake-list--no-numbers',\r\n    uppercase && 'snake-list--uppercase',\r\n    interactive && 'snake-list--interactive',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  return <ul className={listClasses}>{items.map((item, index) => renderListItem(item, index))}</ul>;\r\n};\r\n","import React from 'react';\r\nimport './loading.css';\r\n\r\nexport interface LoadingProps {\r\n  /** Loading type */\r\n  type?: 'dots' | 'bars' | 'pulse' | 'grid';\r\n  /** Size variant */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** Color variant */\r\n  variant?: 'default' | 'primary' | 'success' | 'warning' | 'danger' | 'info';\r\n  /** Show text label */\r\n  text?: string;\r\n  /** Full screen overlay */\r\n  fullscreen?: boolean;\r\n  /** Backdrop for inline loading */\r\n  backdrop?: boolean;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n}\r\n\r\n/** Loading component for indicating loading states */\r\nexport const Loading: React.FC<LoadingProps> = ({\r\n  type = 'grid',\r\n  size = 'medium',\r\n  variant = 'default',\r\n  text,\r\n  fullscreen = false,\r\n  backdrop = false,\r\n  className = '',\r\n}) => {\r\n  const loadingClasses = [\r\n    'snake-loading',\r\n    `snake-loading--${type}`,\r\n    `snake-loading--${size}`,\r\n    `snake-loading--${variant}`,\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const renderLoader = () => {\r\n    switch (type) {\r\n      case 'dots':\r\n        return (\r\n          <div className=\"snake-loading__dots\">\r\n            <span className=\"snake-loading__dot\" />\r\n            <span className=\"snake-loading__dot\" />\r\n            <span className=\"snake-loading__dot\" />\r\n          </div>\r\n        );\r\n\r\n      case 'bars':\r\n        return (\r\n          <div className=\"snake-loading__bars\">\r\n            <span className=\"snake-loading__bar\" />\r\n            <span className=\"snake-loading__bar\" />\r\n            <span className=\"snake-loading__bar\" />\r\n            <span className=\"snake-loading__bar\" />\r\n          </div>\r\n        );\r\n\r\n      case 'pulse':\r\n        return (\r\n          <div className=\"snake-loading__pulse\">\r\n            <span className=\"snake-loading__pulse-ring\" />\r\n            <span className=\"snake-loading__pulse-ring\" />\r\n          </div>\r\n        );\r\n\r\n      case 'grid':\r\n        return (\r\n          <div className=\"snake-loading__grid\">\r\n            {[...Array(9)].map((_, i) => (\r\n              <span key={i} className=\"snake-loading__grid-cell\" />\r\n            ))}\r\n          </div>\r\n        );\r\n\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  const content = (\r\n    <div className={loadingClasses}>\r\n      <div className=\"snake-loading__content\">\r\n        {renderLoader()}\r\n        {text && <div className=\"snake-loading__text\">{text}</div>}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  if (fullscreen) {\r\n    return <div className=\"snake-loading__fullscreen\">{content}</div>;\r\n  }\r\n\r\n  if (backdrop) {\r\n    return <div className=\"snake-loading__backdrop\">{content}</div>;\r\n  }\r\n\r\n  return content;\r\n};\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport './menu.css';\r\n\r\ninterface MenuItem {\r\n  id: string;\r\n  label: string;\r\n  icon?: React.ReactNode;\r\n  shortcut?: string;\r\n  disabled?: boolean;\r\n  danger?: boolean;\r\n  divider?: boolean;\r\n  submenu?: MenuItem[];\r\n}\r\n\r\nexport interface MenuProps {\r\n  /** Menu items */\r\n  items: MenuItem[];\r\n  /** Trigger element */\r\n  trigger?: React.ReactNode;\r\n  /** Open state (controlled mode) */\r\n  isOpen?: boolean;\r\n  /** Open state change handler */\r\n  onOpenChange?: (open: boolean) => void;\r\n  /** Menu placement */\r\n  placement?:\r\n    | 'bottom-start'\r\n    | 'bottom-end'\r\n    | 'top-start'\r\n    | 'top-end'\r\n    | 'right-start'\r\n    | 'left-start';\r\n  /** Menu size */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** Click handler */\r\n  onItemClick?: (itemId: string) => void;\r\n  /** Show arrow */\r\n  showArrow?: boolean;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n}\r\n\r\n/** Menu component for dropdown navigation */\r\nexport const Menu: React.FC<MenuProps> = ({\r\n  items,\r\n  trigger,\r\n  isOpen: controlledIsOpen,\r\n  onOpenChange,\r\n  placement = 'bottom-start',\r\n  size = 'medium',\r\n  onItemClick,\r\n  showArrow = false,\r\n  className = '',\r\n}) => {\r\n  const [internalIsOpen, setInternalIsOpen] = useState(false);\r\n  const [activeSubmenu, setActiveSubmenu] = useState<string | null>(null);\r\n  const menuRef = useRef<HTMLDivElement>(null);\r\n  const triggerRef = useRef<HTMLDivElement>(null);\r\n\r\n  const isOpen = controlledIsOpen !== undefined ? controlledIsOpen : internalIsOpen;\r\n  const setIsOpen = (open: boolean) => {\r\n    if (controlledIsOpen === undefined) {\r\n      setInternalIsOpen(open);\r\n    }\r\n    onOpenChange?.(open);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (\r\n        menuRef.current &&\r\n        !menuRef.current.contains(event.target as Node) &&\r\n        triggerRef.current &&\r\n        !triggerRef.current.contains(event.target as Node)\r\n      ) {\r\n        setIsOpen(false);\r\n        setActiveSubmenu(null);\r\n      }\r\n    };\r\n\r\n    const handleEscape = (event: KeyboardEvent) => {\r\n      if (event.key === 'Escape') {\r\n        setIsOpen(false);\r\n        setActiveSubmenu(null);\r\n      }\r\n    };\r\n\r\n    if (isOpen) {\r\n      document.addEventListener('mousedown', handleClickOutside);\r\n      document.addEventListener('keydown', handleEscape);\r\n      return () => {\r\n        document.removeEventListener('mousedown', handleClickOutside);\r\n        document.removeEventListener('keydown', handleEscape);\r\n      };\r\n    }\r\n  }, [isOpen]);\r\n\r\n  const handleTriggerClick = () => {\r\n    setIsOpen(!isOpen);\r\n    if (!isOpen) {\r\n      setActiveSubmenu(null);\r\n    }\r\n  };\r\n\r\n  const handleItemClick = (item: MenuItem) => {\r\n    if (item.disabled || item.divider) return;\r\n\r\n    if (item.submenu) {\r\n      setActiveSubmenu(activeSubmenu === item.id ? null : item.id);\r\n    } else {\r\n      onItemClick?.(item.id);\r\n      setIsOpen(false);\r\n      setActiveSubmenu(null);\r\n    }\r\n  };\r\n\r\n  const renderMenuItem = (item: MenuItem, isSubmenuItem = false) => {\r\n    if (item.divider) {\r\n      return <div key={item.id} className=\"snake-menu__divider\" />;\r\n    }\r\n\r\n    const itemClasses = [\r\n      'snake-menu__item',\r\n      item.disabled && 'snake-menu__item--disabled',\r\n      item.danger && 'snake-menu__item--danger',\r\n      item.submenu && 'snake-menu__item--has-submenu',\r\n      activeSubmenu === item.id && 'snake-menu__item--submenu-open',\r\n    ]\r\n      .filter(Boolean)\r\n      .join(' ');\r\n\r\n    return (\r\n      <div key={item.id} className=\"snake-menu__item-wrapper\">\r\n        <button\r\n          className={itemClasses}\r\n          onClick={() => handleItemClick(item)}\r\n          disabled={item.disabled}\r\n        >\r\n          {item.icon && <span className=\"snake-menu__item-icon\">{item.icon}</span>}\r\n          <span className=\"snake-menu__item-label\">{item.label}</span>\r\n          {item.shortcut && <span className=\"snake-menu__item-shortcut\">{item.shortcut}</span>}\r\n          {item.submenu && <span className=\"snake-menu__item-arrow\">▶</span>}\r\n        </button>\r\n\r\n        {item.submenu && activeSubmenu === item.id && (\r\n          <div\r\n            className={`snake-menu__submenu snake-menu__submenu--${isSubmenuItem ? 'nested' : 'root'}`}\r\n          >\r\n            {item.submenu.map((subItem) => renderMenuItem(subItem, true))}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const menuClasses = [\r\n    'snake-menu',\r\n    `snake-menu--${size}`,\r\n    `snake-menu--${placement}`,\r\n    isOpen && 'snake-menu--open',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  return (\r\n    <div className=\"snake-menu__container\">\r\n      {trigger && (\r\n        <div ref={triggerRef} className=\"snake-menu__trigger\" onClick={handleTriggerClick}>\r\n          {trigger}\r\n        </div>\r\n      )}\r\n\r\n      {isOpen && (\r\n        <div ref={menuRef} className={menuClasses} role=\"menu\">\r\n          {showArrow && <div className=\"snake-menu__arrow\" />}\r\n          <div className=\"snake-menu__content\">{items.map((item) => renderMenuItem(item))}</div>\r\n          <div className=\"snake-menu__corner snake-menu__corner--top-left\" />\r\n          <div className=\"snake-menu__corner snake-menu__corner--top-right\" />\r\n          <div className=\"snake-menu__corner snake-menu__corner--bottom-left\" />\r\n          <div className=\"snake-menu__corner snake-menu__corner--bottom-right\" />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useRef, useState, useEffect } from 'react';\r\nimport './pininput.css';\r\n\r\nexport interface PinInputProps {\r\n  /** Number of input fields */\r\n  length?: number;\r\n  /** Callback when all fields are filled */\r\n  onComplete?: (value: string) => void;\r\n  /** Callback when value changes */\r\n  onChange?: (value: string) => void;\r\n  /** Type of input */\r\n  type?: 'numeric' | 'alphanumeric';\r\n  /** Whether to mask the input */\r\n  masked?: boolean;\r\n  /** Size variant */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** Whether the input is disabled */\r\n  disabled?: boolean;\r\n  /** Error state */\r\n  error?: boolean;\r\n  /** Success state */\r\n  success?: boolean;\r\n  /** Auto focus first input */\r\n  autoFocus?: boolean;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n  /** Placeholder for each input */\r\n  placeholder?: string;\r\n  /** Initial value */\r\n  value?: string;\r\n}\r\n\r\n/** Pin Input component for OTP, verification codes, etc. */\r\nexport const PinInput: React.FC<PinInputProps> = ({\r\n  length = 4,\r\n  onComplete,\r\n  onChange,\r\n  type = 'numeric',\r\n  masked = false,\r\n  size = 'medium',\r\n  disabled = false,\r\n  error = false,\r\n  success = false,\r\n  autoFocus = false,\r\n  className = '',\r\n  placeholder = '○',\r\n  value = '',\r\n}) => {\r\n  const [values, setValues] = useState<string[]>(() => {\r\n    const initial = value.split('').slice(0, length);\r\n    return Array(length).fill('').map((_, i) => initial[i] || '');\r\n  });\r\n  \r\n  const inputRefs = useRef<(HTMLInputElement | null)[]>([]);\r\n\r\n  useEffect(() => {\r\n    if (value !== undefined) {\r\n      const newValues = value.split('').slice(0, length);\r\n      setValues(Array(length).fill('').map((_, i) => newValues[i] || ''));\r\n    }\r\n  }, [value, length]);\r\n\r\n  useEffect(() => {\r\n    const combined = values.join('');\r\n    onChange?.(combined);\r\n    \r\n    if (combined.length === length && values.every(v => v !== '')) {\r\n      onComplete?.(combined);\r\n    }\r\n  }, [values, length, onChange, onComplete]);\r\n\r\n  const handleChange = (index: number, value: string) => {\r\n    if (disabled) return;\r\n\r\n    // Handle paste\r\n    if (value.length > 1) {\r\n      const pastedValues = value.split('').slice(0, length);\r\n      const newValues = [...values];\r\n      \r\n      pastedValues.forEach((char, i) => {\r\n        if (index + i < length) {\r\n          if (type === 'numeric' && !/^\\d$/.test(char)) return;\r\n          if (type === 'alphanumeric' && !/^[a-zA-Z0-9]$/.test(char)) return;\r\n          newValues[index + i] = char;\r\n        }\r\n      });\r\n      \r\n      setValues(newValues);\r\n      \r\n      // Focus last filled input or next empty one\r\n      const lastFilledIndex = newValues.findLastIndex(v => v !== '');\r\n      const nextIndex = Math.min(lastFilledIndex + 1, length - 1);\r\n      inputRefs.current[nextIndex]?.focus();\r\n      return;\r\n    }\r\n\r\n    // Validate input\r\n    if (value !== '') {\r\n      if (type === 'numeric' && !/^\\d$/.test(value)) return;\r\n      if (type === 'alphanumeric' && !/^[a-zA-Z0-9]$/.test(value)) return;\r\n    }\r\n\r\n    const newValues = [...values];\r\n    newValues[index] = value;\r\n    setValues(newValues);\r\n\r\n    // Auto-focus next input\r\n    if (value !== '' && index < length - 1) {\r\n      inputRefs.current[index + 1]?.focus();\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = (index: number, e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (disabled) return;\r\n\r\n    // Handle backspace\r\n    if (e.key === 'Backspace') {\r\n      if (values[index] === '' && index > 0) {\r\n        // If current field is empty, go to previous field\r\n        inputRefs.current[index - 1]?.focus();\r\n      } else {\r\n        // Clear current field\r\n        const newValues = [...values];\r\n        newValues[index] = '';\r\n        setValues(newValues);\r\n      }\r\n    }\r\n\r\n    // Handle arrow keys\r\n    if (e.key === 'ArrowLeft' && index > 0) {\r\n      inputRefs.current[index - 1]?.focus();\r\n    }\r\n    if (e.key === 'ArrowRight' && index < length - 1) {\r\n      inputRefs.current[index + 1]?.focus();\r\n    }\r\n\r\n    // Handle delete\r\n    if (e.key === 'Delete') {\r\n      const newValues = [...values];\r\n      newValues[index] = '';\r\n      setValues(newValues);\r\n    }\r\n  };\r\n\r\n  const handleFocus = (index: number) => {\r\n    inputRefs.current[index]?.select();\r\n  };\r\n\r\n  const handlePaste = (e: React.ClipboardEvent) => {\r\n    e.preventDefault();\r\n    const pastedData = e.clipboardData.getData('text');\r\n    const firstEmptyIndex = values.findIndex(v => v === '');\r\n    const startIndex = firstEmptyIndex === -1 ? 0 : firstEmptyIndex;\r\n    handleChange(startIndex, pastedData);\r\n  };\r\n\r\n  const classes = [\r\n    'snake-pin-input',\r\n    `snake-pin-input--${size}`,\r\n    error && 'snake-pin-input--error',\r\n    success && 'snake-pin-input--success',\r\n    disabled && 'snake-pin-input--disabled',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  return (\r\n    <div className={classes}>\r\n      {Array(length)\r\n        .fill(0)\r\n        .map((_, index) => (\r\n          <input\r\n            key={index}\r\n            ref={(el) => (inputRefs.current[index] = el)}\r\n            type={masked ? 'password' : 'text'}\r\n            inputMode={type === 'numeric' ? 'numeric' : 'text'}\r\n            className={[\r\n              'snake-pin-input__field',\r\n              values[index] && 'snake-pin-input__field--filled',\r\n            ]\r\n              .filter(Boolean)\r\n              .join(' ')}\r\n            value={masked && values[index] ? '●' : values[index]}\r\n            onChange={(e) => handleChange(index, e.target.value)}\r\n            onKeyDown={(e) => handleKeyDown(index, e)}\r\n            onFocus={() => handleFocus(index)}\r\n            onPaste={handlePaste}\r\n            disabled={disabled}\r\n            maxLength={1}\r\n            autoFocus={autoFocus && index === 0}\r\n            placeholder={placeholder}\r\n            aria-label={`Pin input ${index + 1} of ${length}`}\r\n          />\r\n        ))}\r\n    </div>\r\n  );\r\n};","import React from 'react';\r\nimport './progress.css';\r\n\r\nexport interface ProgressProps {\r\n  /** Current progress value (0-100) */\r\n  value?: number;\r\n  /** Maximum value */\r\n  max?: number;\r\n  /** Size variant */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** Color variant */\r\n  variant?: 'default' | 'primary' | 'success' | 'warning' | 'danger' | 'info' | 'cyber';\r\n  /** Show percentage label */\r\n  showLabel?: boolean;\r\n  /** Label position */\r\n  labelPosition?: 'outside' | 'top' | 'bottom';\r\n  /** Progress type */\r\n  type?: 'linear' | 'striped' | 'animated' | 'segmented';\r\n  /** Number of segments for segmented type */\r\n  segments?: number;\r\n  /** Custom label text */\r\n  label?: string;\r\n  /** Format value function */\r\n  formatValue?: (value: number, max: number) => string;\r\n  /** Indeterminate state */\r\n  indeterminate?: boolean;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n  /** ARIA label */\r\n  ariaLabel?: string;\r\n}\r\n\r\n/** Progress component for displaying progress indicators */\r\nexport const Progress: React.FC<ProgressProps> = ({\r\n  value = 0,\r\n  max = 100,\r\n  size = 'medium',\r\n  variant = 'default',\r\n  showLabel = false,\r\n  labelPosition = 'bottom',\r\n  type = 'linear',\r\n  segments = 10,\r\n  label,\r\n  formatValue = (val, max) => `${Math.round((val / max) * 100)}%`,\r\n  indeterminate = false,\r\n  className = '',\r\n  ariaLabel,\r\n}) => {\r\n  const percentage = Math.min(100, Math.max(0, (value / max) * 100));\r\n\r\n  const progressClasses = [\r\n    'snake-progress',\r\n    `snake-progress--${size}`,\r\n    `snake-progress--${variant}`,\r\n    `snake-progress--${type}`,\r\n    indeterminate && 'snake-progress--indeterminate',\r\n    showLabel && `snake-progress--label-${labelPosition}`,\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const renderSegments = () => {\r\n    if (type !== 'segmented') return null;\r\n\r\n    const segmentElements = [];\r\n    const filledSegments = Math.floor((percentage / 100) * segments);\r\n\r\n    for (let i = 0; i < segments; i++) {\r\n      segmentElements.push(\r\n        <div\r\n          key={i}\r\n          className={`snake-progress__segment ${i < filledSegments ? 'snake-progress__segment--filled' : ''}`}\r\n        />,\r\n      );\r\n    }\r\n\r\n    return segmentElements;\r\n  };\r\n\r\n  const renderProgressBar = () => {\r\n    if (type === 'segmented') {\r\n      return <div className=\"snake-progress__segments\">{renderSegments()}</div>;\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <div\r\n          className=\"snake-progress__fill\"\r\n          style={!indeterminate ? { width: `${percentage}%` } : undefined}\r\n        />\r\n        {type === 'striped' && <div className=\"snake-progress__stripes\" />}\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className={progressClasses}>\r\n      {showLabel && labelPosition === 'top' && (\r\n        <div className=\"snake-progress__label snake-progress__label--top\">\r\n          {label || formatValue(value, max)}\r\n        </div>\r\n      )}\r\n\r\n      <div\r\n        className=\"snake-progress__container\"\r\n        role=\"progressbar\"\r\n        aria-valuenow={!indeterminate ? value : undefined}\r\n        aria-valuemin={0}\r\n        aria-valuemax={max}\r\n        aria-label={ariaLabel || 'Progress'}\r\n      >\r\n        <div className=\"snake-progress__track\">{renderProgressBar()}</div>\r\n\r\n        {showLabel && labelPosition === 'outside' && (\r\n          <span className=\"snake-progress__label snake-progress__label--outside\">\r\n            {label || formatValue(value, max)}\r\n          </span>\r\n        )}\r\n\r\n        <div className=\"snake-progress__corner snake-progress__corner--top-left\" />\r\n        <div className=\"snake-progress__corner snake-progress__corner--top-right\" />\r\n        <div className=\"snake-progress__corner snake-progress__corner--bottom-left\" />\r\n        <div className=\"snake-progress__corner snake-progress__corner--bottom-right\" />\r\n      </div>\r\n\r\n      {showLabel && labelPosition === 'bottom' && (\r\n        <div className=\"snake-progress__label snake-progress__label--bottom\">\r\n          {label || formatValue(value, max)}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport './radiobutton.css';\r\n\r\ninterface RadioOption {\r\n  value: string;\r\n  label: string;\r\n  disabled?: boolean;\r\n  helperText?: string;\r\n}\r\n\r\nexport interface RadioButtonProps {\r\n  /** Radio options */\r\n  options: RadioOption[];\r\n  /** Selected value */\r\n  value?: string;\r\n  /** Change handler */\r\n  onChange?: (value: string) => void;\r\n  /** Group name */\r\n  name: string;\r\n  /** Group label */\r\n  label?: string;\r\n  /** Layout direction */\r\n  direction?: 'horizontal' | 'vertical';\r\n  /** Size variant */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** Visual variant */\r\n  variant?: 'default' | 'success' | 'warning' | 'danger' | 'info';\r\n  /** Error message */\r\n  error?: string;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n}\r\n\r\n/** RadioButton component with dark theme styling */\r\nexport const RadioButton: React.FC<RadioButtonProps> = ({\r\n  options,\r\n  value,\r\n  onChange,\r\n  name,\r\n  label,\r\n  direction = 'vertical',\r\n  size = 'medium',\r\n  variant = 'default',\r\n  error,\r\n  className = '',\r\n}) => {\r\n  const handleChange = (optionValue: string) => {\r\n    onChange?.(optionValue);\r\n  };\r\n\r\n  const groupClasses = [\r\n    'snake-radio-group',\r\n    `snake-radio-group--${direction}`,\r\n    `snake-radio-group--${size}`,\r\n    error && 'snake-radio-group--error',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  return (\r\n    <div\r\n      className={groupClasses}\r\n      role=\"radiogroup\"\r\n      aria-labelledby={label ? `${name}-label` : undefined}\r\n    >\r\n      {label && (\r\n        <div className=\"snake-radio-group__label\" id={`${name}-label`}>\r\n          {label}\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"snake-radio-group__options\">\r\n        {options.map((option) => {\r\n          const isChecked = value === option.value;\r\n          const radioClasses = [\r\n            'snake-radio',\r\n            `snake-radio--${variant}`,\r\n            isChecked && 'snake-radio--checked',\r\n            option.disabled && 'snake-radio--disabled',\r\n          ]\r\n            .filter(Boolean)\r\n            .join(' ');\r\n\r\n          return (\r\n            <label key={option.value} className={radioClasses}>\r\n              <input\r\n                type=\"radio\"\r\n                name={name}\r\n                value={option.value}\r\n                checked={isChecked}\r\n                onChange={() => handleChange(option.value)}\r\n                disabled={option.disabled}\r\n                className=\"snake-radio__input\"\r\n              />\r\n              <span className=\"snake-radio__control\">\r\n                <span className=\"snake-radio__dot\" />\r\n              </span>\r\n              <div className=\"snake-radio__label-container\">\r\n                <span className=\"snake-radio__label\">{option.label}</span>\r\n                {option.helperText && (\r\n                  <span className=\"snake-radio__helper-text\">{option.helperText}</span>\r\n                )}\r\n              </div>\r\n            </label>\r\n          );\r\n        })}\r\n      </div>\r\n\r\n      {error && <span className=\"snake-radio-group__error\">{error}</span>}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useMemo, useState, useEffect, useRef } from 'react';\r\nimport './ridgelinegraph.css';\r\n\r\ninterface DataSeries {\r\n  label: string;\r\n  values: number[];\r\n  color?: string;\r\n}\r\n\r\nexport interface RidgelineGraphProps {\r\n  /** Array of data series */\r\n  data: DataSeries[];\r\n  /** Width of the graph (defaults to 100% to fill parent) */\r\n  width?: number | string;\r\n  /** Height of the graph (defaults to 100% to fill parent) */\r\n  height?: number | string;\r\n  /** Height of each ridge */\r\n  ridgeHeight?: number;\r\n  /** Overlap between ridges (0-1) */\r\n  overlap?: number;\r\n  /** Curve type */\r\n  curve?: 'linear' | 'smooth' | 'step';\r\n  /** Colors for ridges */\r\n  colors?: string[];\r\n  /** Show axes */\r\n  showAxes?: boolean;\r\n  /** Show grid */\r\n  showGrid?: boolean;\r\n  /** Show labels */\r\n  showLabels?: boolean;\r\n  /** Show values on hover */\r\n  showValues?: boolean;\r\n  /** Animation on mount */\r\n  animate?: boolean;\r\n  /** Fill ridges */\r\n  fill?: boolean;\r\n  /** Fill opacity */\r\n  fillOpacity?: number;\r\n  /** Stroke width */\r\n  strokeWidth?: number;\r\n  /** Grid color */\r\n  gridColor?: string;\r\n  /** Size variant */\r\n  variant?: 'default' | 'minimal' | 'detailed' | 'interactive' | 'scrolling';\r\n  /** X-axis labels */\r\n  xLabels?: string[];\r\n  /** X-axis label */\r\n  xLabel?: string;\r\n  /** Y-axis label */\r\n  yLabel?: string;\r\n  /** Title */\r\n  title?: string;\r\n  /** Maximum number of ridges for scrolling variant */\r\n  maxRidges?: number;\r\n  /** Update interval for scrolling variant (ms) */\r\n  scrollInterval?: number;\r\n  /** Generate new data function for scrolling variant */\r\n  generateNewData?: () => DataSeries;\r\n  /** Callback when a ridge is clicked (for interactive variant) */\r\n  onRidgeClick?: (series: DataSeries, index: number) => void;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n}\r\n\r\n/** RidgelineGraph component for overlapping distribution visualization */\r\nexport const RidgelineGraph: React.FC<RidgelineGraphProps> = ({\r\n  data: initialData,\r\n  width = '100%',\r\n  height = '100%',\r\n  ridgeHeight = 60,\r\n  overlap = 0.6,\r\n  curve = 'smooth',\r\n  colors = ['#8b2c2c', '#6b3030', '#4a4a4a', '#7a7a7a', '#5a5a5a'],\r\n  showAxes = true,\r\n  showGrid = false,\r\n  showLabels = true,\r\n  showValues = false,\r\n  animate = true,\r\n  fill = true,\r\n  fillOpacity = 0.7,\r\n  strokeWidth = 2,\r\n  gridColor = '#3a3a3a',\r\n  variant = 'default',\r\n  xLabels,\r\n  xLabel,\r\n  yLabel,\r\n  title,\r\n  maxRidges = 10,\r\n  scrollInterval = 2000,\r\n  generateNewData,\r\n  onRidgeClick,\r\n  className = '',\r\n}) => {\r\n  // State for interactive variant\r\n  const [activeRidge, setActiveRidge] = useState<string | null>(null);\r\n  const [hoveredRidge, setHoveredRidge] = useState<string | null>(null);\r\n  const [hoveredPoint, setHoveredPoint] = useState<{ x: number; y: number; value: number } | null>(null);\r\n  \r\n  // State for scrolling variant\r\n  // Initialize with placeholders if scrolling variant\r\n  const initializeScrollingData = () => {\r\n    if (variant === 'scrolling') {\r\n      const placeholders: DataSeries[] = [];\r\n      for (let i = 0; i < maxRidges; i++) {\r\n        placeholders.push({\r\n          label: `Placeholder ${i}`,\r\n          values: new Array(20).fill(0),\r\n        });\r\n      }\r\n      return placeholders;\r\n    }\r\n    return initialData;\r\n  };\r\n  \r\n  const [scrollingData, setScrollingData] = useState<DataSeries[]>(initializeScrollingData());\r\n  const scrollIntervalRef = useRef<NodeJS.Timeout | null>(null);\r\n  const dataCountRef = useRef(0);\r\n\r\n  // Handle scrolling variant\r\n  useEffect(() => {\r\n    if (variant === 'scrolling' && generateNewData) {\r\n      // Start adding real data immediately\r\n      const addNewData = () => {\r\n        setScrollingData(prevData => {\r\n          const newData = [...prevData];\r\n          const newItem = generateNewData();\r\n          \r\n          // Add real data at the top\r\n          newData.unshift(newItem);\r\n          \r\n          // Always maintain exactly maxRidges items\r\n          if (newData.length > maxRidges) {\r\n            newData.pop();\r\n          }\r\n          \r\n          dataCountRef.current++;\r\n          return newData;\r\n        });\r\n      };\r\n      \r\n      // Add first real data item immediately\r\n      if (dataCountRef.current === 0) {\r\n        addNewData();\r\n      }\r\n      \r\n      // Then continue adding at intervals\r\n      scrollIntervalRef.current = setInterval(addNewData, scrollInterval);\r\n\r\n      return () => {\r\n        if (scrollIntervalRef.current) {\r\n          clearInterval(scrollIntervalRef.current);\r\n        }\r\n      };\r\n    }\r\n  }, [variant, generateNewData, scrollInterval, maxRidges]);\r\n\r\n  const data = variant === 'scrolling' ? scrollingData : initialData;\r\n\r\n  // Fixed SVG dimensions for consistent viewBox\r\n  const svgWidth = 600;\r\n  const svgHeight = 400;\r\n  \r\n  // Margins for axes and labels\r\n  const margin = { top: 40, right: 40, bottom: 80, left: 100 };\r\n  const plotWidth = svgWidth - margin.left - margin.right;\r\n  const plotHeight = svgHeight - margin.top - margin.bottom;\r\n\r\n  // Calculate dimensions\r\n  const effectiveRidgeHeight = ridgeHeight * (1 - overlap);\r\n  const displayRidges = variant === 'scrolling' ? maxRidges : data.length;\r\n  // For scrolling variant, use full plot height; otherwise calculate based on data\r\n  const totalHeight = variant === 'scrolling' \r\n    ? plotHeight - 40 // Leave some space for axis\r\n    : displayRidges * effectiveRidgeHeight + ridgeHeight;\r\n\r\n  // Process data for rendering\r\n  const processedData = useMemo(() => {\r\n    // For scrolling variant, always process exactly maxRidges items\r\n    const dataToProcess = variant === 'scrolling' ? data : data;\r\n    \r\n    // For scrolling, calculate ridge height based on available space\r\n    const scrollingRidgeHeight = variant === 'scrolling' \r\n      ? totalHeight / maxRidges * (1 - overlap * 0.5)\r\n      : ridgeHeight;\r\n    const scrollingEffectiveHeight = variant === 'scrolling'\r\n      ? totalHeight / maxRidges\r\n      : effectiveRidgeHeight;\r\n    \r\n    return dataToProcess.map((series, seriesIndex) => {\r\n      const maxValue = Math.max(...series.values);\r\n      const minValue = Math.min(...series.values);\r\n      const range = maxValue - minValue || 1;\r\n      \r\n      // Check if this is a placeholder (all zeros)\r\n      const isPlaceholder = series.values.every(v => v === 0);\r\n      \r\n      // Normalize values to ridge height\r\n      const normalizedValues = series.values.map(value => \r\n        isPlaceholder ? 0 : ((value - minValue) / range) * scrollingRidgeHeight\r\n      );\r\n      \r\n      // Calculate y offset for this ridge\r\n      const yOffset = seriesIndex * scrollingEffectiveHeight;\r\n      \r\n      // Generate path points\r\n      const points = normalizedValues.map((value, i) => ({\r\n        x: (i / (normalizedValues.length - 1)) * plotWidth,\r\n        y: yOffset + scrollingRidgeHeight - value,\r\n        originalValue: series.values[i],\r\n      }));\r\n      \r\n      return {\r\n        ...series,\r\n        points,\r\n        yOffset,\r\n        color: series.color || colors[seriesIndex % colors.length],\r\n        isPlaceholder,\r\n      };\r\n    });\r\n  }, [data, ridgeHeight, effectiveRidgeHeight, plotWidth, colors, variant, maxRidges, totalHeight, overlap]);\r\n\r\n  // Generate path for ridge\r\n  const generatePath = (points: any[], yOffset: number, closed: boolean = false) => {\r\n    if (points.length === 0) return '';\r\n    \r\n    let path = '';\r\n    \r\n    if (curve === 'smooth') {\r\n      // Cubic bezier curve\r\n      path = points.map((point, i) => {\r\n        if (i === 0) return `M ${point.x} ${point.y}`;\r\n        \r\n        const prev = points[i - 1];\r\n        const cpx1 = prev.x + (point.x - prev.x) / 3;\r\n        const cpy1 = prev.y;\r\n        const cpx2 = prev.x + 2 * (point.x - prev.x) / 3;\r\n        const cpy2 = point.y;\r\n        \r\n        return `C ${cpx1} ${cpy1}, ${cpx2} ${cpy2}, ${point.x} ${point.y}`;\r\n      }).join(' ');\r\n    } else if (curve === 'step') {\r\n      path = points.map((point, i) => {\r\n        if (i === 0) return `M ${point.x} ${point.y}`;\r\n        const prev = points[i - 1];\r\n        return `L ${point.x} ${prev.y} L ${point.x} ${point.y}`;\r\n      }).join(' ');\r\n    } else {\r\n      // Linear\r\n      path = points.map((point, i) => \r\n        `${i === 0 ? 'M' : 'L'} ${point.x} ${point.y}`\r\n      ).join(' ');\r\n    }\r\n    \r\n    if (closed && fill) {\r\n      const lastPoint = points[points.length - 1];\r\n      const firstPoint = points[0];\r\n      const baseY = yOffset + ridgeHeight;\r\n      path += ` L ${lastPoint.x} ${baseY} L ${firstPoint.x} ${baseY} Z`;\r\n    }\r\n    \r\n    return path;\r\n  };\r\n\r\n  const classes = [\r\n    'snake-ridgeline-graph',\r\n    `snake-ridgeline-graph--${variant}`,\r\n    animate && 'snake-ridgeline-graph--animated',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const variantStyles = {\r\n    minimal: {\r\n      showAxes: false,\r\n      showGrid: false,\r\n      showLabels: false,\r\n      strokeWidth: 1,\r\n    },\r\n    detailed: {\r\n      showAxes: true,\r\n      showGrid: true,\r\n      showLabels: true,\r\n      showValues: true,\r\n      strokeWidth: 2,\r\n    },\r\n    interactive: {\r\n      showAxes: true,\r\n      showLabels: true,\r\n      showValues: true,\r\n    },\r\n    scrolling: {\r\n      showAxes: true,\r\n      showLabels: true,\r\n      animate: true,\r\n    },\r\n  };\r\n\r\n  const variantProps = variant !== 'default' ? variantStyles[variant] || {} : {};\r\n  const finalShowAxes = variantProps.showAxes ?? showAxes;\r\n  const finalShowGrid = variantProps.showGrid ?? showGrid;\r\n  const finalShowLabels = variantProps.showLabels ?? showLabels;\r\n  const finalShowValues = variantProps.showValues ?? showValues;\r\n  const finalStrokeWidth = variantProps.strokeWidth ?? strokeWidth;\r\n\r\n  const isInteractive = variant === 'interactive';\r\n\r\n  // Generate x-axis ticks\r\n  const xTicks = useMemo(() => {\r\n    if (!data[0]) return [];\r\n    const tickCount = Math.min(10, data[0].values.length);\r\n    const step = Math.floor(data[0].values.length / tickCount);\r\n    return Array.from({ length: tickCount }, (_, i) => i * step);\r\n  }, [data]);\r\n\r\n  return (\r\n    <div className={classes}>\r\n      <div className=\"snake-ridgeline-graph__corner snake-ridgeline-graph__corner--top-left\" />\r\n      <div className=\"snake-ridgeline-graph__corner snake-ridgeline-graph__corner--top-right\" />\r\n      \r\n      <div className=\"snake-ridgeline-graph__container\">\r\n        {title && (\r\n          <div className=\"snake-ridgeline-graph__title\">{title}</div>\r\n        )}\r\n        \r\n        <svg\r\n          width={width}\r\n          height={height}\r\n          viewBox={`0 0 ${svgWidth} ${svgHeight}`}\r\n          className=\"snake-ridgeline-graph__svg\"\r\n          preserveAspectRatio=\"xMidYMid meet\"\r\n        >\r\n          <defs>\r\n            {/* Gradient definitions for fill */}\r\n            {processedData.map((series, i) => (\r\n              <linearGradient key={`gradient-${i}`} id={`ridge-gradient-${i}`} x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\r\n                <stop offset=\"0%\" stopColor={series.color} stopOpacity={fillOpacity} />\r\n                <stop offset=\"100%\" stopColor={series.color} stopOpacity={fillOpacity * 0.3} />\r\n              </linearGradient>\r\n            ))}\r\n          </defs>\r\n          \r\n          <g transform={`translate(${margin.left}, ${margin.top})`}>\r\n            {/* Grid */}\r\n            {finalShowGrid && (\r\n              <g className=\"snake-ridgeline-graph__grid\">\r\n                {xTicks.map((tick, i) => {\r\n                  const x = (tick / (data[0].values.length - 1)) * plotWidth;\r\n                  return (\r\n                    <line\r\n                      key={`grid-${i}`}\r\n                      x1={x}\r\n                      y1={0}\r\n                      x2={x}\r\n                      y2={totalHeight}\r\n                      stroke={gridColor}\r\n                      strokeWidth=\"1\"\r\n                      strokeOpacity=\"0.3\"\r\n                      strokeDasharray=\"2 4\"\r\n                    />\r\n                  );\r\n                })}\r\n              </g>\r\n            )}\r\n\r\n            {/* Ridges */}\r\n            <g className=\"snake-ridgeline-graph__ridges\">\r\n              {processedData.map((series, i) => {\r\n                const isActive = activeRidge === series.label;\r\n                const isHovered = hoveredRidge === series.label;\r\n                const isDimmed = isInteractive && activeRidge && !isActive;\r\n                \r\n                return (\r\n                  <g \r\n                    key={`ridge-${i}`}\r\n                    className={`snake-ridgeline-graph__ridge ${isActive ? 'snake-ridgeline-graph__ridge--active' : ''} ${series.isPlaceholder ? 'snake-ridgeline-graph__ridge--placeholder' : ''}`}\r\n                    style={{\r\n                      opacity: isDimmed ? 0.3 : 1,\r\n                      transition: 'all 0.3s ease',\r\n                    }}\r\n                  >\r\n                    {/* Fill area - only show if not placeholder */}\r\n                    {fill && !series.isPlaceholder && (\r\n                      <path\r\n                        d={generatePath(series.points, series.yOffset, true)}\r\n                        fill={`url(#ridge-gradient-${i})`}\r\n                        stroke=\"none\"\r\n                        className=\"snake-ridgeline-graph__ridge-fill\"\r\n                        style={{\r\n                          cursor: isInteractive ? 'pointer' : 'default',\r\n                        }}\r\n                        onClick={() => {\r\n                          if (isInteractive) {\r\n                            const newActive = isActive ? null : series.label;\r\n                            setActiveRidge(newActive);\r\n                            onRidgeClick?.(series, i);\r\n                          }\r\n                        }}\r\n                        onMouseEnter={() => isInteractive && setHoveredRidge(series.label)}\r\n                        onMouseLeave={() => isInteractive && setHoveredRidge(null)}\r\n                      />\r\n                    )}\r\n                    \r\n                    {/* Stroke line or placeholder line */}\r\n                    <path\r\n                      d={series.isPlaceholder \r\n                        ? `M 0 ${series.yOffset + (variant === 'scrolling' ? totalHeight / maxRidges / 2 : ridgeHeight / 2)} L ${plotWidth} ${series.yOffset + (variant === 'scrolling' ? totalHeight / maxRidges / 2 : ridgeHeight / 2)}`\r\n                        : generatePath(series.points, series.yOffset, false)}\r\n                      fill=\"none\"\r\n                      stroke={series.isPlaceholder ? '#2a2a2a' : series.color}\r\n                      strokeWidth={series.isPlaceholder ? 1 : (isActive || isHovered ? finalStrokeWidth + 1 : finalStrokeWidth)}\r\n                      strokeOpacity={series.isPlaceholder ? 0.5 : (isDimmed ? 0.5 : 1)}\r\n                      strokeDasharray={series.isPlaceholder ? '4 4' : undefined}\r\n                      className=\"snake-ridgeline-graph__ridge-line\"\r\n                      style={{\r\n                        cursor: isInteractive ? 'pointer' : 'default',\r\n                        strokeLinecap: 'round',\r\n                        strokeLinejoin: 'round',\r\n                      }}\r\n                      onClick={() => {\r\n                        if (isInteractive) {\r\n                          const newActive = isActive ? null : series.label;\r\n                          setActiveRidge(newActive);\r\n                          onRidgeClick?.(series, i);\r\n                        }\r\n                      }}\r\n                      onMouseEnter={() => isInteractive && setHoveredRidge(series.label)}\r\n                      onMouseLeave={() => isInteractive && setHoveredRidge(null)}\r\n                      onMouseMove={(e) => {\r\n                        if (finalShowValues && isInteractive) {\r\n                          const rect = e.currentTarget.getBoundingClientRect();\r\n                          const x = e.clientX - rect.left;\r\n                          const index = Math.round((x / plotWidth) * (series.values.length - 1));\r\n                          if (index >= 0 && index < series.values.length) {\r\n                            setHoveredPoint({\r\n                              x: series.points[index].x,\r\n                              y: series.points[index].y,\r\n                              value: series.values[index],\r\n                            });\r\n                          }\r\n                        }\r\n                      }}\r\n                    />\r\n                    \r\n                    {/* Labels - don't show for placeholders */}\r\n                    {finalShowLabels && !series.isPlaceholder && (\r\n                      <text\r\n                        x={-15}\r\n                        y={series.yOffset + (variant === 'scrolling' ? totalHeight / maxRidges / 2 : ridgeHeight / 2)}\r\n                        textAnchor=\"end\"\r\n                        dominantBaseline=\"middle\"\r\n                        fill=\"#bdbdbd\"\r\n                        fontSize=\"12\"\r\n                        fontFamily=\"var(--font-family)\"\r\n                        className=\"snake-ridgeline-graph__label\"\r\n                      >\r\n                        {series.label}\r\n                      </text>\r\n                    )}\r\n                  </g>\r\n                );\r\n              })}\r\n            </g>\r\n\r\n            {/* Hover value tooltip */}\r\n            {finalShowValues && hoveredPoint && (\r\n              <g className=\"snake-ridgeline-graph__tooltip\">\r\n                <rect\r\n                  x={hoveredPoint.x - 30}\r\n                  y={hoveredPoint.y - 20}\r\n                  width=\"60\"\r\n                  height=\"20\"\r\n                  fill=\"#101010\"\r\n                  stroke=\"#3a3a3a\"\r\n                  strokeWidth=\"1\"\r\n                />\r\n                <text\r\n                  x={hoveredPoint.x}\r\n                  y={hoveredPoint.y - 10}\r\n                  textAnchor=\"middle\"\r\n                  dominantBaseline=\"middle\"\r\n                  fill=\"#bdbdbd\"\r\n                  fontSize=\"10\"\r\n                  fontFamily=\"var(--font-family-mono)\"\r\n                >\r\n                  {hoveredPoint.value.toFixed(2)}\r\n                </text>\r\n              </g>\r\n            )}\r\n\r\n            {/* X-axis */}\r\n            {finalShowAxes && (\r\n              <g className=\"snake-ridgeline-graph__x-axis\">\r\n                <line\r\n                  x1={0}\r\n                  y1={totalHeight}\r\n                  x2={plotWidth}\r\n                  y2={totalHeight}\r\n                  stroke=\"#5a5a5a\"\r\n                  strokeWidth=\"2\"\r\n                />\r\n                {xLabels ? xLabels.map((label, i) => {\r\n                  const x = (i / (xLabels.length - 1)) * plotWidth;\r\n                  return (\r\n                    <text\r\n                      key={`xlabel-${i}`}\r\n                      x={x}\r\n                      y={totalHeight + 25}\r\n                      textAnchor=\"middle\"\r\n                      fill=\"#8a8a8a\"\r\n                      fontSize=\"10\"\r\n                      fontFamily=\"var(--font-family-mono)\"\r\n                    >\r\n                      {label}\r\n                    </text>\r\n                  );\r\n                }) : xTicks.map((tick, i) => {\r\n                  const x = (tick / (data[0].values.length - 1)) * plotWidth;\r\n                  return (\r\n                    <text\r\n                      key={`xtick-${i}`}\r\n                      x={x}\r\n                      y={totalHeight + 25}\r\n                      textAnchor=\"middle\"\r\n                      fill=\"#8a8a8a\"\r\n                      fontSize=\"10\"\r\n                      fontFamily=\"var(--font-family-mono)\"\r\n                    >\r\n                      {tick}\r\n                    </text>\r\n                  );\r\n                })}\r\n              </g>\r\n            )}\r\n\r\n            {/* Axis labels */}\r\n            {finalShowAxes && (\r\n              <>\r\n                {xLabel && (\r\n                  <text\r\n                    x={plotWidth / 2}\r\n                    y={totalHeight + 50}\r\n                    textAnchor=\"middle\"\r\n                    fill=\"#bdbdbd\"\r\n                    fontSize=\"12\"\r\n                    fontFamily=\"var(--font-family)\"\r\n                    className=\"snake-ridgeline-graph__axis-label\"\r\n                  >\r\n                    {xLabel}\r\n                  </text>\r\n                )}\r\n                {yLabel && (\r\n                  <text\r\n                    x={-totalHeight / 2}\r\n                    y={-60}\r\n                    textAnchor=\"middle\"\r\n                    fill=\"#bdbdbd\"\r\n                    fontSize=\"12\"\r\n                    fontFamily=\"var(--font-family)\"\r\n                    transform=\"rotate(-90)\"\r\n                    className=\"snake-ridgeline-graph__y-label\"\r\n                  >\r\n                    {yLabel}\r\n                  </text>\r\n                )}\r\n              </>\r\n            )}\r\n          </g>\r\n        </svg>\r\n\r\n        {/* Scrolling indicator */}\r\n        {variant === 'scrolling' && (\r\n          <div className=\"snake-ridgeline-graph__scroll-indicator\">\r\n            <span className=\"snake-ridgeline-graph__scroll-dot\" />\r\n            <span>Live Data</span>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"snake-ridgeline-graph__corner snake-ridgeline-graph__corner--bottom-left\" />\r\n      <div className=\"snake-ridgeline-graph__corner snake-ridgeline-graph__corner--bottom-right\" />\r\n    </div>\r\n  );\r\n};","import React from 'react';\r\nimport './skeleton.css';\r\n\r\nexport interface SkeletonProps {\r\n  /** Skeleton variant */\r\n  variant?: 'text' | 'rectangular' | 'circular' | 'button';\r\n  /** Width of the skeleton */\r\n  width?: string | number;\r\n  /** Height of the skeleton */\r\n  height?: string | number;\r\n  /** Animation style */\r\n  animation?: 'pulse' | 'wave' | 'none';\r\n  /** Number of lines (for text variant) */\r\n  lines?: number;\r\n  /** Show corner decorations */\r\n  decorated?: boolean;\r\n  /** Intensity of the animation */\r\n  intensity?: 'subtle' | 'normal' | 'strong';\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n  /** Additional styles */\r\n  style?: React.CSSProperties;\r\n}\r\n\r\n/** Skeleton component for loading states */\r\nexport const Skeleton: React.FC<SkeletonProps> = ({\r\n  variant = 'rectangular',\r\n  width,\r\n  height,\r\n  animation = 'pulse',\r\n  lines = 1,\r\n  decorated = false,\r\n  intensity = 'normal',\r\n  className = '',\r\n  style,\r\n}) => {\r\n  const skeletonClasses = [\r\n    'snake-skeleton',\r\n    `snake-skeleton--${variant}`,\r\n    `snake-skeleton--${animation}`,\r\n    `snake-skeleton--intensity-${intensity}`,\r\n    decorated && 'snake-skeleton--decorated',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const getSkeletonStyle = (): React.CSSProperties => {\r\n    const baseStyle: React.CSSProperties = { ...style };\r\n\r\n    if (width) {\r\n      baseStyle.width = typeof width === 'number' ? `${width}px` : width;\r\n    }\r\n\r\n    if (height && variant !== 'text') {\r\n      baseStyle.height = typeof height === 'number' ? `${height}px` : height;\r\n    }\r\n\r\n    return baseStyle;\r\n  };\r\n\r\n  if (variant === 'text' && lines > 1) {\r\n    return (\r\n      <div className=\"snake-skeleton__text-group\" style={style}>\r\n        {Array.from({ length: lines }, (_, i) => (\r\n          <div\r\n            key={i}\r\n            className={skeletonClasses}\r\n            style={{\r\n              ...getSkeletonStyle(),\r\n              width: i === lines - 1 ? '80%' : '100%',\r\n            }}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={skeletonClasses} style={getSkeletonStyle()}>\r\n      {decorated && (\r\n        <>\r\n          <div className=\"snake-skeleton__corner snake-skeleton__corner--top-left\" />\r\n          <div className=\"snake-skeleton__corner snake-skeleton__corner--top-right\" />\r\n          <div className=\"snake-skeleton__corner snake-skeleton__corner--bottom-left\" />\r\n          <div className=\"snake-skeleton__corner snake-skeleton__corner--bottom-right\" />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport './slider.css';\r\n\r\nexport interface SliderProps {\r\n  /** Current value */\r\n  value?: number;\r\n  /** Value change handler */\r\n  onChange?: (value: number) => void;\r\n  /** Minimum value */\r\n  min?: number;\r\n  /** Maximum value */\r\n  max?: number;\r\n  /** Step increment */\r\n  step?: number;\r\n  /** Show value label */\r\n  showValue?: boolean;\r\n  /** Value label position */\r\n  valueLabelPosition?: 'top' | 'bottom' | 'tooltip';\r\n  /** Show tick marks */\r\n  showTicks?: boolean;\r\n  /** Tick interval */\r\n  tickInterval?: number;\r\n  /** Custom marks */\r\n  marks?: Array<{ value: number; label?: string }>;\r\n  /** Size variant */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** Color variant */\r\n  variant?: 'default' | 'success' | 'warning' | 'danger' | 'info';\r\n  /** Orientation */\r\n  orientation?: 'horizontal' | 'vertical';\r\n  /** Disabled state */\r\n  disabled?: boolean;\r\n  /** Label */\r\n  label?: string;\r\n  /** Format value function */\r\n  formatValue?: (value: number) => string;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n}\r\n\r\n/** Slider component for selecting numeric values */\r\nexport const Slider: React.FC<SliderProps> = ({\r\n  value = 0,\r\n  onChange,\r\n  min = 0,\r\n  max = 100,\r\n  step = 1,\r\n  showValue = false,\r\n  valueLabelPosition = 'top',\r\n  showTicks = false,\r\n  tickInterval = 10,\r\n  marks,\r\n  size = 'medium',\r\n  variant = 'default',\r\n  orientation = 'horizontal',\r\n  disabled = false,\r\n  label,\r\n  formatValue = (v) => v.toString(),\r\n  className = '',\r\n}) => {\r\n  const [internalValue, setInternalValue] = useState(value);\r\n  const [isDragging, setIsDragging] = useState(false);\r\n  const [showTooltip, setShowTooltip] = useState(false);\r\n  const sliderRef = useRef<HTMLDivElement>(null);\r\n  const trackRef = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    setInternalValue(value);\r\n  }, [value]);\r\n\r\n  const percentage = ((internalValue - min) / (max - min)) * 100;\r\n\r\n  const handleMouseDown = (e: React.MouseEvent) => {\r\n    if (disabled) return;\r\n    setIsDragging(true);\r\n    updateValue(e);\r\n  };\r\n\r\n  const handleMouseMove = (e: MouseEvent) => {\r\n    if (isDragging && !disabled) {\r\n      updateValue(e);\r\n    }\r\n  };\r\n\r\n  const handleMouseUp = () => {\r\n    setIsDragging(false);\r\n  };\r\n\r\n  const updateValue = (e: React.MouseEvent | MouseEvent) => {\r\n    if (!trackRef.current) return;\r\n\r\n    const rect = trackRef.current.getBoundingClientRect();\r\n    let percentage: number;\r\n\r\n    if (orientation === 'horizontal') {\r\n      const x = Math.max(0, Math.min(e.clientX - rect.left, rect.width));\r\n      percentage = x / rect.width;\r\n    } else {\r\n      const y = Math.max(0, Math.min(rect.height - (e.clientY - rect.top), rect.height));\r\n      percentage = y / rect.height;\r\n    }\r\n\r\n    const newValue = Math.round((min + percentage * (max - min)) / step) * step;\r\n    const clampedValue = Math.max(min, Math.min(max, newValue));\r\n\r\n    setInternalValue(clampedValue);\r\n    onChange?.(clampedValue);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isDragging) {\r\n      document.addEventListener('mousemove', handleMouseMove);\r\n      document.addEventListener('mouseup', handleMouseUp);\r\n      return () => {\r\n        document.removeEventListener('mousemove', handleMouseMove);\r\n        document.removeEventListener('mouseup', handleMouseUp);\r\n      };\r\n    }\r\n  }, [isDragging]);\r\n\r\n  const handleKeyDown = (e: React.KeyboardEvent) => {\r\n    if (disabled) return;\r\n\r\n    let newValue = internalValue;\r\n    const bigStep = step * 10;\r\n\r\n    switch (e.key) {\r\n      case 'ArrowLeft':\r\n      case 'ArrowDown':\r\n        newValue = Math.max(min, internalValue - step);\r\n        break;\r\n      case 'ArrowRight':\r\n      case 'ArrowUp':\r\n        newValue = Math.min(max, internalValue + step);\r\n        break;\r\n      case 'PageDown':\r\n        newValue = Math.max(min, internalValue - bigStep);\r\n        break;\r\n      case 'PageUp':\r\n        newValue = Math.min(max, internalValue + bigStep);\r\n        break;\r\n      case 'Home':\r\n        newValue = min;\r\n        break;\r\n      case 'End':\r\n        newValue = max;\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n\r\n    e.preventDefault();\r\n    setInternalValue(newValue);\r\n    onChange?.(newValue);\r\n  };\r\n\r\n  const renderTicks = () => {\r\n    if (!showTicks && !marks) return null;\r\n\r\n    const tickMarks = marks || [];\r\n\r\n    if (showTicks && !marks) {\r\n      for (let i = min; i <= max; i += tickInterval) {\r\n        tickMarks.push({ value: i });\r\n      }\r\n    }\r\n\r\n    return tickMarks.map((mark) => {\r\n      const markPercentage = ((mark.value - min) / (max - min)) * 100;\r\n      const style =\r\n        orientation === 'horizontal'\r\n          ? { left: `${markPercentage}%` }\r\n          : { bottom: `${markPercentage}%` };\r\n\r\n      return (\r\n        <div key={mark.value} className=\"snake-slider__tick\" style={style}>\r\n          {mark.label && <span className=\"snake-slider__tick-label\">{mark.label}</span>}\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n\r\n  const sliderClasses = [\r\n    'snake-slider',\r\n    `snake-slider--${size}`,\r\n    `snake-slider--${variant}`,\r\n    `snake-slider--${orientation}`,\r\n    disabled && 'snake-slider--disabled',\r\n    isDragging && 'snake-slider--dragging',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const thumbStyle =\r\n    orientation === 'horizontal' ? { left: `${percentage}%` } : { bottom: `${percentage}%` };\r\n\r\n  const fillStyle =\r\n    orientation === 'horizontal' ? { width: `${percentage}%` } : { height: `${percentage}%` };\r\n\r\n  return (\r\n    <div className={sliderClasses}>\r\n      {label && <label className=\"snake-slider__label\">{label}</label>}\r\n\r\n      <div className=\"snake-slider__container\">\r\n        {showValue && valueLabelPosition === 'top' && (\r\n          <div className=\"snake-slider__value snake-slider__value--top\">\r\n            {formatValue(internalValue)}\r\n          </div>\r\n        )}\r\n\r\n        <div\r\n          ref={sliderRef}\r\n          className=\"snake-slider__wrapper\"\r\n          onMouseEnter={() => setShowTooltip(true)}\r\n          onMouseLeave={() => setShowTooltip(false)}\r\n        >\r\n          <div ref={trackRef} className=\"snake-slider__track\" onMouseDown={handleMouseDown}>\r\n            <div className=\"snake-slider__fill\" style={fillStyle} />\r\n            {renderTicks()}\r\n\r\n            <div\r\n              className=\"snake-slider__thumb\"\r\n              style={thumbStyle}\r\n              tabIndex={disabled ? -1 : 0}\r\n              role=\"slider\"\r\n              aria-valuemin={min}\r\n              aria-valuemax={max}\r\n              aria-valuenow={internalValue}\r\n              aria-disabled={disabled}\r\n              onKeyDown={handleKeyDown}\r\n            >\r\n              {showValue && valueLabelPosition === 'tooltip' && showTooltip && (\r\n                <div className=\"snake-slider__tooltip\">{formatValue(internalValue)}</div>\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"snake-slider__corner snake-slider__corner--start-top\" />\r\n          <div className=\"snake-slider__corner snake-slider__corner--start-bottom\" />\r\n          <div className=\"snake-slider__corner snake-slider__corner--end-top\" />\r\n          <div className=\"snake-slider__corner snake-slider__corner--end-bottom\" />\r\n        </div>\r\n\r\n        {showValue && valueLabelPosition === 'bottom' && (\r\n          <div className=\"snake-slider__value snake-slider__value--bottom\">\r\n            {formatValue(internalValue)}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useMemo } from 'react';\r\nimport './spidergraph.css';\r\n\r\ninterface DataPoint {\r\n  label: string;\r\n  value: number; // 0-100 percentage\r\n  color?: string;\r\n}\r\n\r\nexport interface SpiderGraphProps {\r\n  /** Array of data points */\r\n  data: DataPoint[];\r\n  /** Width of the graph (defaults to 100% to fill parent) */\r\n  width?: number | string;\r\n  /** Height of the graph (defaults to 100% to fill parent) */\r\n  height?: number | string;\r\n  /** Number of grid levels */\r\n  levels?: number;\r\n  /** Whether to show values on points */\r\n  showValues?: boolean;\r\n  /** Whether to show labels */\r\n  showLabels?: boolean;\r\n  /** Whether to show grid lines */\r\n  showGrid?: boolean;\r\n  /** Whether to show axes lines */\r\n  showAxes?: boolean;\r\n  /** Whether to animate on mount */\r\n  animate?: boolean;\r\n  /** Fill opacity for the shape */\r\n  fillOpacity?: number;\r\n  /** Stroke width */\r\n  strokeWidth?: number;\r\n  /** Grid color */\r\n  gridColor?: string;\r\n  /** Fill color */\r\n  fillColor?: string;\r\n  /** Stroke color */\r\n  strokeColor?: string;\r\n  /** Whether to show dots on points */\r\n  showDots?: boolean;\r\n  /** Size variant */\r\n  variant?: 'default' | 'minimal' | 'detailed' | 'cyber';\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n}\r\n\r\n/** SpiderGraph component for multi-dimensional data visualization */\r\nexport const SpiderGraph: React.FC<SpiderGraphProps> = ({\r\n  data,\r\n  width = '100%',\r\n  height = '100%',\r\n  levels = 5,\r\n  showValues = false,\r\n  showLabels = true,\r\n  showGrid = true,\r\n  showAxes = true,\r\n  animate = true,\r\n  fillOpacity = 0.1,\r\n  strokeWidth = 2,\r\n  gridColor = '#3a3a3a',\r\n  fillColor = '#ffffff',\r\n  strokeColor = '#ffffff',\r\n  showDots = true,\r\n  variant = 'default',\r\n  className = '',\r\n}) => {\r\n  // Fixed SVG dimensions for consistent viewBox\r\n  const svgWidth = 300;\r\n  const svgHeight = 300;\r\n  const center = svgWidth / 2;\r\n  const radius = (svgWidth * 0.8) / 2; // 80% of size for padding\r\n\r\n  // Calculate points for the polygon\r\n  const points = useMemo(() => {\r\n    return data.map((point, index) => {\r\n      const angle = (Math.PI * 2 * index) / data.length - Math.PI / 2;\r\n      const distance = (radius * point.value) / 100;\r\n      return {\r\n        x: center + Math.cos(angle) * distance,\r\n        y: center + Math.sin(angle) * distance,\r\n        labelX: center + Math.cos(angle) * (radius + 30),\r\n        labelY: center + Math.sin(angle) * (radius + 30),\r\n        endX: center + Math.cos(angle) * radius,\r\n        endY: center + Math.sin(angle) * radius,\r\n        ...point,\r\n      };\r\n    });\r\n  }, [data, center, radius]);\r\n\r\n  // Generate grid levels\r\n  const gridLevels = useMemo(() => {\r\n    return Array.from({ length: levels }, (_, i) => {\r\n      const levelRadius = (radius * (i + 1)) / levels;\r\n      return data.map((_, index) => {\r\n        const angle = (Math.PI * 2 * index) / data.length - Math.PI / 2;\r\n        return {\r\n          x: center + Math.cos(angle) * levelRadius,\r\n          y: center + Math.sin(angle) * levelRadius,\r\n        };\r\n      });\r\n    });\r\n  }, [data.length, levels, center, radius]);\r\n\r\n  // Create polygon path\r\n  const polygonPath = points.map((p, i) => `${i === 0 ? 'M' : 'L'} ${p.x} ${p.y}`).join(' ') + ' Z';\r\n\r\n  // Create grid path\r\n  const gridPaths = gridLevels.map((level) => {\r\n    return level.map((p, i) => `${i === 0 ? 'M' : 'L'} ${p.x} ${p.y}`).join(' ') + ' Z';\r\n  });\r\n\r\n  const classes = [\r\n    'snake-spider-graph',\r\n    `snake-spider-graph--${variant}`,\r\n    animate && 'snake-spider-graph--animated',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  // Variant-specific styles\r\n  const variantStyles = {\r\n    minimal: {\r\n      showGrid: false,\r\n      showAxes: false,\r\n      showDots: false,\r\n      strokeWidth: 1,\r\n    },\r\n    detailed: {\r\n      showValues: true,\r\n      showGrid: true,\r\n      showAxes: true,\r\n      showDots: true,\r\n    },\r\n    cyber: {\r\n      gridColor: '#61dafb',\r\n      strokeColor: '#61dafb',\r\n      fillColor: '#61dafb',\r\n      fillOpacity: 0.1,\r\n      strokeWidth: 3,\r\n    },\r\n  };\r\n\r\n  const variantProps = variant !== 'default' ? variantStyles[variant] || {} : {};\r\n  const finalProps = { ...variantProps };\r\n\r\n  return (\r\n    <div className={classes}>\r\n      <svg \r\n        width={typeof width === 'number' ? width : width} \r\n        height={typeof height === 'number' ? height : height} \r\n        viewBox={`0 0 ${svgWidth} ${svgHeight}`}\r\n        className=\"snake-spider-graph__svg\"\r\n        preserveAspectRatio=\"xMidYMid meet\"\r\n      >\r\n        {/* Grid */}\r\n        {(showGrid || finalProps.showGrid) && (\r\n          <g className=\"snake-spider-graph__grid\">\r\n            {gridPaths.map((path, i) => (\r\n              <path\r\n                key={`grid-${i}`}\r\n                d={path}\r\n                fill=\"none\"\r\n                stroke={finalProps.gridColor || gridColor}\r\n                strokeWidth=\"1\"\r\n                strokeOpacity={0.3 + (i / levels) * 0.3}\r\n                className=\"snake-spider-graph__grid-level\"\r\n              />\r\n            ))}\r\n          </g>\r\n        )}\r\n\r\n        {/* Axes */}\r\n        {(showAxes || finalProps.showAxes) && (\r\n          <g className=\"snake-spider-graph__axes\">\r\n            {points.map((point, i) => (\r\n              <line\r\n                key={`axis-${i}`}\r\n                x1={center}\r\n                y1={center}\r\n                x2={point.endX}\r\n                y2={point.endY}\r\n                stroke={finalProps.gridColor || gridColor}\r\n                strokeWidth=\"1\"\r\n                strokeOpacity=\"0.5\"\r\n                className=\"snake-spider-graph__axis\"\r\n              />\r\n            ))}\r\n          </g>\r\n        )}\r\n\r\n        {/* Data polygon */}\r\n        <g className=\"snake-spider-graph__data\">\r\n          <path\r\n            d={polygonPath}\r\n            fill={finalProps.fillColor || fillColor}\r\n            fillOpacity={finalProps.fillOpacity ?? fillOpacity}\r\n            stroke={finalProps.strokeColor || strokeColor}\r\n            strokeWidth={finalProps.strokeWidth ?? strokeWidth}\r\n            className=\"snake-spider-graph__polygon\"\r\n          />\r\n        </g>\r\n\r\n        {/* Data points */}\r\n        {(showDots || finalProps.showDots) && (\r\n          <g className=\"snake-spider-graph__dots\">\r\n            {points.map((point, i) => (\r\n              <circle\r\n                key={`dot-${i}`}\r\n                cx={point.x}\r\n                cy={point.y}\r\n                r=\"4\"\r\n                fill={point.color || finalProps.strokeColor || strokeColor}\r\n                stroke=\"#0b0b0d\"\r\n                strokeWidth=\"2\"\r\n                className=\"snake-spider-graph__dot\"\r\n              />\r\n            ))}\r\n          </g>\r\n        )}\r\n\r\n        {/* Values */}\r\n        {(showValues || finalProps.showValues) && (\r\n          <g className=\"snake-spider-graph__values\">\r\n            {points.map((point, i) => (\r\n              <text\r\n                key={`value-${i}`}\r\n                x={point.x}\r\n                y={point.y - 10}\r\n                textAnchor=\"middle\"\r\n                fill=\"#bdbdbd\"\r\n                fontSize=\"12\"\r\n                fontFamily=\"var(--font-family-mono)\"\r\n                className=\"snake-spider-graph__value\"\r\n              >\r\n                {point.value}%\r\n              </text>\r\n            ))}\r\n          </g>\r\n        )}\r\n\r\n        {/* Labels */}\r\n        {showLabels && (\r\n          <g className=\"snake-spider-graph__labels\">\r\n            {points.map((point, i) => {\r\n              // Determine text anchor based on position\r\n              let textAnchor = 'middle';\r\n              if (point.labelX < center - 10) textAnchor = 'end';\r\n              else if (point.labelX > center + 10) textAnchor = 'start';\r\n\r\n              return (\r\n                <text\r\n                  key={`label-${i}`}\r\n                  x={point.labelX}\r\n                  y={point.labelY}\r\n                  textAnchor={textAnchor}\r\n                  dominantBaseline=\"middle\"\r\n                  fill=\"#8a8a8a\"\r\n                  fontSize=\"12\"\r\n                  fontFamily=\"var(--font-family)\"\r\n                  className=\"snake-spider-graph__label\"\r\n                >\r\n                  {point.label}\r\n                </text>\r\n              );\r\n            })}\r\n          </g>\r\n        )}\r\n\r\n        {/* Corner accents */}\r\n        <g className=\"snake-spider-graph__corners\">\r\n          {/* Top left */}\r\n          <path\r\n            d=\"M 0 10 L 0 0 L 10 0\"\r\n            fill=\"none\"\r\n            stroke=\"#8e8e90\"\r\n            strokeWidth=\"2\"\r\n          />\r\n          {/* Top right */}\r\n          <path\r\n            d={`M ${svgWidth - 10} 0 L ${svgWidth} 0 L ${svgWidth} 10`}\r\n            fill=\"none\"\r\n            stroke=\"#8e8e90\"\r\n            strokeWidth=\"2\"\r\n          />\r\n          {/* Bottom left */}\r\n          <path\r\n            d={`M 0 ${svgHeight - 10} L 0 ${svgHeight} L 10 ${svgHeight}`}\r\n            fill=\"none\"\r\n            stroke=\"#8e8e90\"\r\n            strokeWidth=\"2\"\r\n          />\r\n          {/* Bottom right */}\r\n          <path\r\n            d={`M ${svgWidth - 10} ${svgHeight} L ${svgWidth} ${svgHeight} L ${svgWidth} ${svgHeight - 10}`}\r\n            fill=\"none\"\r\n            stroke=\"#8e8e90\"\r\n            strokeWidth=\"2\"\r\n          />\r\n        </g>\r\n      </svg>\r\n    </div>\r\n  );\r\n};","import React, { useRef, useState, useEffect } from 'react';\r\nimport './stepper.css';\r\n\r\ninterface StepperStep {\r\n  label: string;\r\n  description?: string;\r\n  icon?: React.ReactNode;\r\n  error?: boolean;\r\n}\r\n\r\nexport interface StepperProps {\r\n  /** Array of steps */\r\n  steps: StepperStep[];\r\n  /** Current active step index */\r\n  activeStep: number;\r\n  /** Orientation of the stepper */\r\n  orientation?: 'horizontal' | 'vertical';\r\n  /** Size variant */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** Whether to show step numbers */\r\n  showNumbers?: boolean;\r\n  /** Whether steps are clickable */\r\n  clickable?: boolean;\r\n  /** Callback when a step is clicked */\r\n  onStepClick?: (index: number) => void;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n  /** Whether to show connector lines */\r\n  showConnectors?: boolean;\r\n  /** Variant style */\r\n  variant?: 'default' | 'compact' | 'pills';\r\n}\r\n\r\n/** Stepper component for multi-step processes */\r\nexport const Stepper: React.FC<StepperProps> = ({\r\n  steps,\r\n  activeStep,\r\n  orientation = 'horizontal',\r\n  size = 'medium',\r\n  showNumbers = true,\r\n  clickable = false,\r\n  onStepClick,\r\n  className = '',\r\n  showConnectors = true,\r\n  variant = 'default',\r\n}) => {\r\n  const stepperRef = React.useRef<HTMLDivElement>(null);\r\n  const [connectorWidth, setConnectorWidth] = React.useState<number>(0);\r\n  const [connectorHeight, setConnectorHeight] = React.useState<number>(0);\r\n\r\n  React.useEffect(() => {\r\n    if (showConnectors && stepperRef.current) {\r\n      const calculateConnectorDimensions = () => {\r\n        const stepElements = stepperRef.current?.querySelectorAll('.snake-stepper__step-indicator');\r\n        if (stepElements && stepElements.length >= 2) {\r\n          const first = stepElements[0] as HTMLElement;\r\n          const second = stepElements[1] as HTMLElement;\r\n          const firstRect = first.getBoundingClientRect();\r\n          const secondRect = second.getBoundingClientRect();\r\n          \r\n          if (orientation === 'horizontal') {\r\n            const gap = secondRect.left - firstRect.right;\r\n            setConnectorWidth(gap);\r\n          } else {\r\n            const gap = secondRect.top - firstRect.bottom;\r\n            setConnectorHeight(gap);\r\n          }\r\n        }\r\n      };\r\n\r\n      calculateConnectorDimensions();\r\n      window.addEventListener('resize', calculateConnectorDimensions);\r\n      return () => window.removeEventListener('resize', calculateConnectorDimensions);\r\n    }\r\n  }, [orientation, showConnectors, steps.length]);\r\n\r\n  const handleStepClick = (index: number) => {\r\n    if (clickable && onStepClick) {\r\n      onStepClick(index);\r\n    }\r\n  };\r\n\r\n  const getStepState = (index: number) => {\r\n    if (steps[index].error) return 'error';\r\n    if (index < activeStep) return 'completed';\r\n    if (index === activeStep) return 'active';\r\n    return 'pending';\r\n  };\r\n\r\n  const classes = [\r\n    'snake-stepper',\r\n    `snake-stepper--${orientation}`,\r\n    `snake-stepper--${size}`,\r\n    `snake-stepper--${variant}`,\r\n    showConnectors && 'snake-stepper--with-connectors',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  return (\r\n    <div className={classes} ref={stepperRef}>\r\n      {steps.map((step, index) => {\r\n        const state = getStepState(index);\r\n        const isClickable = clickable && onStepClick;\r\n\r\n        return (\r\n          <div\r\n            key={index}\r\n            className={[\r\n              'snake-stepper__step',\r\n              `snake-stepper__step--${state}`,\r\n              isClickable && 'snake-stepper__step--clickable',\r\n            ]\r\n              .filter(Boolean)\r\n              .join(' ')}\r\n            onClick={() => handleStepClick(index)}\r\n            role={isClickable ? 'button' : undefined}\r\n            tabIndex={isClickable ? 0 : undefined}\r\n            onKeyDown={\r\n              isClickable\r\n                ? (e) => {\r\n                    if (e.key === 'Enter' || e.key === ' ') {\r\n                      e.preventDefault();\r\n                      handleStepClick(index);\r\n                    }\r\n                  }\r\n                : undefined\r\n            }\r\n          >\r\n            <div className=\"snake-stepper__indicator-wrapper\">\r\n              <div className=\"snake-stepper__step-indicator\">\r\n                {step.icon ? (\r\n                  <span className=\"snake-stepper__step-icon\">{step.icon}</span>\r\n                ) : showNumbers ? (\r\n                  <span className=\"snake-stepper__step-number\">\r\n                    {state === 'completed' ? '✓' : index + 1}\r\n                  </span>\r\n                ) : (\r\n                  <span className=\"snake-stepper__step-dot\" />\r\n                )}\r\n              </div>\r\n              \r\n              {showConnectors && index < steps.length - 1 && (\r\n                <div\r\n                  className={[\r\n                    'snake-stepper__connector',\r\n                    index < activeStep && 'snake-stepper__connector--completed',\r\n                  ]\r\n                    .filter(Boolean)\r\n                    .join(' ')}\r\n                  style={\r\n                    orientation === 'horizontal' \r\n                      ? { width: `${connectorWidth}px` } \r\n                      : { height: `${connectorHeight}px` }\r\n                  }\r\n                />\r\n              )}\r\n            </div>\r\n\r\n            {variant !== 'compact' && (\r\n              <div className=\"snake-stepper__step-content\">\r\n                <div className=\"snake-stepper__step-label\">{step.label}</div>\r\n                {step.description && variant === 'default' && (\r\n                  <div className=\"snake-stepper__step-description\">{step.description}</div>\r\n                )}\r\n              </div>\r\n            )}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};","import React, { useMemo, useState, useEffect } from 'react';\r\nimport './streamgraph.css';\r\n\r\ninterface DataPoint {\r\n  x: number | string;\r\n  [key: string]: number | string;\r\n}\r\n\r\nexport interface StreamGraphProps {\r\n  /** Array of data points */\r\n  data: DataPoint[];\r\n  /** Keys for the data series to display */\r\n  keys: string[];\r\n  /** Colors for each series */\r\n  colors?: string[];\r\n  /** Width of the graph (defaults to 100% to fill parent) */\r\n  width?: number | string;\r\n  /** Height of the graph (defaults to 100% to fill parent) */\r\n  height?: number | string;\r\n  /** Show grid lines */\r\n  showGrid?: boolean;\r\n  /** Number of grid lines */\r\n  gridLines?: number;\r\n  /** Show x-axis labels */\r\n  showLabels?: boolean;\r\n  /** Show legend */\r\n  showLegend?: boolean;\r\n  /** Animation on mount */\r\n  animate?: boolean;\r\n  /** Animate legend expand on mount */\r\n  animateLegend?: boolean;\r\n  /** Grid color */\r\n  gridColor?: string;\r\n  /** Curve type */\r\n  curve?: 'linear' | 'smooth' | 'step';\r\n  /** Offset type */\r\n  offset?: 'silhouette' | 'wiggle' | 'expand' | 'zero';\r\n  /** Size variant */\r\n  variant?: 'default' | 'minimal' | 'detailed' | 'interactive';\r\n  /** Format label function */\r\n  formatLabel?: (value: number | string) => string;\r\n  /** Callback when a layer is clicked (for interactive variant) */\r\n  onLayerClick?: (key: string, index: number) => void;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n}\r\n\r\n/** StreamGraph component for visualizing time-series data */\r\nexport const StreamGraph: React.FC<StreamGraphProps> = ({\r\n  data,\r\n  keys,\r\n  colors = ['#8b2c2c', '#4a4a4a', '#d4d4d4', '#6b3030', '#7a7a7a'],\r\n  width = '100%',\r\n  height = '100%',\r\n  showGrid = true,\r\n  gridLines = 5,\r\n  showLabels = true,\r\n  showLegend = true,\r\n  animate = true,\r\n  animateLegend = true,\r\n  gridColor = '#3a3a3a',\r\n  curve = 'smooth',\r\n  offset = 'silhouette',\r\n  variant = 'default',\r\n  formatLabel = (value) => value.toString(),\r\n  onLayerClick,\r\n  className = '',\r\n}) => {\r\n  // Fixed SVG dimensions for consistent viewBox\r\n  const svgWidth = 600;\r\n  const svgHeight = 400;\r\n  \r\n  // State for interactive variant\r\n  const [activeLayer, setActiveLayer] = useState<string | null>(null);\r\n  const [hoveredLayer, setHoveredLayer] = useState<string | null>(null);\r\n  // Calculate stacked data\r\n  const stackedData = useMemo(() => {\r\n    const layers: any[] = [];\r\n    \r\n    if (!keys || keys.length === 0 || !data || data.length === 0) {\r\n      return layers;\r\n    }\r\n    \r\n    keys.forEach((key, keyIndex) => {\r\n      const layer = data.map((d, i) => {\r\n        const value = typeof d[key] === 'number' ? d[key] : 0;\r\n        const prevLayers = layers.slice(0, keyIndex);\r\n        const y0 = prevLayers.reduce((sum, l) => sum + (l[i]?.value || 0), 0);\r\n        \r\n        return {\r\n          x: i,\r\n          y0,\r\n          y1: y0 + value,\r\n          value,\r\n          key,\r\n          originalX: d.x,\r\n        };\r\n      });\r\n      layers.push(layer);\r\n    });\r\n\r\n    // Apply offset\r\n    if (offset === 'silhouette') {\r\n      // Center the stream\r\n      const maxHeight = layers.reduce((max, layer) => {\r\n        const layerMax = Math.max(...layer.map((d: any) => d.y1));\r\n        return Math.max(max, layerMax);\r\n      }, 0);\r\n      \r\n      layers.forEach(layer => {\r\n        layer.forEach((d: any) => {\r\n          const shift = (maxHeight - d.y1) / 2;\r\n          d.y0 += shift;\r\n          d.y1 += shift;\r\n        });\r\n      });\r\n    } else if (offset === 'wiggle') {\r\n      // Minimize wiggle\r\n      const totals = data.map((_, i) => \r\n        layers.reduce((sum, layer) => sum + layer[i].value, 0)\r\n      );\r\n      const maxTotal = Math.max(...totals);\r\n      \r\n      layers.forEach(layer => {\r\n        layer.forEach((d: any, i: number) => {\r\n          const shift = (maxTotal - totals[i]) / 2;\r\n          d.y0 += shift;\r\n          d.y1 += shift;\r\n        });\r\n      });\r\n    } else if (offset === 'expand') {\r\n      // Normalize to 100%\r\n      data.forEach((_, i) => {\r\n        const total = layers.reduce((sum, layer) => sum + layer[i].value, 0);\r\n        if (total > 0) {\r\n          let cumulative = 0;\r\n          layers.forEach(layer => {\r\n            const normalized = (layer[i].value / total) * 100;\r\n            layer[i].y0 = cumulative;\r\n            layer[i].y1 = cumulative + normalized;\r\n            cumulative += normalized;\r\n          });\r\n        }\r\n      });\r\n    }\r\n\r\n    return layers;\r\n  }, [data, keys, offset]);\r\n\r\n  // Calculate max value for scaling\r\n  const maxValue = useMemo(() => {\r\n    if (offset === 'expand') return 100;\r\n    return Math.max(...stackedData.flat().map((d: any) => d.y1));\r\n  }, [stackedData, offset]);\r\n\r\n  // Generate path for each layer\r\n  const generatePath = (layer: any[]) => {\r\n    if (layer.length === 0) return '';\r\n    \r\n    const xScale = (i: number) => (i / (data.length - 1)) * svgWidth;\r\n    const yScale = (v: number) => svgHeight - (v / maxValue) * svgHeight;\r\n    \r\n    let pathTop = '';\r\n    let pathBottom = '';\r\n    \r\n    layer.forEach((point, i) => {\r\n      const x = xScale(i);\r\n      const y0 = yScale(point.y0);\r\n      const y1 = yScale(point.y1);\r\n      \r\n      if (i === 0) {\r\n        pathTop = `M ${x} ${y1}`;\r\n        pathBottom = `L ${x} ${y0}`;\r\n      } else {\r\n        if (curve === 'smooth') {\r\n          // Cubic bezier curve\r\n          const prevX = xScale(i - 1);\r\n          const midX = (prevX + x) / 2;\r\n          const prevY1 = yScale(layer[i - 1].y1);\r\n          pathTop += ` C ${midX} ${prevY1}, ${midX} ${y1}, ${x} ${y1}`;\r\n          \r\n          const prevY0 = yScale(layer[i - 1].y0);\r\n          pathBottom = ` C ${midX} ${y0}, ${midX} ${prevY0}, ${prevX} ${prevY0}` + pathBottom;\r\n        } else if (curve === 'step') {\r\n          const prevX = xScale(i - 1);\r\n          pathTop += ` L ${prevX} ${y1} L ${x} ${y1}`;\r\n          pathBottom = ` L ${x} ${y0} L ${prevX} ${y0}` + pathBottom;\r\n        } else {\r\n          pathTop += ` L ${x} ${y1}`;\r\n          pathBottom = ` L ${x} ${y0}` + pathBottom;\r\n        }\r\n      }\r\n    });\r\n    \r\n    return pathTop + pathBottom + ' Z';\r\n  };\r\n\r\n  const classes = [\r\n    'snake-stream-graph',\r\n    `snake-stream-graph--${variant}`,\r\n    animate && 'snake-stream-graph--animated',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const variantStyles = {\r\n    minimal: {\r\n      showGrid: false,\r\n      showLegend: false,\r\n    },\r\n    detailed: {\r\n      showGrid: true,\r\n      showLegend: true,\r\n      gridLines: 10,\r\n    },\r\n    interactive: {\r\n      showGrid: true,\r\n      showLegend: true,\r\n    },\r\n  };\r\n\r\n  const variantProps = variant !== 'default' ? variantStyles[variant] || {} : {};\r\n  const finalShowGrid = variantProps.showGrid ?? showGrid;\r\n  const finalShowLegend = variantProps.showLegend ?? showLegend;\r\n  const finalGridLines = variantProps.gridLines ?? gridLines;\r\n\r\n  // Generate grid positions\r\n  const gridPositions = useMemo(() => {\r\n    return Array.from({ length: finalGridLines + 1 }, (_, i) => \r\n      (i / finalGridLines) * svgHeight\r\n    );\r\n  }, [finalGridLines, svgHeight]);\r\n\r\n  // Generate x-axis labels\r\n  const xLabels = useMemo(() => {\r\n    const step = Math.ceil(data.length / 8); // Show max 8 labels\r\n    return data.filter((_, i) => i % step === 0).map((d, i) => ({\r\n      value: d.x,\r\n      position: (i * step) / (data.length - 1) * svgWidth,\r\n    }));\r\n  }, [data, svgWidth]);\r\n\r\n  return (\r\n    <div className={classes}>\r\n      <div className=\"snake-stream-graph__corner snake-stream-graph__corner--top-left\" />\r\n      <div className=\"snake-stream-graph__corner snake-stream-graph__corner--top-right\" />\r\n      \r\n      <div className=\"snake-stream-graph__container\">\r\n        <svg\r\n          width={typeof width === 'number' ? width : width}\r\n          height={typeof height === 'number' ? height : height}\r\n          viewBox={`0 0 ${svgWidth} ${svgHeight}`}\r\n          className=\"snake-stream-graph__svg\"\r\n          preserveAspectRatio=\"xMidYMid meet\"\r\n        >\r\n          {/* Grid */}\r\n          {finalShowGrid && (\r\n            <g className=\"snake-stream-graph__grid\">\r\n              {gridPositions.map((y, i) => (\r\n                <line\r\n                  key={`grid-${i}`}\r\n                  x1={0}\r\n                  y1={y}\r\n                  x2={svgWidth}\r\n                  y2={y}\r\n                  stroke={gridColor}\r\n                  strokeWidth=\"1\"\r\n                  strokeOpacity=\"0.3\"\r\n                  className=\"snake-stream-graph__grid-line\"\r\n                />\r\n              ))}\r\n            </g>\r\n          )}\r\n\r\n          {/* Streams */}\r\n          <g className=\"snake-stream-graph__streams\">\r\n            {stackedData.map((layer, i) => {\r\n              const isActive = activeLayer === keys[i];\r\n              const isHovered = hoveredLayer === keys[i];\r\n              const isInteractive = variant === 'interactive';\r\n              const isDimmed = isInteractive && activeLayer && !isActive;\r\n              \r\n              return (\r\n                <path\r\n                  key={`stream-${i}`}\r\n                  d={generatePath(layer)}\r\n                  fill={colors[i % colors.length]}\r\n                  fillOpacity={\r\n                    isDimmed ? '0.1' : \r\n                    isActive ? '0.7' : \r\n                    isHovered ? '0.6' : \r\n                    '0.4'\r\n                  }\r\n                  stroke={colors[i % colors.length]}\r\n                  strokeWidth={isActive || isHovered ? '2' : '1'}\r\n                  strokeOpacity={\r\n                    isDimmed ? '0.2' : \r\n                    isActive ? '1' : \r\n                    isHovered ? '0.8' : \r\n                    '0.6'\r\n                  }\r\n                  className={`snake-stream-graph__stream ${isActive ? 'snake-stream-graph__stream--active' : ''}`}\r\n                  style={{\r\n                    animationDelay: animate ? `${i * 100}ms` : '0',\r\n                    cursor: isInteractive ? 'pointer' : 'default',\r\n                    transition: 'all 0.3s ease',\r\n                  }}\r\n                  onClick={() => {\r\n                    if (isInteractive) {\r\n                      const newActive = isActive ? null : keys[i];\r\n                      setActiveLayer(newActive);\r\n                      onLayerClick?.(keys[i], i);\r\n                    }\r\n                  }}\r\n                  onMouseEnter={() => isInteractive && setHoveredLayer(keys[i])}\r\n                  onMouseLeave={() => isInteractive && setHoveredLayer(null)}\r\n                />\r\n              );\r\n            })}\r\n          </g>\r\n\r\n        </svg>\r\n\r\n        {/* X-axis labels */}\r\n        {showLabels && (\r\n          <div className=\"snake-stream-graph__labels\">\r\n            {xLabels.map((label, i) => (\r\n              <div\r\n                key={`label-${i}`}\r\n                className=\"snake-stream-graph__label\"\r\n                style={{ left: `${label.position}px` }}\r\n              >\r\n                {formatLabel(label.value)}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n\r\n        {/* Legend */}\r\n        {finalShowLegend && (\r\n          <div className={`snake-stream-graph__legend ${animateLegend ? 'snake-stream-graph__legend--animated' : ''}`}>\r\n            {keys.map((key, i) => {\r\n              const isActive = activeLayer === key;\r\n              const isInteractive = variant === 'interactive';\r\n              const isDimmed = isInteractive && activeLayer && !isActive;\r\n              \r\n              return (\r\n                <div \r\n                  key={`legend-${i}`} \r\n                  className={`snake-stream-graph__legend-item ${isActive ? 'snake-stream-graph__legend-item--active' : ''}`}\r\n                  style={{\r\n                    opacity: isDimmed ? 0.3 : 1,\r\n                    cursor: isInteractive ? 'pointer' : 'default',\r\n                  }}\r\n                  onClick={() => {\r\n                    if (isInteractive) {\r\n                      const newActive = isActive ? null : key;\r\n                      setActiveLayer(newActive);\r\n                      onLayerClick?.(key, i);\r\n                    }\r\n                  }}\r\n                  onMouseEnter={() => isInteractive && setHoveredLayer(key)}\r\n                  onMouseLeave={() => isInteractive && setHoveredLayer(null)}\r\n                >\r\n                  <span \r\n                    className=\"snake-stream-graph__legend-color\"\r\n                    style={{ \r\n                      backgroundColor: colors[i % colors.length],\r\n                      borderWidth: isActive ? '2px' : '1px',\r\n                      borderColor: isActive ? '#bdbdbd' : '#3a3a3a',\r\n                    }}\r\n                  />\r\n                  <span className=\"snake-stream-graph__legend-label\">{key}</span>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"snake-stream-graph__corner snake-stream-graph__corner--bottom-left\" />\r\n      <div className=\"snake-stream-graph__corner snake-stream-graph__corner--bottom-right\" />\r\n    </div>\r\n  );\r\n};","import React, { useState, useEffect } from 'react';\r\nimport './subcard.css';\r\n\r\nexport interface SubCardProps {\r\n  /** Card content */\r\n  children: React.ReactNode;\r\n  /** Optional header content */\r\n  header?: React.ReactNode;\r\n  /** Optional footer content */\r\n  footer?: React.ReactNode;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n  /** Size variant */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** Whether the card is interactive (hoverable) */\r\n  interactive?: boolean;\r\n  /** Click handler for interactive cards */\r\n  onClick?: () => void;\r\n  /** Color variant */\r\n  variant?: 'default' | 'success' | 'warning' | 'danger' | 'info' | 'inactive';\r\n  /** Custom color for corner plus symbols */\r\n  cornerColor?: string;\r\n  /** Enable transition animation */\r\n  transitionIn?: boolean;\r\n  /** Type of transition animation */\r\n  transitionType?: 'expand' | 'fade' | 'slide-up' | 'slide-down' | 'slide-left' | 'slide-right';\r\n  /** Transition speed in milliseconds */\r\n  transitionSpeed?: number;\r\n  /** Delay before transition starts in milliseconds */\r\n  transitionDelay?: number;\r\n  /** Callback when transition completes */\r\n  onTransitionComplete?: () => void;\r\n}\r\n\r\n/** SubCard component with plus symbols in corners */\r\nexport const SubCard: React.FC<SubCardProps> = ({\r\n  children,\r\n  header,\r\n  footer,\r\n  className = '',\r\n  size = 'medium',\r\n  interactive = false,\r\n  onClick,\r\n  variant = 'default',\r\n  cornerColor,\r\n  transitionIn = false,\r\n  transitionType = 'expand',\r\n  transitionSpeed = 300,\r\n  transitionDelay = 0,\r\n  onTransitionComplete,\r\n}) => {\r\n  const [isVisible, setIsVisible] = useState(!transitionIn);\r\n  const [isAnimating, setIsAnimating] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (transitionIn) {\r\n      const delayTimer = setTimeout(() => {\r\n        setIsVisible(true);\r\n        setIsAnimating(true);\r\n        \r\n        const completeTimer = setTimeout(() => {\r\n          setIsAnimating(false);\r\n          onTransitionComplete?.();\r\n        }, transitionSpeed);\r\n\r\n        return () => clearTimeout(completeTimer);\r\n      }, transitionDelay);\r\n\r\n      return () => clearTimeout(delayTimer);\r\n    }\r\n  }, [transitionIn, transitionDelay, transitionSpeed, onTransitionComplete]);\r\n\r\n  const classes = [\r\n    'snake-subcard',\r\n    `snake-subcard--${size}`,\r\n    `snake-subcard--${variant}`,\r\n    interactive && 'snake-subcard--interactive',\r\n    transitionIn && 'snake-subcard--transition',\r\n    transitionIn && `snake-subcard--transition-${transitionType}`,\r\n    isVisible && 'snake-subcard--visible',\r\n    isAnimating && 'snake-subcard--animating',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const Component = interactive ? 'button' : 'div';\r\n\r\n  const transitionStyle = transitionIn ? {\r\n    '--transition-speed': `${transitionSpeed}ms`,\r\n  } as React.CSSProperties : undefined;\r\n\r\n  return (\r\n    <Component\r\n      className={classes}\r\n      onClick={interactive ? onClick : undefined}\r\n      type={interactive ? 'button' : undefined}\r\n      style={transitionStyle}\r\n    >\r\n      <div\r\n        className=\"snake-subcard__corner snake-subcard__corner--top-left\"\r\n        style={cornerColor ? { color: cornerColor } : undefined}\r\n      >\r\n        ＋\r\n      </div>\r\n      <div\r\n        className=\"snake-subcard__corner snake-subcard__corner--top-right\"\r\n        style={cornerColor ? { color: cornerColor } : undefined}\r\n      >\r\n        ＋\r\n      </div>\r\n      <div\r\n        className=\"snake-subcard__corner snake-subcard__corner--bottom-left\"\r\n        style={cornerColor ? { color: cornerColor } : undefined}\r\n      >\r\n        ＋\r\n      </div>\r\n      <div\r\n        className=\"snake-subcard__corner snake-subcard__corner--bottom-right\"\r\n        style={cornerColor ? { color: cornerColor } : undefined}\r\n      >\r\n        ＋\r\n      </div>\r\n\r\n      {header && <div className=\"snake-subcard__header\">{header}</div>}\r\n\r\n      <div className=\"snake-subcard__content\">{children}</div>\r\n\r\n      {footer && <div className=\"snake-subcard__footer\">{footer}</div>}\r\n    </Component>\r\n  );\r\n};\r\n","import React, { useState } from 'react';\r\nimport './tabs.css';\r\n\r\ninterface Tab {\r\n  id: string;\r\n  label: string;\r\n  content: React.ReactNode;\r\n  disabled?: boolean;\r\n  icon?: React.ReactNode;\r\n}\r\n\r\nexport interface TabsProps {\r\n  /** Tab items */\r\n  tabs: Tab[];\r\n  /** Active tab ID */\r\n  activeTab?: string;\r\n  /** Change handler */\r\n  onChange?: (tabId: string) => void;\r\n  /** Visual variant */\r\n  variant?: 'default' | 'boxed' | 'underline';\r\n  /** Size variant */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** Full width tabs */\r\n  fullWidth?: boolean;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n}\r\n\r\n/** Tabs component for organizing content */\r\nexport const Tabs: React.FC<TabsProps> = ({\r\n  tabs,\r\n  activeTab: controlledActiveTab,\r\n  onChange,\r\n  variant = 'default',\r\n  size = 'medium',\r\n  fullWidth = false,\r\n  className = '',\r\n}) => {\r\n  const [internalActiveTab, setInternalActiveTab] = useState(tabs[0]?.id || '');\r\n  const activeTab = controlledActiveTab !== undefined ? controlledActiveTab : internalActiveTab;\r\n\r\n  const handleTabClick = (tabId: string) => {\r\n    if (onChange) {\r\n      onChange(tabId);\r\n    } else {\r\n      setInternalActiveTab(tabId);\r\n    }\r\n  };\r\n\r\n  const activeTabContent = tabs.find((tab) => tab.id === activeTab)?.content;\r\n\r\n  const tabsClasses = [\r\n    'snake-tabs',\r\n    `snake-tabs--${variant}`,\r\n    `snake-tabs--${size}`,\r\n    fullWidth && 'snake-tabs--full-width',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  return (\r\n    <div className={tabsClasses}>\r\n      <div className=\"snake-tabs__header\">\r\n        <div className=\"snake-tabs__list\" role=\"tablist\">\r\n          {tabs.map((tab) => (\r\n            <button\r\n              key={tab.id}\r\n              type=\"button\"\r\n              role=\"tab\"\r\n              aria-selected={activeTab === tab.id}\r\n              aria-controls={`tabpanel-${tab.id}`}\r\n              className={[\r\n                'snake-tabs__tab',\r\n                activeTab === tab.id && 'snake-tabs__tab--active',\r\n                tab.disabled && 'snake-tabs__tab--disabled',\r\n              ]\r\n                .filter(Boolean)\r\n                .join(' ')}\r\n              onClick={() => !tab.disabled && handleTabClick(tab.id)}\r\n              disabled={tab.disabled}\r\n            >\r\n              {tab.icon && <span className=\"snake-tabs__icon\">{tab.icon}</span>}\r\n              <span className=\"snake-tabs__label\">{tab.label}</span>\r\n            </button>\r\n          ))}\r\n        </div>\r\n        <div className=\"snake-tabs__indicator\" />\r\n      </div>\r\n\r\n      <div className=\"snake-tabs__content\">\r\n        {tabs.map((tab) => (\r\n          <div\r\n            key={tab.id}\r\n            id={`tabpanel-${tab.id}`}\r\n            role=\"tabpanel\"\r\n            aria-labelledby={tab.id}\r\n            className={['snake-tabs__panel', activeTab === tab.id && 'snake-tabs__panel--active']\r\n              .filter(Boolean)\r\n              .join(' ')}\r\n          >\r\n            {activeTab === tab.id && tab.content}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport './text.css';\r\n\r\nexport interface TextProps {\r\n  /** HTML element to render */\r\n  as?:\r\n    | 'p'\r\n    | 'span'\r\n    | 'div'\r\n    | 'blockquote'\r\n    | 'figcaption'\r\n    | 'small'\r\n    | 'strong'\r\n    | 'em'\r\n    | 'mark'\r\n    | 'del'\r\n    | 'ins'\r\n    | 'sub'\r\n    | 'sup';\r\n  /** Text size */\r\n  size?: '2xl' | 'xl' | 'lg' | 'md' | 'sm' | 'xs';\r\n  /** Color variant */\r\n  variant?:\r\n    | 'default'\r\n    | 'primary'\r\n    | 'secondary'\r\n    | 'muted'\r\n    | 'success'\r\n    | 'warning'\r\n    | 'danger'\r\n    | 'info';\r\n  /** Font weight */\r\n  weight?: 'normal' | 'medium' | 'bold';\r\n  /** Text alignment */\r\n  align?: 'left' | 'center' | 'right' | 'justify';\r\n  /** Text transform */\r\n  transform?: 'none' | 'uppercase' | 'lowercase' | 'capitalize';\r\n  /** Font style */\r\n  italic?: boolean;\r\n  /** Underline decoration */\r\n  underline?: boolean;\r\n  /** Strike through */\r\n  strike?: boolean;\r\n  /** Monospace font */\r\n  mono?: boolean;\r\n  /** Truncate with ellipsis */\r\n  truncate?: boolean;\r\n  /** Line clamp (multi-line truncation) */\r\n  clamp?: number;\r\n  /** Line height */\r\n  leading?: 'tight' | 'normal' | 'relaxed' | 'loose';\r\n  /** Letter spacing */\r\n  tracking?: 'tight' | 'normal' | 'wide';\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n  /** Children content */\r\n  children: React.ReactNode;\r\n}\r\n\r\n/** Text component for body text and inline elements */\r\nexport const Text: React.FC<TextProps> = ({\r\n  as = 'p',\r\n  size = 'md',\r\n  variant = 'default',\r\n  weight = 'normal',\r\n  align = 'left',\r\n  transform = 'none',\r\n  italic = false,\r\n  underline = false,\r\n  strike = false,\r\n  mono = false,\r\n  truncate = false,\r\n  clamp,\r\n  leading = 'normal',\r\n  tracking = 'normal',\r\n  className = '',\r\n  children,\r\n}) => {\r\n  const Component = as;\r\n\r\n  const textClasses = [\r\n    'snake-text',\r\n    `snake-text--${size}`,\r\n    `snake-text--${variant}`,\r\n    `snake-text--weight-${weight}`,\r\n    `snake-text--align-${align}`,\r\n    `snake-text--leading-${leading}`,\r\n    `snake-text--tracking-${tracking}`,\r\n    transform !== 'none' && `snake-text--${transform}`,\r\n    italic && 'snake-text--italic',\r\n    underline && 'snake-text--underline',\r\n    strike && 'snake-text--strike',\r\n    mono && 'snake-text--mono',\r\n    truncate && 'snake-text--truncate',\r\n    clamp && 'snake-text--clamp',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const style = clamp\r\n    ? ({\r\n      '--line-clamp': clamp,\r\n      WebkitLineClamp: clamp,\r\n    } as React.CSSProperties)\r\n    : undefined;\r\n\r\n  return (\r\n    <Component className={textClasses} style={style}>\r\n      {children}\r\n    </Component>\r\n  );\r\n};\r\n","import React, { useRef, useEffect } from 'react';\r\nimport './textarea.css';\r\n\r\nexport interface TextareaProps extends Omit<React.TextareaHTMLAttributes<HTMLTextAreaElement>, 'size'> {\r\n  /** Label for the textarea */\r\n  label?: string;\r\n  /** Helper text */\r\n  helperText?: string;\r\n  /** Error message */\r\n  error?: string;\r\n  /** Size variant */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** Visual variant */\r\n  variant?: 'default' | 'ghost' | 'bordered';\r\n  /** Full width */\r\n  fullWidth?: boolean;\r\n  /** Auto-resize to content */\r\n  autoResize?: boolean;\r\n  /** Minimum rows for auto-resize */\r\n  minRows?: number;\r\n  /** Maximum rows for auto-resize */\r\n  maxRows?: number;\r\n  /** Show character count */\r\n  showCount?: boolean;\r\n  /** Resize behavior */\r\n  resize?: 'none' | 'vertical' | 'horizontal' | 'both';\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n}\r\n\r\n/** Textarea component for multi-line text input */\r\nexport const Textarea: React.FC<TextareaProps> = ({\r\n  label,\r\n  helperText,\r\n  error,\r\n  size = 'medium',\r\n  variant = 'default',\r\n  fullWidth = false,\r\n  autoResize = false,\r\n  minRows = 3,\r\n  maxRows = 10,\r\n  showCount = false,\r\n  resize = 'vertical',\r\n  disabled = false,\r\n  maxLength,\r\n  value,\r\n  onChange,\r\n  className = '',\r\n  ...props\r\n}) => {\r\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\r\n  const [charCount, setCharCount] = React.useState(value ? String(value).length : 0);\r\n\r\n  const adjustHeight = () => {\r\n    const textarea = textareaRef.current;\r\n    if (!textarea || !autoResize) return;\r\n\r\n    // Reset height to get accurate scrollHeight\r\n    textarea.style.height = 'auto';\r\n\r\n    const lineHeight = parseInt(getComputedStyle(textarea).lineHeight);\r\n    const minHeight = minRows * lineHeight;\r\n    const maxHeight = maxRows * lineHeight;\r\n\r\n    const newHeight = Math.min(Math.max(textarea.scrollHeight, minHeight), maxHeight);\r\n    textarea.style.height = `${newHeight}px`;\r\n  };\r\n\r\n  useEffect(() => {\r\n    adjustHeight();\r\n  }, [value, autoResize]);\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    setCharCount(e.target.value.length);\r\n    onChange?.(e);\r\n    adjustHeight();\r\n  };\r\n\r\n  const wrapperClasses = [\r\n    'snake-textarea-wrapper',\r\n    `snake-textarea-wrapper--${size}`,\r\n    fullWidth && 'snake-textarea-wrapper--full-width',\r\n    error && 'snake-textarea-wrapper--error',\r\n    disabled && 'snake-textarea-wrapper--disabled',\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const textareaClasses = [\r\n    'snake-textarea',\r\n    `snake-textarea--${variant}`,\r\n    autoResize && 'snake-textarea--auto-resize',\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const resizeStyle = autoResize ? 'none' : resize;\r\n\r\n  return (\r\n    <div className={wrapperClasses}>\r\n      {label && <label className=\"snake-textarea__label\">{label}</label>}\r\n\r\n      <div className=\"snake-textarea__container\">\r\n        <textarea\r\n          ref={textareaRef}\r\n          className={textareaClasses}\r\n          disabled={disabled}\r\n          value={value}\r\n          onChange={handleChange}\r\n          maxLength={maxLength}\r\n          rows={autoResize ? minRows : props.rows}\r\n          style={{ resize: resizeStyle }}\r\n          {...props}\r\n        />\r\n\r\n        <div className=\"snake-textarea__corner snake-textarea__corner--top-left\" />\r\n        <div className=\"snake-textarea__corner snake-textarea__corner--top-right\" />\r\n        <div className=\"snake-textarea__corner snake-textarea__corner--bottom-left\" />\r\n        <div className=\"snake-textarea__corner snake-textarea__corner--bottom-right\" />\r\n      </div>\r\n\r\n      <div className=\"snake-textarea__footer\">\r\n        {error ? (\r\n          <span className=\"snake-textarea__error\">{error}</span>\r\n        ) : helperText ? (\r\n          <span className=\"snake-textarea__helper\">{helperText}</span>\r\n        ) : null}\r\n\r\n        {showCount && (\r\n          <span className=\"snake-textarea__count\">\r\n            {charCount}\r\n            {maxLength && `/${maxLength}`}\r\n          </span>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport './toggle.css';\r\n\r\nexport interface ToggleProps {\r\n  /** Toggle state */\r\n  checked?: boolean;\r\n  /** Change handler */\r\n  onChange?: (checked: boolean) => void;\r\n  /** Label */\r\n  label?: string;\r\n  /** Helper text */\r\n  helperText?: string;\r\n  /** Size variant */\r\n  size?: 'small' | 'medium' | 'large';\r\n  /** Visual variant */\r\n  variant?: 'default' | 'success' | 'warning' | 'danger' | 'info';\r\n  /** Disabled state */\r\n  disabled?: boolean;\r\n  /** Label position */\r\n  labelPosition?: 'left' | 'right';\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n}\r\n\r\n/** Toggle/Switch component with dark theme styling */\r\nexport const Toggle: React.FC<ToggleProps> = ({\r\n  checked = false,\r\n  onChange,\r\n  label,\r\n  helperText,\r\n  size = 'medium',\r\n  variant = 'default',\r\n  disabled = false,\r\n  labelPosition = 'right',\r\n  className = '',\r\n}) => {\r\n  const handleClick = () => {\r\n    if (!disabled && onChange) {\r\n      onChange(!checked);\r\n    }\r\n  };\r\n\r\n  const toggleClasses = [\r\n    'snake-toggle',\r\n    `snake-toggle--${size}`,\r\n    `snake-toggle--${variant}`,\r\n    checked && 'snake-toggle--checked',\r\n    disabled && 'snake-toggle--disabled',\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  const wrapperClasses = [\r\n    'snake-toggle-wrapper',\r\n    `snake-toggle-wrapper--${labelPosition}`,\r\n    className,\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ');\r\n\r\n  return (\r\n    <div className={wrapperClasses}>\r\n      <button\r\n        type=\"button\"\r\n        role=\"switch\"\r\n        aria-checked={checked}\r\n        className={toggleClasses}\r\n        onClick={handleClick}\r\n        disabled={disabled}\r\n      >\r\n        <span className=\"snake-toggle__track\">\r\n          <span className=\"snake-toggle__thumb\" />\r\n        </span>\r\n      </button>\r\n      {label && (\r\n        <div className=\"snake-toggle__label-container\">\r\n          <label className=\"snake-toggle__label\" onClick={handleClick}>\r\n            {label}\r\n          </label>\r\n          {helperText && <span className=\"snake-toggle__helper-text\">{helperText}</span>}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n"],"names":["styleInject","css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","ChevronDownIcon","className","_jsx","viewBox","width","height","fill","children","points","AngleRightIcon","CheckIcon","ExclamationTriangleIcon","d","TimesIcon","InfoCircleIcon","AngleUpIcon","AngleDownIcon","items","multiple","defaultOpen","openItems","controlledOpenItems","onChange","variant","size","header","internalOpenItems","setInternalOpenItems","useState","undefined","accordionClasses","filter","Boolean","join","map","item","index","isOpen","includes","id","itemClasses","disabled","_jsxs","onClick","itemId","newOpenItems","handleToggle","icon","title","content","length","description","showIcon","closable","onClose","actions","borderPosition","alertClasses","role","getDefaultIcon","Component","badgeClasses","data","maxValue","barWidth","gap","showValues","showGrid","gridLines","showLabels","showScale","orientation","animate","barColor","gridColor","formatValue","value","toString","onBarClick","onBarHover","hoveredBar","setHoveredBar","selectedBar","setSelectedBar","tooltipPosition","setTooltipPosition","calculatedMaxValue","useMemo","values","Math","max","scaleValues","Array","from","_","i","round","graphWidth","graphHeight","classes","variantProps","minimal","detailed","interactive","finalShowGrid","finalShowScale","finalShowValues","finalGridLines","finalBarColor","finalGridColor","maxWidth","_Fragment","position","bottom","borderColor","reverse","top","point","barHeight","onMouseEnter","e","rect","currentTarget","getBoundingClientRect","x","left","y","onMouseLeave","marginLeft","marginRight","backgroundColor","color","animationDelay","label","subLabel","barWidthPercent","marginTop","marginBottom","transform","separator","maxItems","renderItem","onItemClick","breadcrumbClasses","displayItems","React","href","slice","defaultRenderItem","isLast","preventDefault","handleClick","loading","fullWidth","props","footer","transitionIn","transitionType","transitionSpeed","transitionDelay","onTransitionComplete","isVisible","setIsVisible","isAnimating","setIsAnimating","useEffect","delayTimer","setTimeout","completeTimer","clearTimeout","transitionStyle","indeterminate","helperText","error","checkboxRef","useRef","current","wrapperClasses","checkboxClasses","showAlpha","presets","showInput","inline","setIsOpen","currentColor","setCurrentColor","hue","setHue","saturation","setSaturation","brightness","setBrightness","alpha","setAlpha","pickerRef","saturationRef","hex","rgb","hexToRgb","r","g","b","delta","min","h","s","v","hexToHsb","result","exec","parseInt","hsbToHex","hNorm","sNorm","bNorm","floor","f","p","q","t","b_out","toHex","n","updateColor","a","handleClickOutside","event","contains","target","addEventListener","removeEventListener","pickerClasses","panelClasses","clientX","clientY","newSaturation","newBrightness","newHue","newAlpha","test","placeholder","handlePresetClick","thickness","spacing","dividerClasses","innerRadius","colors","showCenterValue","centerValue","centerLabel","showLegend","animateLegend","segmentGap","total","onSegmentClick","activeSegment","setActiveSegment","hoveredSegment","setHoveredSegment","segments","sum","reduce","acc","currentAngle","segment","percentage","angle","startAngle","endAngle","center","svgSize","outerR","innerR","generateSegmentPath","finalSegmentGap","startAngleRad","PI","endAngleRad","x1","cos","y1","sin","x2","y2","x3","y3","x4","y4","largeArc","halfGap","outerGapAngle","innerGapAngle","startAngleOuterRad","endAngleOuterRad","startAngleInnerRad","endAngleInnerRad","finalShowLegend","finalShowCenterValue","isInteractive","centerText","preserveAspectRatio","isActive","isHovered","isDimmed","fillOpacity","stroke","strokeWidth","strokeOpacity","cursor","transition","transformOrigin","newActive","attributeName","to","dur","repeatCount","pos","midAngleRad","labelR","getLabelPosition","textAnchor","dominantBaseline","fontSize","fontFamily","pointerEvents","dy","fontWeight","cx","cy","opacity","borderWidth","open","overlay","closeOnOverlayClick","lockScroll","drawerRef","handleEscape","key","body","overflow","focusableElements","querySelectorAll","firstElement","lastElement","handleTab","shiftKey","activeElement","focus","drawerClasses","active","count","columns","rows","columnGap","rowGap","alignItems","justifyItems","alignContent","justifyContent","autoFlow","areas","minColumnWidth","fullHeight","replace","gridStyle","as","align","weight","decorated","decorationPosition","truncate","headingClasses","hexRadius","xDomain","yDomain","showAxes","axisColor","xLabel","yLabel","onHexClick","activeHex","setActiveHex","hoveredHex","setHoveredHex","xMin","xMax","yMin","yMax","xValues","yValues","vertDist","sqrt","horizDist","margin","plotWidth","plotHeight","hexBins","bins","Map","padding","effectiveWidth","effectiveHeight","forEach","scaledX","scaledY","col","row","hexX","hexY","has","set","bin","get","push","maxCount","finalShowAxes","xTicks","step","tickCount","yTicks","tick","strokeDasharray","hexKey","getColor","centerX","centerY","radius","radian","toFixed","shape","tooltip","badge","badgeVariant","buttonClasses","leftIcon","rightIcon","inputClasses","pressed","iconPosition","showPoints","pointRadius","curve","formatX","formatY","onPointClick","series","isArray","activeSeries","setActiveSeries","hoveredPoint","setHoveredPoint","defaultColors","allPoints","flatMap","xScale","yScale","generatePath","scaledPoints","path","prev","generateFillPath","linePath","lastPoint","firstPoint","finalShowPoints","finalStrokeWidth","offset","stopColor","stopOpacity","name","strokeLinecap","strokeLinejoin","j","external","startIcon","endIcon","rel","linkClasses","linkTarget","linkRel","trim","startNumber","numberPadding","formatNumber","arrowColor","showNumbers","uppercase","getFormattedNumber","num","padStart","listClasses","currentNumber","tabIndex","onKeyDown","subitems","subitem","subIndex","subSubitem","subSubIndex","renderListItem","text","fullscreen","backdrop","loadingClasses","renderLoader","trigger","controlledIsOpen","onOpenChange","placement","showArrow","internalIsOpen","setInternalIsOpen","activeSubmenu","setActiveSubmenu","menuRef","triggerRef","renderMenuItem","isSubmenuItem","divider","danger","submenu","handleItemClick","shortcut","subItem","menuClasses","showCloseButton","modalRef","modalClasses","onComplete","masked","success","autoFocus","setValues","initial","split","inputRefs","newValues","combined","every","handleChange","pastedValues","char","lastFilledIndex","findLastIndex","nextIndex","handlePaste","pastedData","clipboardData","getData","firstEmptyIndex","findIndex","el","inputMode","handleKeyDown","onFocus","select","handleFocus","onPaste","maxLength","showLabel","labelPosition","val","ariaLabel","progressClasses","renderSegments","segmentElements","filledSegments","options","direction","groupClasses","option","isChecked","radioClasses","checked","optionValue","initialData","ridgeHeight","overlap","xLabels","maxRidges","scrollInterval","generateNewData","onRidgeClick","activeRidge","setActiveRidge","hoveredRidge","setHoveredRidge","scrollingData","setScrollingData","placeholders","initializeScrollingData","scrollIntervalRef","dataCountRef","addNewData","prevData","newData","newItem","unshift","pop","setInterval","clearInterval","effectiveRidgeHeight","displayRidges","totalHeight","processedData","scrollingRidgeHeight","scrollingEffectiveHeight","seriesIndex","minValue","range","isPlaceholder","normalizedValues","yOffset","originalValue","closed","baseY","scrolling","finalShowLabels","onMouseMove","selectRef","selectedOption","find","opt","selectClasses","animation","lines","intensity","skeletonClasses","getSkeletonStyle","baseStyle","showValue","valueLabelPosition","showTicks","tickInterval","marks","internalValue","setInternalValue","isDragging","setIsDragging","showTooltip","setShowTooltip","sliderRef","trackRef","handleMouseMove","updateValue","handleMouseUp","newValue","clampedValue","sliderClasses","thumbStyle","fillStyle","onMouseDown","tickMarks","mark","markPercentage","renderTicks","bigStep","levels","fillColor","strokeColor","showDots","svgWidth","distance","labelX","labelY","endX","endY","gridLevels","levelRadius","polygonPath","gridPaths","level","finalProps","cyber","info","change","statClasses","changeClasses","getChangeIcon","steps","activeStep","clickable","onStepClick","showConnectors","stepperRef","connectorWidth","setConnectorWidth","connectorHeight","setConnectorHeight","calculateConnectorDimensions","stepElements","first","second","firstRect","secondRect","right","window","handleStepClick","state","getStepState","isClickable","keys","formatLabel","onLayerClick","svgHeight","activeLayer","setActiveLayer","hoveredLayer","setHoveredLayer","stackedData","layers","keyIndex","layer","y0","l","originalX","maxHeight","layerMax","shift","totals","maxTotal","cumulative","normalized","flat","pathTop","pathBottom","prevX","midX","prevY1","prevY0","gridPositions","ceil","cornerColor","stickyHeader","selectable","selectedRows","onSelectionChange","onRowClick","onSort","sortColumn","sortDirection","emptyMessage","tableClasses","getValue","k","column","sortable","handleSort","colSpan","rowIndex","stopPropagation","colIndex","render","tabs","activeTab","controlledActiveTab","internalActiveTab","setInternalActiveTab","tab","tabsClasses","tabId","italic","underline","strike","mono","clamp","leading","tracking","textClasses","WebkitLineClamp","autoResize","minRows","maxRows","showCount","resize","textareaRef","charCount","setCharCount","String","adjustHeight","textarea","lineHeight","getComputedStyle","minHeight","newHeight","scrollHeight","textareaClasses","resizeStyle","message","duration","action","showProgress","progress","setProgress","timer","interval","newProgress","toastClasses","toggleClasses"],"mappings":"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","x_google_ignoreList":[0]}